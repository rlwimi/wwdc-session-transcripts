WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:17.500 A:middle
[ Music ]

00:00:21.516 --> 00:00:27.076 A:middle
[ Applause ]

00:00:27.576 --> 00:00:28.096 A:middle
&gt;&gt; Thank you.

00:00:29.076 --> 00:00:29.856 A:middle
Hello everyone.

00:00:30.446 --> 00:00:32.665 A:middle
A very good afternoon
and welcome.

00:00:33.376 --> 00:00:34.616 A:middle
My name is Bharath Rao.

00:00:34.616 --> 00:00:36.796 A:middle
I'm an engineer with
the Core Motion Team,

00:00:37.136 --> 00:00:39.496 A:middle
and today I'm really
excited to be talking to you

00:00:39.496 --> 00:00:41.596 A:middle
about health and fitness.

00:00:42.506 --> 00:00:45.516 A:middle
In this talk, I'll be showing
you how you can use Core Motion

00:00:45.516 --> 00:00:49.716 A:middle
framework to add some
interesting and engaging health

00:00:49.716 --> 00:00:53.236 A:middle
and fitness features
into your apps.

00:00:53.296 --> 00:00:55.876 A:middle
Before we get started, for
those of you who are new

00:00:55.876 --> 00:00:58.106 A:middle
to Core Motion, I'd like
to remind you to go check

00:00:58.106 --> 00:00:59.676 A:middle
out some of our past sessions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:00.006 --> 00:01:01.786 A:middle
They have some excellent
information

00:01:01.786 --> 00:01:06.426 A:middle
about how sensors work, and
how we use, in Core Motion,

00:01:06.426 --> 00:01:08.736 A:middle
those sensors to provide APIs

00:01:09.186 --> 00:01:13.936 A:middle
that help your apps
observe stats and activity

00:01:13.936 --> 00:01:16.256 A:middle
and Device Motion,
and a whole lot more.

00:01:16.706 --> 00:01:17.376 A:middle
Go check them out.

00:01:18.796 --> 00:01:20.876 A:middle
So with that, let's get started.

00:01:21.606 --> 00:01:23.416 A:middle
Here's what we have in
store for you today.

00:01:23.996 --> 00:01:26.326 A:middle
I have an update to the
Historical Accelerometer

00:01:26.326 --> 00:01:27.606 A:middle
that I would like
to share with you.

00:01:29.046 --> 00:01:31.766 A:middle
We have a new pedometer
events API,

00:01:31.766 --> 00:01:34.396 A:middle
both for the iPhone
and the Apple Watch.

00:01:35.596 --> 00:01:38.996 A:middle
And finally, we are also
bringing the Device Motion APIs

00:01:39.136 --> 00:01:41.526 A:middle
to Apple Watch, with watchOS 3.

00:01:43.426 --> 00:01:45.296 A:middle
Thank you.

00:01:46.696 --> 00:01:51.366 A:middle
First up is Historical
Accelerometer.

00:01:54.256 --> 00:01:57.826 A:middle
Last year, we introduced
the CM Sensor Recorder API.

00:01:58.246 --> 00:02:01.226 A:middle
With this API, now
your apps have access


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.246 --> 00:02:01.226 A:middle
With this API, now
your apps have access

00:02:01.226 --> 00:02:04.816 A:middle
to raw accelerometer samples,
or long durations of time.

00:02:05.236 --> 00:02:09.175 A:middle
And you can also get this
access with very low power.

00:02:09.175 --> 00:02:11.406 A:middle
After your apps have
requested the framework

00:02:11.406 --> 00:02:14.076 A:middle
to start recording these
samples, they can get suspended.

00:02:14.076 --> 00:02:16.826 A:middle
And the OS will offer
those samples,

00:02:16.826 --> 00:02:18.356 A:middle
even across device sleeps.

00:02:18.466 --> 00:02:21.536 A:middle
And when your app is ready to
consume them, it can launch

00:02:21.716 --> 00:02:24.466 A:middle
and make a query,
and get access to all

00:02:24.466 --> 00:02:26.276 A:middle
of those buffered samples.

00:02:28.766 --> 00:02:32.436 A:middle
In watchOS 3, we have a
couple of important updates.

00:02:32.516 --> 00:02:34.926 A:middle
First of which is
the greater duration.

00:02:35.936 --> 00:02:40.206 A:middle
Now, your apps have a 36-hour
window in which they can launch

00:02:40.286 --> 00:02:42.656 A:middle
and get access to all
of that Historical

00:02:42.656 --> 00:02:44.016 A:middle
Accelerometer samples.

00:02:45.716 --> 00:02:48.346 A:middle
The second update should not
come as a surprise to you,

00:02:48.346 --> 00:02:51.696 A:middle
this is one of the most
requested updates for this API.

00:02:52.306 --> 00:02:54.656 A:middle
So I'm happy to announce
that in watchOS 3,

00:02:54.656 --> 00:02:57.736 A:middle
now the sample delay is
as little as 3 seconds.

00:02:58.376 --> 00:03:03.586 A:middle
With these updates, now you
can use Sensor Recorder,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.376 --> 00:03:03.586 A:middle
With these updates, now you
can use Sensor Recorder,

00:03:03.586 --> 00:03:07.596 A:middle
not only to observe user
activity, or at long durations,

00:03:07.596 --> 00:03:10.086 A:middle
but there are some
real time applications

00:03:10.086 --> 00:03:13.246 A:middle
for which you can use the
sensor recorder now maybe

00:03:13.246 --> 00:03:18.656 A:middle
to track sports activities or
to record workouts at the gym

00:03:18.856 --> 00:03:20.196 A:middle
or even health diagnosis.

00:03:20.786 --> 00:03:23.176 A:middle
Imagine an app on
the Apple Watch

00:03:23.176 --> 00:03:24.746 A:middle
that can detect hand tremors.

00:03:24.876 --> 00:03:28.476 A:middle
So now, whenever the user
experiences some hand tremors,

00:03:28.786 --> 00:03:29.876 A:middle
they can launch the app.

00:03:30.316 --> 00:03:31.926 A:middle
Your app will be
able to pull all

00:03:31.926 --> 00:03:35.306 A:middle
of the historical accelerometer
samples, do some analysis

00:03:35.306 --> 00:03:41.146 A:middle
on them and get a report that
says how severe that tremor was,

00:03:41.146 --> 00:03:44.436 A:middle
and what kind of tremor it
was and share it with the user

00:03:44.436 --> 00:03:46.616 A:middle
and maybe even with the
physician with consent,

00:03:46.946 --> 00:03:49.226 A:middle
so that it can speed
up the diagnosis

00:03:49.296 --> 00:03:51.576 A:middle
and the treatment
of such conditions.

00:03:53.156 --> 00:03:54.766 A:middle
So that was a great update

00:03:54.806 --> 00:03:57.306 A:middle
to Historical Accelerometer
in watchOS 3.

00:03:57.926 --> 00:03:59.916 A:middle
Next up is pedometer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:06.236 --> 00:04:09.036 A:middle
CMPedometer is a versatile API.

00:04:09.776 --> 00:04:14.066 A:middle
It records stats and
distance, and flights of stairs

00:04:14.066 --> 00:04:16.315 A:middle
that the users climb
throughout the day.

00:04:16.565 --> 00:04:19.736 A:middle
So you could use it to build
an all-day activity tracker

00:04:19.736 --> 00:04:23.086 A:middle
where you set some interesting
goals for your users to achieve.

00:04:23.136 --> 00:04:25.016 A:middle
And that way you
can motivate them

00:04:25.096 --> 00:04:26.416 A:middle
to lead a healthier lifestyle.

00:04:27.446 --> 00:04:31.446 A:middle
But where CMPedometer
is really powerful is

00:04:31.446 --> 00:04:33.086 A:middle
in the context of workouts.

00:04:34.236 --> 00:04:36.656 A:middle
Take for example,
the pace metric.

00:04:36.656 --> 00:04:39.346 A:middle
We have stride estimation
algorithms that are running both

00:04:39.346 --> 00:04:42.786 A:middle
on the iPhone and Apple
Watch and using those,

00:04:43.046 --> 00:04:45.786 A:middle
we are able to provide
really accurate pace

00:04:45.786 --> 00:04:47.246 A:middle
and distance metrics, even

00:04:47.246 --> 00:04:49.196 A:middle
when the phone doesn't
have a GPS signal.

00:04:49.286 --> 00:04:51.356 A:middle
Or when you go run
with your Apple Watch,

00:04:51.356 --> 00:04:53.826 A:middle
and you leave the phone
behind, even then,

00:04:54.066 --> 00:04:55.986 A:middle
the users get very
accurate metrics.

00:04:57.126 --> 00:05:01.846 A:middle
The pedometer events API that
we are adding today is actually


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.126 --> 00:05:01.846 A:middle
The pedometer events API that
we are adding today is actually

00:05:01.846 --> 00:05:05.446 A:middle
going to help you make those
workout experiences even more

00:05:05.446 --> 00:05:07.016 A:middle
engaging and accurate.

00:05:09.596 --> 00:05:13.496 A:middle
Let's consider a typical
running workout; an urban run.

00:05:13.496 --> 00:05:16.796 A:middle
As third packet [inaudible],
one of the challenges

00:05:16.796 --> 00:05:19.656 A:middle
that you'll face with this
scenario is how do you detect

00:05:19.656 --> 00:05:22.396 A:middle
all those starts and stops
that the users experience

00:05:22.396 --> 00:05:24.966 A:middle
at intersections while
they're running in a city?

00:05:25.546 --> 00:05:27.936 A:middle
So the user comes to a
stop at the stoplight,

00:05:28.176 --> 00:05:32.256 A:middle
and your app will continue to
accumulate all of that time

00:05:32.256 --> 00:05:33.396 A:middle
that they're just
standing around.

00:05:34.236 --> 00:05:36.626 A:middle
So by the time they get
to the end of their run,

00:05:37.086 --> 00:05:39.136 A:middle
now you have accumulated
enough time, and you --

00:05:39.246 --> 00:05:42.356 A:middle
if you try to compute
their average pace

00:05:42.356 --> 00:05:45.116 A:middle
over their entire run, you'll
probably end up with something

00:05:45.116 --> 00:05:47.566 A:middle
that will resemble
that of their granddad.

00:05:49.606 --> 00:05:53.536 A:middle
Or maybe granddad's gone faster
than them, so never mind.

00:05:53.836 --> 00:05:56.376 A:middle
So what I mean to say is,

00:05:56.376 --> 00:05:59.186 A:middle
you'll end up with
really inaccurate pace,

00:05:59.316 --> 00:06:01.676 A:middle
which is probably much lower
than their running pace.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.316 --> 00:06:01.676 A:middle
which is probably much lower
than their running pace.

00:06:02.506 --> 00:06:07.016 A:middle
So one probable solution is you
could provide a manual pause

00:06:07.016 --> 00:06:07.846 A:middle
and resume option.

00:06:08.436 --> 00:06:12.006 A:middle
But now, once they have paused,
they will also have to remember

00:06:12.006 --> 00:06:14.196 A:middle
to resume the workout
when they start running.

00:06:14.666 --> 00:06:16.076 A:middle
And if they don't, now all

00:06:16.076 --> 00:06:18.916 A:middle
of the running they do
while their app is paused,

00:06:19.016 --> 00:06:21.696 A:middle
is going to be not recorded
towards their workout.

00:06:21.696 --> 00:06:25.886 A:middle
So if they forget to pause,
then they get inaccurate pace.

00:06:25.886 --> 00:06:29.466 A:middle
If they forget to resume,
they lose out on distance.

00:06:30.686 --> 00:06:35.776 A:middle
So clearly, you need some auto
pause and resume detection

00:06:35.776 --> 00:06:38.916 A:middle
that is not only accurate, but
it also has to be responsive.

00:06:38.916 --> 00:06:41.526 A:middle
It has to feel like your
app is doing a good job

00:06:41.976 --> 00:06:44.506 A:middle
of detecting those
starts and stops.

00:06:45.836 --> 00:06:47.536 A:middle
At this point, you
might be wondering,

00:06:47.536 --> 00:06:49.196 A:middle
why not just use GPS and steps.

00:06:49.196 --> 00:06:51.706 A:middle
After all, you have access
to those in your apps.

00:06:52.856 --> 00:06:55.626 A:middle
If you have ever used GPS
before, you know that you have

00:06:55.626 --> 00:06:57.716 A:middle
to do a considerable
amount of filtering on it,

00:06:57.716 --> 00:06:59.296 A:middle
so that you can remove
all the noise.

00:06:59.866 --> 00:07:02.806 A:middle
Which means that it is going
to be again, slow to respond.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.866 --> 00:07:02.806 A:middle
Which means that it is going
to be again, slow to respond.

00:07:03.656 --> 00:07:06.616 A:middle
And with the steps that you
receive from CMpedometer,

00:07:06.616 --> 00:07:07.706 A:middle
it has a built in delay.

00:07:08.136 --> 00:07:11.336 A:middle
And we do that because we
want to avoid false positives.

00:07:11.796 --> 00:07:13.926 A:middle
We use steps to estimate stride.

00:07:14.326 --> 00:07:16.486 A:middle
And from that we compute
distance and pace.

00:07:16.486 --> 00:07:18.266 A:middle
So it's very important for us

00:07:18.266 --> 00:07:25.506 A:middle
to have accurate step
counts at the first step.

00:07:25.566 --> 00:07:28.696 A:middle
So in this release, we are
giving you pedometer events

00:07:28.876 --> 00:07:31.916 A:middle
that is going to help you
detect those starts and stops,

00:07:31.916 --> 00:07:35.196 A:middle
not only with good accuracy,
but with low latency.

00:07:36.356 --> 00:07:39.536 A:middle
Our pedometer events
solution, or the auto-pause

00:07:39.606 --> 00:07:42.566 A:middle
and resume solution uses
a predictive algorithm.

00:07:43.086 --> 00:07:45.616 A:middle
This predictive algorithm
was trained on user data

00:07:45.846 --> 00:07:48.146 A:middle
so that we can improve
the likelihood estimate

00:07:48.146 --> 00:07:49.836 A:middle
of whether the user is moving,

00:07:50.096 --> 00:07:52.116 A:middle
or have they come
to a complete stop?

00:07:52.646 --> 00:07:54.576 A:middle
Of course, all in a
pedestrian context.

00:07:55.716 --> 00:07:59.276 A:middle
By doing this, now we are able
to recover most of the delay

00:07:59.276 --> 00:08:02.046 A:middle
that is associated with the
step counting algorithm.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.276 --> 00:08:02.046 A:middle
that is associated with the
step counting algorithm.

00:08:02.416 --> 00:08:05.296 A:middle
But we are able to do so
with pretty good accuracy.

00:08:07.486 --> 00:08:09.096 A:middle
I would also like to point out,

00:08:09.096 --> 00:08:11.816 A:middle
because the predictive
algorithm keeps track

00:08:11.816 --> 00:08:15.136 A:middle
of whether the user is moving,
or if they have come to a stop,

00:08:15.346 --> 00:08:17.766 A:middle
we can also support walk base.

00:08:17.886 --> 00:08:21.096 A:middle
So when you are -- when
the user comes to a stop,

00:08:21.856 --> 00:08:24.886 A:middle
whether from a walk or a run,
you'll get a pause event.

00:08:25.136 --> 00:08:27.926 A:middle
And as soon as the user
starts to run or walk,

00:08:28.226 --> 00:08:30.426 A:middle
you'll get a resume
event within your app.

00:08:32.236 --> 00:08:35.275 A:middle
Pedometer Events API,
they look identical both

00:08:35.275 --> 00:08:37.076 A:middle
on iOS 10 and watchOS 3.

00:08:38.686 --> 00:08:42.946 A:middle
Let's take a look
at the API itself.

00:08:42.946 --> 00:08:44.696 A:middle
You have the pause
and resume events.

00:08:45.346 --> 00:08:47.616 A:middle
Each event is timestamped
with the exact time

00:08:47.616 --> 00:08:50.326 A:middle
when the algorithm detected
the transition from moving

00:08:50.386 --> 00:08:52.586 A:middle
to not moving state,
and vice versa.

00:08:53.356 --> 00:08:57.626 A:middle
And you had to start and stop a
pace to help your app register

00:08:57.626 --> 00:08:59.086 A:middle
and deregister for these events.

00:08:59.536 --> 00:09:07.006 A:middle
I've been talking about how
pedometer events can be used


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.536 --> 00:09:07.006 A:middle
I've been talking about how
pedometer events can be used

00:09:07.006 --> 00:09:10.886 A:middle
to clearly demarcate just
the running segments during a

00:09:10.956 --> 00:09:14.516 A:middle
complete running workout
and how you can, using that,

00:09:14.516 --> 00:09:16.016 A:middle
derive accurate metrics.

00:09:16.816 --> 00:09:19.096 A:middle
But you can also
use pedometer events

00:09:19.096 --> 00:09:21.036 A:middle
in some other interesting ways.

00:09:21.246 --> 00:09:22.926 A:middle
Let's take a look at an example.

00:09:24.316 --> 00:09:26.746 A:middle
This is a trail-running
app on the iPhone.

00:09:27.076 --> 00:09:29.866 A:middle
So here we are going to use
pedometer events to see --

00:09:30.686 --> 00:09:34.236 A:middle
to figure out when we can engage
with the user, and when we do,

00:09:34.586 --> 00:09:35.716 A:middle
how we can present them

00:09:35.716 --> 00:09:38.186 A:middle
with some interesting
information that's going

00:09:38.186 --> 00:09:41.406 A:middle
to make them respond
to those more actively.

00:09:42.136 --> 00:09:44.216 A:middle
And because this is
a trail-running app,

00:09:44.216 --> 00:09:46.216 A:middle
there is going to be an
elevation change throughout the

00:09:46.216 --> 00:09:47.476 A:middle
run so we are going to see

00:09:47.476 --> 00:09:49.356 A:middle
if there is some
meaningful information there.

00:09:54.316 --> 00:09:57.286 A:middle
We are going to use the
CMpedometer class to register

00:09:57.286 --> 00:09:58.756 A:middle
for the pause and resume events.

00:09:58.886 --> 00:10:01.376 A:middle
And we are going to get the
relative altitude updates


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.886 --> 00:10:01.376 A:middle
And we are going to get the
relative altitude updates

00:10:01.436 --> 00:10:04.916 A:middle
or the elevation changes
using the CMAltimeter class.

00:10:06.686 --> 00:10:09.456 A:middle
If you want to continue to
receive pedometer events

00:10:09.456 --> 00:10:11.746 A:middle
within your app, even
when the screen turns off,

00:10:11.906 --> 00:10:13.586 A:middle
your app has to stay running.

00:10:14.736 --> 00:10:17.906 A:middle
And one way of doing that on
the iPhone is to subscribe

00:10:18.006 --> 00:10:19.996 A:middle
to continuous background
location.

00:10:20.286 --> 00:10:22.276 A:middle
If you are interested in
knowing more about this,

00:10:22.596 --> 00:10:24.146 A:middle
I suggest that you go check

00:10:24.146 --> 00:10:26.326 A:middle
out the Core Location
Best Practices session

00:10:26.596 --> 00:10:28.516 A:middle
that is happening at WWDC today.

00:10:30.416 --> 00:10:31.566 A:middle
Next, we are going to register

00:10:31.566 --> 00:10:33.416 A:middle
for the relative
altitude updates first

00:10:33.696 --> 00:10:35.236 A:middle
availability check.

00:10:35.236 --> 00:10:37.756 A:middle
And then we provide
an operations queue,

00:10:37.756 --> 00:10:39.706 A:middle
and provide a callback handler

00:10:39.796 --> 00:10:41.226 A:middle
to start receiving
those updates.

00:10:42.006 --> 00:10:45.446 A:middle
In this example, I'm
just going to make a note

00:10:45.446 --> 00:10:46.896 A:middle
of the most recent update.

00:10:46.896 --> 00:10:50.776 A:middle
But potentially in your app, you
can cache all of those updates.

00:10:51.006 --> 00:10:53.906 A:middle
And at the end of the workout
you can potentially provide a

00:10:53.906 --> 00:10:56.826 A:middle
nice elevation profile
for the entire run.

00:10:59.216 --> 00:11:01.926 A:middle
Next, we'll register for the
pedometer events themselves.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.216 --> 00:11:01.926 A:middle
Next, we'll register for the
pedometer events themselves.

00:11:02.176 --> 00:11:03.996 A:middle
So first an availability check.

00:11:03.996 --> 00:11:07.066 A:middle
And then register by
providing a callback handler.

00:11:08.476 --> 00:11:12.076 A:middle
This is just a quick tip to
make sure that I don't run

00:11:12.076 --> 00:11:15.106 A:middle
into any concurrence issues,
I'm doing work from all

00:11:15.106 --> 00:11:17.116 A:middle
of the handlers on the
same operations queue.

00:11:19.546 --> 00:11:23.196 A:middle
So now that the app is
set up to exactly figure

00:11:23.196 --> 00:11:25.056 A:middle
out when the user
has started running,

00:11:25.056 --> 00:11:26.436 A:middle
and when they have
stopped running.

00:11:26.436 --> 00:11:29.586 A:middle
We are ready to see
if they can use

00:11:29.586 --> 00:11:31.196 A:middle
that in a very contextual
manner.

00:11:31.926 --> 00:11:33.806 A:middle
As soon as they start
running, we are going

00:11:33.806 --> 00:11:36.316 A:middle
to get the resume
event in the app.

00:11:36.316 --> 00:11:40.556 A:middle
At this time you could make
a note of that exact time

00:11:40.556 --> 00:11:43.036 A:middle
when we got the resume
event, so that way at the end

00:11:43.036 --> 00:11:45.726 A:middle
of the workout, you can
basically add up all

00:11:45.726 --> 00:11:47.046 A:middle
of those running times

00:11:47.606 --> 00:11:51.446 A:middle
to compute very accurate
average pace for the entire run.

00:11:52.006 --> 00:11:53.996 A:middle
In this example, I'm
just going to make a note

00:11:53.996 --> 00:11:56.996 A:middle
of the most recent
elevation update,

00:11:56.996 --> 00:11:59.586 A:middle
so that I know exactly
what elevation they started

00:11:59.586 --> 00:12:00.436 A:middle
when they started running.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.586 --> 00:12:00.436 A:middle
when they started running.

00:12:01.876 --> 00:12:03.696 A:middle
And when the user
comes to a stop,

00:12:03.696 --> 00:12:05.806 A:middle
now this is a very
good opportunity for us

00:12:05.806 --> 00:12:08.566 A:middle
to figure out, because we
have elevation, we can figure

00:12:08.566 --> 00:12:10.036 A:middle
out if they have run up a hill.

00:12:10.866 --> 00:12:11.966 A:middle
And if they have done so,

00:12:11.966 --> 00:12:13.836 A:middle
this might be their
first ever hill run.

00:12:13.836 --> 00:12:16.606 A:middle
So why not just give them
a hill bagging achievement.

00:12:17.366 --> 00:12:20.256 A:middle
Or if they have been doing that
same hill run multiple times,

00:12:20.256 --> 00:12:24.436 A:middle
because we have exact, accurate
timings for each of those runs,

00:12:24.756 --> 00:12:27.586 A:middle
now we can compare those
and give them a stat

00:12:27.586 --> 00:12:29.756 A:middle
of how well they are doing
on that particular hill run.

00:12:30.976 --> 00:12:35.286 A:middle
So that was an example where we
use pedometer events not only

00:12:35.286 --> 00:12:37.596 A:middle
to arrive as very
accurate metrics

00:12:37.596 --> 00:12:39.226 A:middle
and demarcate those
running segments.

00:12:39.226 --> 00:12:42.746 A:middle
But it's also an example
where you could use --

00:12:42.746 --> 00:12:45.026 A:middle
do something interesting
with those events.

00:12:46.496 --> 00:12:49.386 A:middle
At the end of the run, of
course you go ahead and pay

00:12:49.386 --> 00:12:53.106 A:middle
down the registrations and this
will also release any block

00:12:53.106 --> 00:12:55.116 A:middle
handlers that have been
captured in the framework.

00:12:56.916 --> 00:13:00.846 A:middle
Pedometer events are available
on iPhone 6s and later iPhones,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:56.916 --> 00:13:00.846 A:middle
Pedometer events are available
on iPhone 6s and later iPhones,

00:13:00.946 --> 00:13:02.346 A:middle
and of course the Apple Watch.

00:13:03.186 --> 00:13:07.296 A:middle
So that's pedometer in
iOS 10 and watchOS 3.

00:13:08.556 --> 00:13:10.226 A:middle
Next, let's talk
about Device Motion.

00:13:12.676 --> 00:13:16.086 A:middle
As you're all aware,
Device Motion APIs have been

00:13:16.086 --> 00:13:18.146 A:middle
on the iPhone since iOS 5.

00:13:18.976 --> 00:13:22.166 A:middle
With watchOS 3, now we are
bringing the exact same APIs

00:13:22.366 --> 00:13:23.786 A:middle
to the Apple Watch.

00:13:26.176 --> 00:13:30.126 A:middle
With the Apple Watch, we have
a very capable sensor package

00:13:30.126 --> 00:13:32.396 A:middle
that is at a fixed
location on our wrist

00:13:32.766 --> 00:13:34.386 A:middle
and we use it throughout
the day.

00:13:34.806 --> 00:13:37.686 A:middle
And because we use our
hands for almost everything

00:13:37.686 --> 00:13:41.096 A:middle
that we do throughout the day,
it's a really powerful tool

00:13:41.096 --> 00:13:43.016 A:middle
to observe all of
that user activity.

00:13:44.006 --> 00:13:46.876 A:middle
And what Device Motion does
is it takes the samples

00:13:46.876 --> 00:13:49.806 A:middle
from the accelerometer and
the gyroscope, and it fuses it

00:13:49.806 --> 00:13:53.396 A:middle
to give you a very clear picture
of all of that user activity,

00:13:53.526 --> 00:13:55.506 A:middle
and all of this right
on your wrist.

00:13:57.086 --> 00:14:00.616 A:middle
All of that motion at wrist
is described by Device Motion,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:57.086 --> 00:14:00.616 A:middle
All of that motion at wrist
is described by Device Motion,

00:14:00.706 --> 00:14:04.446 A:middle
using four distinct
properties: Attitude, gravity,

00:14:04.766 --> 00:14:07.516 A:middle
rotation rate, and
user acceleration.

00:14:09.756 --> 00:14:14.276 A:middle
If you want to know in depth how
these properties are derived,

00:14:14.276 --> 00:14:16.816 A:middle
and how they behave, I
encourage you to go check

00:14:16.816 --> 00:14:19.636 A:middle
out these sessions
from 2011 and 2012.

00:14:20.716 --> 00:14:23.916 A:middle
In this talk though, I'll be
giving you a very brief overview

00:14:23.916 --> 00:14:27.246 A:middle
of this property so that we can
build some infusion and go look

00:14:27.246 --> 00:14:31.156 A:middle
at some examples of how you
can apply them in some health

00:14:31.156 --> 00:14:33.226 A:middle
and fitness apps in
interesting ways.

00:14:34.386 --> 00:14:36.396 A:middle
The first property is attitude.

00:14:37.746 --> 00:14:42.336 A:middle
Using attitude in your apps,
you can get an observation

00:14:42.386 --> 00:14:44.686 A:middle
of the orientation
of device and space.

00:14:44.956 --> 00:14:46.986 A:middle
And when you use CMDeviceMotion,

00:14:46.986 --> 00:14:49.796 A:middle
you get these three
representations of attitude.

00:14:50.576 --> 00:14:54.476 A:middle
As Quaternion, rotation
matrix, and as Euler angles.

00:14:55.486 --> 00:14:57.856 A:middle
Whenever you are using
attitude within your app,

00:14:57.856 --> 00:15:01.796 A:middle
one thing to note is every
single attitude observation is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.856 --> 00:15:01.796 A:middle
one thing to note is every
single attitude observation is

00:15:01.796 --> 00:15:04.856 A:middle
going to be relative to
a fixed reference frame.

00:15:06.056 --> 00:15:10.246 A:middle
What this means is every single
orientation observation is going

00:15:10.246 --> 00:15:11.756 A:middle
to be observed from a point

00:15:11.756 --> 00:15:13.606 A:middle
that is not fixed to
the device itself.

00:15:13.606 --> 00:15:17.106 A:middle
So the reference frame remains
static while the device can move

00:15:17.106 --> 00:15:19.466 A:middle
around, and that's
how you observe

00:15:19.466 --> 00:15:20.996 A:middle
orientation-using attitude.

00:15:21.486 --> 00:15:26.286 A:middle
And furthermore, when
your app registers

00:15:26.356 --> 00:15:27.876 A:middle
to start receiving the updates,

00:15:28.006 --> 00:15:30.976 A:middle
that is when the
reference frame is set.

00:15:30.976 --> 00:15:33.436 A:middle
And so every subsequent
sample that you receive

00:15:33.486 --> 00:15:36.356 A:middle
within your app is going
to be computed using

00:15:36.646 --> 00:15:39.296 A:middle
that relative reference
frame that was set

00:15:39.296 --> 00:15:40.496 A:middle
at the start of updates.

00:15:40.856 --> 00:15:43.836 A:middle
So this is something that
you need to kind of be aware

00:15:43.836 --> 00:15:46.226 A:middle
of when you use attitude
in your apps.

00:15:46.656 --> 00:15:48.986 A:middle
And so that you don't
make assumptions

00:15:49.026 --> 00:15:52.546 A:middle
about where the device is
oriented in absolute space.

00:15:53.926 --> 00:15:56.076 A:middle
The next property is gravity.

00:15:57.436 --> 00:16:00.656 A:middle
Gravity is -- well,
it's gravity.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.436 --> 00:16:00.656 A:middle
Gravity is -- well,
it's gravity.

00:16:00.656 --> 00:16:02.426 A:middle
It is the force that
is pulling us all

00:16:02.426 --> 00:16:04.496 A:middle
down to the center of the Earth.

00:16:04.496 --> 00:16:06.786 A:middle
And within Device
Motion, it is represented

00:16:06.786 --> 00:16:08.716 A:middle
as a unit vector in
the device frame.

00:16:09.766 --> 00:16:13.436 A:middle
Using gravity, you
can observe the tip

00:16:14.186 --> 00:16:15.796 A:middle
and the tilt of the device.

00:16:17.106 --> 00:16:18.086 A:middle
But you might be wondering,

00:16:18.086 --> 00:16:20.786 A:middle
isn't different tilt also the
orientation just like attitude?

00:16:21.116 --> 00:16:24.276 A:middle
But one key difference is,
now you're observing all

00:16:24.276 --> 00:16:26.846 A:middle
of this orientation
from the device frame.

00:16:27.186 --> 00:16:29.146 A:middle
So take for example, if I were

00:16:29.146 --> 00:16:31.436 A:middle
to hold my hand perfectly
parallel to the ground

00:16:31.436 --> 00:16:35.536 A:middle
to my side, and then I move it
to my front, you won't be able

00:16:35.536 --> 00:16:36.816 A:middle
to observe this using gravity.

00:16:36.816 --> 00:16:39.336 A:middle
Because the x, y, z
components of gravity are going

00:16:39.336 --> 00:16:42.136 A:middle
to remain exactly same
between these two orientations.

00:16:42.136 --> 00:16:45.526 A:middle
To observe something like this,
you need a point of observation

00:16:45.526 --> 00:16:49.416 A:middle
that is external or fixed
while the device is moving.

00:16:49.416 --> 00:16:50.586 A:middle
Which is basically attitude.

00:16:50.586 --> 00:16:53.876 A:middle
So you could use gravity
to observe orientation,

00:16:53.876 --> 00:16:55.776 A:middle
but only in a limited form.

00:16:56.166 --> 00:16:59.096 A:middle
But it might work just
good for the kind of app

00:16:59.096 --> 00:17:01.476 A:middle
that you are thinking of.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.096 --> 00:17:01.476 A:middle
that you are thinking of.

00:17:01.656 --> 00:17:03.596 A:middle
One other thing about gravity is

00:17:03.596 --> 00:17:05.766 A:middle
when you hold the
device perfectly still,

00:17:05.876 --> 00:17:08.036 A:middle
you can observe it
using the accelerometer.

00:17:08.036 --> 00:17:09.636 A:middle
It's a constant acceleration

00:17:09.636 --> 00:17:11.106 A:middle
that the accelerometer
will pick up,

00:17:11.566 --> 00:17:14.516 A:middle
and you can read it right
out of accelerometer.

00:17:15.215 --> 00:17:17.945 A:middle
But as soon as you
start moving the device,

00:17:17.945 --> 00:17:19.406 A:middle
now the accelerometer is picking

00:17:19.406 --> 00:17:21.866 A:middle
up not just the gravity
component, but it's also picking

00:17:21.866 --> 00:17:24.276 A:middle
up all of the user-generated
motion.

00:17:24.736 --> 00:17:26.195 A:middle
So it becomes harder and harder

00:17:26.296 --> 00:17:27.955 A:middle
to just get the gravity
component.

00:17:28.626 --> 00:17:31.686 A:middle
What Device Motion does, is
by using sense of fusion,

00:17:31.786 --> 00:17:33.436 A:middle
we switch over to the gyroscope

00:17:33.596 --> 00:17:40.346 A:middle
to start tracking the
gravity unit vector.

00:17:40.346 --> 00:17:42.886 A:middle
Next property is rotation rate.

00:17:43.546 --> 00:17:45.436 A:middle
As the name suggests,
it's the rate

00:17:45.436 --> 00:17:47.216 A:middle
of change of angular motion.

00:17:47.726 --> 00:17:50.716 A:middle
It's very good for observing
something like wrist rotation.

00:17:50.716 --> 00:17:52.486 A:middle
When you are rotating
your wrist,

00:17:52.486 --> 00:17:55.266 A:middle
there is a rotational motion
around the x-axis of the device,

00:17:55.266 --> 00:17:57.586 A:middle
and you can observe that
using rotation rate.

00:17:58.346 --> 00:18:01.216 A:middle
You can also observe any
rotation around the body.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.346 --> 00:18:01.216 A:middle
You can also observe any
rotation around the body.

00:18:01.506 --> 00:18:05.626 A:middle
Because most of us, we fix
our torso and we move our arms

00:18:05.766 --> 00:18:08.946 A:middle
so there is going to be some
kind of an arcing motion.

00:18:08.946 --> 00:18:13.086 A:middle
So there is rotation and you can
observe it using the rotation

00:18:13.086 --> 00:18:14.706 A:middle
rate property of Device Motion.

00:18:17.176 --> 00:18:20.036 A:middle
The last of the properties
is user acceleration.

00:18:20.036 --> 00:18:22.476 A:middle
And the user acceleration
that you get

00:18:22.476 --> 00:18:24.776 A:middle
through Device Motion is
compensated for gravity.

00:18:25.286 --> 00:18:28.096 A:middle
Recall how I mentioned
that accelerometer picks

00:18:28.096 --> 00:18:29.486 A:middle
up both the gravity component

00:18:29.486 --> 00:18:30.976 A:middle
and the user-generated
component.

00:18:31.056 --> 00:18:33.276 A:middle
So this is just the
user-generated component.

00:18:33.746 --> 00:18:36.006 A:middle
But it has been compensated
with gravity

00:18:36.006 --> 00:18:39.626 A:middle
that was derived using
device sensor fusion.

00:18:40.106 --> 00:18:44.496 A:middle
So that was a very quick
overview of these properties.

00:18:44.756 --> 00:18:46.936 A:middle
Now let's take a look
at a few examples

00:18:46.936 --> 00:18:48.836 A:middle
of how you can use
them in your apps.

00:18:49.366 --> 00:18:52.856 A:middle
The first property is attitude.

00:18:53.206 --> 00:18:55.176 A:middle
Attitude is very good

00:18:55.176 --> 00:18:57.756 A:middle
for observing any kind
of repetitive motion.

00:18:57.986 --> 00:18:59.606 A:middle
Like rep counting
in weightlifting.

00:18:59.606 --> 00:19:03.606 A:middle
So when you are lifting
weights, you are literally going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.606 --> 00:19:03.606 A:middle
So when you are lifting
weights, you are literally going

00:19:03.606 --> 00:19:05.686 A:middle
through a set of
orientation changes.

00:19:05.826 --> 00:19:10.066 A:middle
So just by looking at how
those orientation changes are

00:19:10.066 --> 00:19:12.076 A:middle
repeating, you can
count the reps.

00:19:12.366 --> 00:19:14.396 A:middle
And the best part about
using attitude for doing

00:19:14.396 --> 00:19:16.716 A:middle
that is now they might
be using a machine

00:19:16.716 --> 00:19:19.916 A:middle
where they're pulling
horizontally or from the top

00:19:19.916 --> 00:19:22.646 A:middle
and you can observe all of
those reps using attitude.

00:19:24.516 --> 00:19:26.796 A:middle
Gravity, as I already
mentioned, it's very good

00:19:26.876 --> 00:19:28.396 A:middle
for measuring tip and tilt.

00:19:28.936 --> 00:19:31.716 A:middle
Which basically means you
can use it in a yoga app.

00:19:32.506 --> 00:19:37.876 A:middle
So if they're doing a downward
dog or holding a warrior pose,

00:19:37.876 --> 00:19:40.736 A:middle
then you can figure out whether
-- how still they're holding it.

00:19:41.146 --> 00:19:43.976 A:middle
And when they're also going
from one pose to another,

00:19:43.976 --> 00:19:46.576 A:middle
you can figure out whether
they're really doing it

00:19:46.576 --> 00:19:49.066 A:middle
in a graceful way, or just
falling over themselves.

00:19:52.756 --> 00:19:57.336 A:middle
One of the most useful ways
of using rotation rate is

00:19:57.336 --> 00:19:59.646 A:middle
to observe the speed
of circular motion.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.016 --> 00:20:02.016 A:middle
Take, for example,
a batting cage.

00:20:02.056 --> 00:20:04.126 A:middle
So when you are swinging
the bat,

00:20:04.516 --> 00:20:06.926 A:middle
you're not only rotating
your arms around your body,

00:20:06.926 --> 00:20:08.836 A:middle
but there is also the
rotation around wrist.

00:20:09.216 --> 00:20:12.246 A:middle
So you could use both of those
components of rotation rate

00:20:12.246 --> 00:20:13.946 A:middle
to estimate the bat speed.

00:20:14.266 --> 00:20:17.146 A:middle
Of course you'll need to
know how long of a bat it is,

00:20:17.146 --> 00:20:19.876 A:middle
and at what point on the bat
you want to measure the speed.

00:20:22.506 --> 00:20:24.756 A:middle
User acceleration is best used

00:20:24.756 --> 00:20:26.376 A:middle
when there is some
abrupt motion.

00:20:26.786 --> 00:20:30.116 A:middle
Because accelerometer
picks up all of the motion

00:20:30.116 --> 00:20:34.016 A:middle
that the user is doing, if
you try to do some kind of app

00:20:34.066 --> 00:20:35.616 A:middle
where you're using
user acceleration

00:20:35.616 --> 00:20:37.036 A:middle
to measure some small movements,

00:20:37.036 --> 00:20:38.916 A:middle
it might get drowned
out by noise.

00:20:39.296 --> 00:20:42.796 A:middle
So wherever there is a very
abrupt motion is the best place

00:20:42.796 --> 00:20:44.166 A:middle
to use user acceleration.

00:20:44.526 --> 00:20:46.266 A:middle
So something like
a punch and recoil.

00:20:46.266 --> 00:20:49.716 A:middle
You can tell how much
pain they're inflicting

00:20:49.966 --> 00:20:52.786 A:middle
on that sandbag,
or that opponent

00:20:52.786 --> 00:20:54.246 A:middle
that is hopefully
made out of air.

00:20:56.536 --> 00:21:00.006 A:middle
So those were only a
very few set of examples


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:56.536 --> 00:21:00.006 A:middle
So those were only a
very few set of examples

00:21:00.006 --> 00:21:02.586 A:middle
of how you can use Device
Motion within your apps.

00:21:03.236 --> 00:21:04.886 A:middle
By -- after going through this,

00:21:04.886 --> 00:21:06.796 A:middle
if you feel that
you have an app idea

00:21:06.796 --> 00:21:09.456 A:middle
that could use Device Motion
and you want to find out more

00:21:09.456 --> 00:21:12.436 A:middle
about how you can apply
Device Motion, please do stop

00:21:12.436 --> 00:21:14.626 A:middle
by our lab tomorrow,
and we would be more

00:21:14.626 --> 00:21:16.566 A:middle
than happy to help you.

00:21:16.566 --> 00:21:20.476 A:middle
Now let's take a look
at that API itself.

00:21:20.476 --> 00:21:21.676 A:middle
You have the four properties.

00:21:22.056 --> 00:21:24.226 A:middle
Attitude and gravity,
they're unitlness.

00:21:24.226 --> 00:21:25.316 A:middle
Gravity's the uniflector.

00:21:26.076 --> 00:21:29.526 A:middle
User acceleration is in
G's and rotation rate is

00:21:29.526 --> 00:21:30.756 A:middle
in radians per second.

00:21:32.716 --> 00:21:35.696 A:middle
Before you can start
receiving Device Motion updates

00:21:35.696 --> 00:21:38.296 A:middle
within your app, you have
to set their sample rate.

00:21:38.946 --> 00:21:41.366 A:middle
You can set sample
rates up to 100 hertz.

00:21:41.786 --> 00:21:44.336 A:middle
And once you have set that
sample rate, you can go ahead

00:21:44.336 --> 00:21:47.596 A:middle
and register for updates
using the startup date method.

00:21:48.856 --> 00:21:51.306 A:middle
From this point onwards,
you can either choose

00:21:51.306 --> 00:21:53.746 A:middle
to poll the Device Motion
property periodically

00:21:53.746 --> 00:21:55.536 A:middle
to receive the most
recent sample.

00:21:56.086 --> 00:21:58.156 A:middle
Or you could provide
a callback handler

00:21:58.186 --> 00:22:01.256 A:middle
on which you can get every
single update the Device Motion


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.186 --> 00:22:01.256 A:middle
on which you can get every
single update the Device Motion

00:22:01.256 --> 00:22:02.276 A:middle
is generating for you.

00:22:02.796 --> 00:22:06.556 A:middle
And of course, once you
are done with the --

00:22:06.556 --> 00:22:08.766 A:middle
listening to the Device Motion
updates, you can go ahead

00:22:08.766 --> 00:22:12.026 A:middle
and deregister using the
stopDeviceMotionUpdates.

00:22:13.296 --> 00:22:15.986 A:middle
That brings me to the end
of my section of the talk.

00:22:16.216 --> 00:22:19.106 A:middle
Now I'll be handing it forward
to Paul, who will be walking you

00:22:19.106 --> 00:22:21.776 A:middle
through an example
app on the Apple Watch

00:22:21.896 --> 00:22:24.236 A:middle
that uses Device Motion
in an interesting manner.

00:22:24.756 --> 00:22:25.526 A:middle
Thank you very much.

00:22:25.526 --> 00:22:25.976 A:middle
Over to you Paul.

00:22:26.516 --> 00:22:33.576 A:middle
[ Applause ]

00:22:34.076 --> 00:22:36.176 A:middle
&gt;&gt; Thank you Bharath.

00:22:36.296 --> 00:22:36.806 A:middle
Hello everyone.

00:22:37.776 --> 00:22:38.766 A:middle
My name is Paul Thompson,

00:22:39.046 --> 00:22:40.146 A:middle
and I'm an engineer
with Core Motion.

00:22:41.576 --> 00:22:42.896 A:middle
So Bharath just talked
about what's new

00:22:42.896 --> 00:22:43.786 A:middle
with Core Motion APIs.

00:22:44.626 --> 00:22:47.446 A:middle
What I'd like to do is show
you how to use one of them

00:22:47.446 --> 00:22:50.246 A:middle
in an Apple Watch fitness app.

00:22:50.516 --> 00:22:52.206 A:middle
So in this app, what we'd

00:22:52.206 --> 00:22:54.196 A:middle
like to do is create a
tennis workout session.

00:22:54.676 --> 00:22:56.146 A:middle
Then we'll do -- we'll subscribe

00:22:56.146 --> 00:22:58.106 A:middle
to sensor updates
with Device Motion.

00:22:59.286 --> 00:23:02.336 A:middle
Finally, we'll detect
swings and differentiate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.286 --> 00:23:02.336 A:middle
Finally, we'll detect
swings and differentiate

00:23:02.336 --> 00:23:04.206 A:middle
between a forehand
and a backhand swing.

00:23:04.206 --> 00:23:09.196 A:middle
Now to do this, what we'll need
to do is leverage capabilities

00:23:09.196 --> 00:23:11.006 A:middle
from Core Motion, as well

00:23:11.006 --> 00:23:14.486 A:middle
as some new capabilities
from HealthKit.

00:23:14.576 --> 00:23:18.746 A:middle
Now as you may remember,
watchOS 2 apps strongly relied

00:23:18.746 --> 00:23:21.356 A:middle
on HealthKit and Core Motion
to do real-time analysis

00:23:21.356 --> 00:23:23.646 A:middle
and sensor output and
provide you with values

00:23:23.646 --> 00:23:29.126 A:middle
such as step count, flights,
distance, and calorie estimates.

00:23:29.126 --> 00:23:32.806 A:middle
Now, during a workout session,
your app can do limited work

00:23:33.536 --> 00:23:36.766 A:middle
and process Device Motion
samples while the user's not

00:23:36.766 --> 00:23:38.366 A:middle
directly engaged in your app.

00:23:40.036 --> 00:23:43.346 A:middle
But of course, this ability
comes with some caveats.

00:23:44.516 --> 00:23:47.176 A:middle
To begin with, you must have
enabled this new HealthKit

00:23:47.176 --> 00:23:48.986 A:middle
entitlement in your
Xcode project.

00:23:50.476 --> 00:23:54.446 A:middle
Further, this background work
can only be done during an

00:23:54.446 --> 00:23:55.396 A:middle
active workout session.

00:23:55.856 --> 00:24:00.836 A:middle
And in addition,
while backgrounded,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:55.856 --> 00:24:00.836 A:middle
And in addition,
while backgrounded,

00:24:00.836 --> 00:24:03.126 A:middle
you must minimize
your CPU usage.

00:24:04.176 --> 00:24:05.876 A:middle
If you do not minimize
your CPU usage,

00:24:06.186 --> 00:24:07.266 A:middle
your app will be suspended

00:24:07.646 --> 00:24:13.236 A:middle
until the user explicitly
foregrounds it again.

00:24:13.456 --> 00:24:15.406 A:middle
Now since this background
capability is being provided

00:24:15.406 --> 00:24:18.356 A:middle
by HealthKit, I encourage you
to view the earlier session

00:24:18.356 --> 00:24:22.116 A:middle
to learn more in
detail about this.

00:24:22.346 --> 00:24:24.096 A:middle
With that in mind, let's think

00:24:24.096 --> 00:24:25.166 A:middle
about what our app
might look like.

00:24:26.626 --> 00:24:29.646 A:middle
Well with app, you would
expect you and a friend to out

00:24:29.646 --> 00:24:31.276 A:middle
to the tennis courts
with your Apple Watches,

00:24:31.436 --> 00:24:32.696 A:middle
and practicing volleying
for a bit.

00:24:33.996 --> 00:24:35.596 A:middle
There, you simply
start a quick workout,

00:24:36.036 --> 00:24:37.866 A:middle
and hit the ball back and forth.

00:24:39.436 --> 00:24:43.226 A:middle
Then, you'd expect that at any
time you take a quick glance

00:24:43.226 --> 00:24:44.966 A:middle
at your watch, and get some
media feedback on the play.

00:24:53.436 --> 00:24:54.196 A:middle
So with that in mind,

00:24:54.866 --> 00:24:56.216 A:middle
let's think about the
structure of our project.

00:24:57.196 --> 00:24:59.296 A:middle
Here, there'll be three layers
that we want to care about.

00:24:59.756 --> 00:25:03.216 A:middle
First is the UI, where
we'll ultimately present


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.756 --> 00:25:03.216 A:middle
First is the UI, where
we'll ultimately present

00:25:03.216 --> 00:25:05.596 A:middle
to the user what we've done.

00:25:05.826 --> 00:25:08.036 A:middle
Then, we'll have
our workout manager.

00:25:08.896 --> 00:25:11.916 A:middle
We'll interact with
HealthKit and start

00:25:11.916 --> 00:25:13.326 A:middle
and stop our workout sessions

00:25:13.666 --> 00:25:15.066 A:middle
and enable our background
inability.

00:25:17.016 --> 00:25:19.646 A:middle
Then we'll enable our -- then
we'll have our motion manager.

00:25:20.236 --> 00:25:23.386 A:middle
Here we'll interact with
Core Motion directly,

00:25:23.426 --> 00:25:25.676 A:middle
and implement our
detection algorithm.

00:25:27.136 --> 00:25:29.646 A:middle
There we'll respond to 50
hertz Device Motion updates,

00:25:29.976 --> 00:25:31.746 A:middle
and add the resulting
samples to a running buffer.

00:25:33.176 --> 00:25:34.786 A:middle
Afterwards, on every update,

00:25:35.416 --> 00:25:37.516 A:middle
we'll assess whether a
swing occurred, and if so,

00:25:37.636 --> 00:25:38.356 A:middle
we'll implement the UI.

00:25:43.116 --> 00:25:45.476 A:middle
So how do we want to -- how
do we want to model the swing

00:25:45.476 --> 00:25:48.406 A:middle
that we wish to detect?

00:25:48.486 --> 00:25:49.946 A:middle
Well, tennis is a
complicated sport.

00:25:50.716 --> 00:25:52.876 A:middle
So in this case, all
we'll do is we'll look

00:25:52.876 --> 00:25:54.476 A:middle
at the essence of two gestures.

00:25:55.186 --> 00:25:57.066 A:middle
A full forehand and
backhand swing.

00:25:58.326 --> 00:26:01.436 A:middle
We'll do this using the
gravity and rotation vectors


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.326 --> 00:26:01.436 A:middle
We'll do this using the
gravity and rotation vectors

00:26:01.436 --> 00:26:04.626 A:middle
as provided by Device Motion.

00:26:04.746 --> 00:26:08.266 A:middle
So if you expect the watch
to be in the dominant arm,

00:26:09.006 --> 00:26:10.626 A:middle
then you would expect
a full forehand swing

00:26:10.626 --> 00:26:14.416 A:middle
to include a simple
rotation about the user.

00:26:14.416 --> 00:26:18.136 A:middle
So if we take the dot
product of the rotation rate

00:26:18.136 --> 00:26:20.806 A:middle
from a potential swing with
the gravity unit vector,

00:26:21.576 --> 00:26:24.486 A:middle
we can isolate this movement
while ignoring the attitude

00:26:24.486 --> 00:26:25.146 A:middle
of the device.

00:26:25.716 --> 00:26:27.626 A:middle
And also ignoring some
extraneous movement.

00:26:29.576 --> 00:26:33.966 A:middle
Then, once we've got
enough samples of this,

00:26:34.386 --> 00:26:35.816 A:middle
we'll see if we've
rotated far enough

00:26:36.306 --> 00:26:40.806 A:middle
and fast enough to
count as a swing.

00:26:41.016 --> 00:26:41.946 A:middle
So now that we know what to do,

00:26:41.946 --> 00:26:44.266 A:middle
let's take a look
at our sample app.

00:26:46.176 --> 00:26:48.736 A:middle
To begin, we'll envision
our simple UI.

00:26:49.256 --> 00:26:54.166 A:middle
We'll display our
information to the user.

00:26:54.166 --> 00:26:56.896 A:middle
Here we'll have three watch kit
interface labels that we'll want

00:26:56.896 --> 00:26:57.736 A:middle
to update during runtime.

00:26:58.976 --> 00:27:00.836 A:middle
These will include
the workout label.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.976 --> 00:27:00.836 A:middle
These will include
the workout label.

00:27:01.726 --> 00:27:03.146 A:middle
The forehand count label.

00:27:03.276 --> 00:27:05.056 A:middle
And the backhand count label.

00:27:05.606 --> 00:27:08.016 A:middle
And what the workout label will
do, will simply tell a user

00:27:08.016 --> 00:27:10.376 A:middle
when we've started and
stopped the workout session.

00:27:11.276 --> 00:27:14.416 A:middle
And the forehand and backhand
count labels will simply show

00:27:14.616 --> 00:27:16.906 A:middle
how many times we've
detected the right movement.

00:27:18.136 --> 00:27:20.646 A:middle
Here we'll also have a
force touch menu to start

00:27:20.646 --> 00:27:21.786 A:middle
and stop the workout session.

00:27:25.616 --> 00:27:29.996 A:middle
So now that we know what the
UI will show, let's take a look

00:27:29.996 --> 00:27:30.856 A:middle
at our workout manager.

00:27:32.136 --> 00:27:36.046 A:middle
Here, we'll handle our
interactions with HealthKit,

00:27:36.046 --> 00:27:37.906 A:middle
as well as create
our workout session.

00:27:39.316 --> 00:27:42.336 A:middle
We'll also direct our motion
manager below to start

00:27:42.336 --> 00:27:43.536 A:middle
and stop sensor updates.

00:27:44.096 --> 00:27:50.816 A:middle
So here, in our workout manager,
we'll have to start a workout.

00:27:51.376 --> 00:27:55.136 A:middle
So to begin, we'll create
our workout configuration

00:27:55.386 --> 00:27:57.216 A:middle
which we'll use to initiate
the workout session.

00:27:57.686 --> 00:27:59.946 A:middle
Since we're creating
a tennis app,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.426 --> 00:28:02.006 A:middle
let's use tennis as
the activity type.

00:28:02.606 --> 00:28:03.826 A:middle
And outdoors as the location.

00:28:05.236 --> 00:28:07.616 A:middle
Then, after initialization,

00:28:08.376 --> 00:28:11.386 A:middle
we'll have HealthKit start the
workout session and subscribe

00:28:11.386 --> 00:28:12.486 A:middle
to Device Motion updates.

00:28:13.556 --> 00:28:15.056 A:middle
At this point, we'll now be able

00:28:15.056 --> 00:28:16.796 A:middle
to do work while
the screen is off.

00:28:20.636 --> 00:28:23.016 A:middle
In addition, we'll also
need to stop our workout.

00:28:24.316 --> 00:28:27.986 A:middle
Here, we'll simply do the
reverse motion and unsubscribe

00:28:27.986 --> 00:28:30.186 A:middle
from sensor updates,
and then tell HealthKit

00:28:30.186 --> 00:28:31.226 A:middle
to end the workout session.

00:28:32.046 --> 00:28:38.236 A:middle
At this point, normal
backgrounding rules will apply.

00:28:38.446 --> 00:28:40.776 A:middle
So now, let's take a look
at our motion manager.

00:28:41.326 --> 00:28:43.686 A:middle
He will interface with
Core Motion directly,

00:28:43.686 --> 00:28:44.936 A:middle
and implement our
detection algorithm.

00:28:50.156 --> 00:28:54.096 A:middle
So to begin, what we'll do
here is we'll create a link

00:28:54.186 --> 00:28:55.156 A:middle
to the CM motion manager.

00:28:55.686 --> 00:28:58.256 A:middle
As well as create an
NS operation queue for

00:28:58.256 --> 00:28:59.306 A:middle
or samples to do work on.

00:28:59.786 --> 00:29:03.206 A:middle
At this point, we'll
also ask if the watch is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.786 --> 00:29:03.206 A:middle
At this point, we'll
also ask if the watch is

00:29:03.206 --> 00:29:04.786 A:middle
on the left or the right wrist.

00:29:05.146 --> 00:29:06.946 A:middle
There's a difference
between the forehand

00:29:06.946 --> 00:29:09.326 A:middle
and the backhand swing
will depend entirely

00:29:09.326 --> 00:29:09.986 A:middle
on this perspective.

00:29:10.356 --> 00:29:16.056 A:middle
We'll also keep a local count of
a forehand and backhand swings,

00:29:16.786 --> 00:29:22.686 A:middle
as well as mark as whether
we've recently seen a swing.

00:29:22.826 --> 00:29:24.736 A:middle
We'll also choose 50
hertz as our sample rate.

00:29:25.346 --> 00:29:26.236 A:middle
And create a running buffer

00:29:26.236 --> 00:29:27.856 A:middle
that should hold no more
than a second's data.

00:29:27.856 --> 00:29:31.916 A:middle
Now as Bharath mentioned
earlier,

00:29:32.546 --> 00:29:34.286 A:middle
Device Motion samples
can be provided

00:29:34.286 --> 00:29:35.576 A:middle
at a rate up to 100 hertz.

00:29:36.196 --> 00:29:38.906 A:middle
While you generally want to pick
the sample rate that's as small

00:29:38.906 --> 00:29:40.716 A:middle
as you can get away with,
while also providing you

00:29:40.716 --> 00:29:42.406 A:middle
with fidelity that you need.

00:29:44.756 --> 00:29:48.346 A:middle
In addition, we'll set three
constants which we'll use

00:29:48.346 --> 00:29:49.236 A:middle
in our detection algorithm.

00:29:50.286 --> 00:29:52.916 A:middle
These will include the minimum
angle's [inaudible] swing,

00:29:53.026 --> 00:29:55.826 A:middle
the lower bound on the peak
speed through the swing,

00:29:56.986 --> 00:29:58.936 A:middle
and an upper bound on the
settling speed of the swing.

00:29:59.466 --> 00:30:03.456 A:middle
Now we chose these values
based on experimentation


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.466 --> 00:30:03.456 A:middle
Now we chose these values
based on experimentation

00:30:03.456 --> 00:30:04.646 A:middle
and sample data that
we collected.

00:30:05.596 --> 00:30:08.186 A:middle
But generally, you'll find
that the process of collecting

00:30:08.186 --> 00:30:12.486 A:middle
and picking these values will
be half the battle of your app.

00:30:12.726 --> 00:30:15.246 A:middle
Finally, we'll create this
delegate reference here,

00:30:15.386 --> 00:30:20.776 A:middle
which we'll use to
communicate back to the UI.

00:30:21.026 --> 00:30:23.536 A:middle
So now, after we set
all of our properties,

00:30:24.186 --> 00:30:27.196 A:middle
we'll adjust the operation queue
to reflect as a serial queue

00:30:27.636 --> 00:30:29.946 A:middle
that we'll use to handle all
of our Device Motion samples.

00:30:31.266 --> 00:30:33.816 A:middle
I'd like to emphasize
here, that we chose --

00:30:34.036 --> 00:30:36.736 A:middle
we created this operation
queue to ensure that all

00:30:36.736 --> 00:30:38.956 A:middle
of our data processing
happens off of the main queue.

00:30:39.556 --> 00:30:44.806 A:middle
So now we'll also create
this function which we'll use

00:30:44.806 --> 00:30:46.366 A:middle
to reset all the
statement class,

00:30:46.786 --> 00:30:50.916 A:middle
as well as zero out the UI.

00:30:50.916 --> 00:30:53.676 A:middle
And then, as a final set
of convenience methods,

00:30:54.336 --> 00:30:56.946 A:middle
we'll create some complementary
update delegate functions.

00:30:58.336 --> 00:31:01.346 A:middle
Here, we'll simply implement
our count of the swing,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.336 --> 00:31:01.346 A:middle
Here, we'll simply implement
our count of the swing,

00:31:02.226 --> 00:31:03.636 A:middle
mark that we've recently
seen a swing,

00:31:03.636 --> 00:31:06.066 A:middle
and then let the UI know it.

00:31:09.536 --> 00:31:12.596 A:middle
So let's start interfacing
with Core Motion.

00:31:14.056 --> 00:31:17.956 A:middle
So as always, the first thing
we should do is ask whether the

00:31:17.956 --> 00:31:20.386 A:middle
API's supported on the
device we're running on.

00:31:21.556 --> 00:31:25.756 A:middle
Then, we'll tell Core Motion to
update us at a 50 hertz cadence.

00:31:26.456 --> 00:31:30.236 A:middle
And finally, we'll subscribe
to Device Motion updates

00:31:30.756 --> 00:31:33.456 A:middle
by passing our operation
queue, as well as a block

00:31:33.456 --> 00:31:36.366 A:middle
that we'll use to respond to all
incoming Device Motion samples.

00:31:37.756 --> 00:31:40.236 A:middle
All this block will do
is simply check to see

00:31:40.236 --> 00:31:43.086 A:middle
if there are any errors with
the update, then pass it along

00:31:43.086 --> 00:31:44.036 A:middle
to our detection function.

00:31:44.036 --> 00:31:50.876 A:middle
So let's take a look at what
our detection function's going

00:31:50.876 --> 00:31:51.796 A:middle
to do.

00:31:52.636 --> 00:31:54.106 A:middle
So as Bharath mentioned earlier,

00:31:54.516 --> 00:31:56.136 A:middle
Device Motion gives
us quite a few things.

00:31:56.796 --> 00:31:59.176 A:middle
But in this example, we're only
going to look at the gravity

00:31:59.306 --> 00:32:00.556 A:middle
and rotation rate vectors.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.306 --> 00:32:00.556 A:middle
and rotation rate vectors.

00:32:00.556 --> 00:32:03.336 A:middle
Now, as you may remember,

00:32:03.796 --> 00:32:06.166 A:middle
the gravity vector is simply
Core Motion's destination.

00:32:06.536 --> 00:32:07.556 A:middle
The gravity univector,

00:32:07.906 --> 00:32:09.416 A:middle
regardless of how much
the device has moved.

00:32:10.346 --> 00:32:12.966 A:middle
And the rotation rate is
simply a rotation vector

00:32:12.966 --> 00:32:16.826 A:middle
for the device, giving
us radians per second.

00:32:16.956 --> 00:32:21.356 A:middle
So now, what our [inaudible]
will do is we'll take the dot

00:32:21.356 --> 00:32:24.356 A:middle
product -- will take the dot
product of the rotation vector

00:32:24.396 --> 00:32:26.966 A:middle
from a potential swing
with a gravity univector.

00:32:27.676 --> 00:32:29.016 A:middle
So we only analyzed
the proportion

00:32:29.016 --> 00:32:29.966 A:middle
of motion about gravity.

00:32:31.736 --> 00:32:34.406 A:middle
Then, we'll add the
resulting scaler

00:32:34.486 --> 00:32:36.816 A:middle
to a running buffer holding
no more than a second's data.

00:32:37.326 --> 00:32:40.796 A:middle
Once we have enough
content, we begin to analyze

00:32:40.796 --> 00:32:44.196 A:middle
in the content within.

00:32:44.326 --> 00:32:46.666 A:middle
So the two metrics we'll use

00:32:46.666 --> 00:32:49.656 A:middle
to analyze the swing are the
accumulated angle of rotation

00:32:50.306 --> 00:32:51.426 A:middle
and the peak speed of the swing.

00:32:51.966 --> 00:32:56.876 A:middle
Here, to get the accumulating
rotation simply integrate all

00:32:56.876 --> 00:32:58.996 A:middle
the accumulated samples that
we've collected from rotation


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.026 --> 00:33:02.396 A:middle
over the second that
we've collected them.

00:33:02.396 --> 00:33:05.266 A:middle
Then you have peak rate, you
simply take a min or max,

00:33:05.596 --> 00:33:06.956 A:middle
depending on the
direction of rotation.

00:33:07.406 --> 00:33:12.886 A:middle
Further down our
function, we'll check to see

00:33:13.276 --> 00:33:17.696 A:middle
if we subtended far enough and
fast enough to count as a swing.

00:33:17.896 --> 00:33:22.026 A:middle
If so, we'll choose forehand or
backhand conveying the position

00:33:22.026 --> 00:33:24.266 A:middle
of the Apple Watch and
the sign of the scalers.

00:33:24.796 --> 00:33:31.386 A:middle
And finally, to end the
function, we'll add a check

00:33:31.386 --> 00:33:32.506 A:middle
to see that the swing
is settled.

00:33:33.416 --> 00:33:35.546 A:middle
This way we can reject
some of the recoil movement

00:33:35.756 --> 00:33:39.866 A:middle
as the user's arm moves back in
position for the next volley.

00:33:40.016 --> 00:33:42.116 A:middle
And finally, to finish
off the class,

00:33:42.526 --> 00:33:44.026 A:middle
we'll have the stopUpdates
function.

00:33:44.556 --> 00:33:46.996 A:middle
Which we'll use to unsubscribe
from DeviceMotionUpdates

00:33:47.336 --> 00:33:48.286 A:middle
when the workout has ended.

00:33:48.846 --> 00:33:54.136 A:middle
And that concludes the
basics of our sample app.

00:33:54.486 --> 00:33:56.426 A:middle
We simply described a
simple user interface.

00:33:57.186 --> 00:33:58.816 A:middle
We then created a
workout management.

00:33:59.136 --> 00:34:00.356 A:middle
Handle interfacing
with HealthKit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.136 --> 00:34:00.356 A:middle
Handle interfacing
with HealthKit.

00:34:00.356 --> 00:34:04.536 A:middle
And then we created our motion
manager to handle Core Motion,

00:34:04.536 --> 00:34:06.386 A:middle
as well as implement
our detection algorithm.

00:34:06.936 --> 00:34:10.966 A:middle
So I hope you all have
gotten a good feel for how

00:34:10.966 --> 00:34:13.666 A:middle
to use Device Motion as newly
brought to the Apple Watch.

00:34:17.596 --> 00:34:20.846 A:middle
So before I wrap up, I'd like
to emphasize a few details

00:34:20.846 --> 00:34:21.815 A:middle
on the use of this API.

00:34:22.556 --> 00:34:26.646 A:middle
So now while you may expect
the watch to be in a fixed

00:34:26.716 --> 00:34:29.446 A:middle
and predictable location,
always remember to check

00:34:29.696 --> 00:34:32.795 A:middle
which wrist the device
is on as this difference

00:34:32.795 --> 00:34:35.186 A:middle
of position can have significant
impact on your analysis.

00:34:35.706 --> 00:34:40.446 A:middle
Further, when using
inertial senses,

00:34:40.735 --> 00:34:41.686 A:middle
always try to remember --

00:34:42.406 --> 00:34:44.416 A:middle
try to understand what
the reference frame you're

00:34:44.416 --> 00:34:45.456 A:middle
operating in.

00:34:46.835 --> 00:34:50.815 A:middle
And further, as we said earlier,
Device Motion provides you

00:34:50.815 --> 00:34:52.706 A:middle
with samples at a
rate up to 100 hertz.

00:34:53.616 --> 00:34:54.976 A:middle
We always want to
strike a balance

00:34:55.436 --> 00:34:57.726 A:middle
between the resources required
to service your sample rate,

00:34:58.026 --> 00:35:00.066 A:middle
and the fidelity demanded
by your application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.026 --> 00:35:00.066 A:middle
and the fidelity demanded
by your application.

00:35:01.156 --> 00:35:02.286 A:middle
This is especially important,

00:35:02.636 --> 00:35:04.446 A:middle
given the restrictions
placed during backgrounding

00:35:04.516 --> 00:35:05.346 A:middle
of a workout session.

00:35:05.896 --> 00:35:11.746 A:middle
And so to summarize the talk
as a whole, we earlier talked

00:35:11.746 --> 00:35:13.096 A:middle
about the performance
improvements

00:35:13.096 --> 00:35:14.836 A:middle
to historical accelerometer.

00:35:15.436 --> 00:35:17.816 A:middle
Then we demonstrated how
you can use pedometer events

00:35:18.126 --> 00:35:20.446 A:middle
to precisely tag
segments, provide important,

00:35:20.446 --> 00:35:24.236 A:middle
contextual feedback to users,
and then we introduced you

00:35:24.236 --> 00:35:26.126 A:middle
to Device Motion
on the Apple Watch.

00:35:26.766 --> 00:35:28.546 A:middle
And walked you through
an app to detect forehand

00:35:28.596 --> 00:35:30.976 A:middle
and backhand swings
during a tennis workout.

00:35:32.956 --> 00:35:35.766 A:middle
So now if you'd like to
find out more information,

00:35:36.206 --> 00:35:37.846 A:middle
such as documentation
and sample code,

00:35:38.696 --> 00:35:40.166 A:middle
please check out this link.

00:35:42.356 --> 00:35:46.056 A:middle
And further, as you saw, this
app interacts with new features

00:35:46.056 --> 00:35:47.886 A:middle
from HealthKit so
I encourage you all

00:35:47.886 --> 00:35:49.956 A:middle
to view this HealthKit
session to learn more

00:35:49.956 --> 00:35:52.296 A:middle
in detail what's
new for watchOS 3.

00:35:53.276 --> 00:35:56.216 A:middle
In addition, Core Location has
some Best Practices for you

00:35:56.216 --> 00:35:58.456 A:middle
to review, and encourage you
to check them out as well.

00:35:59.016 --> 00:36:03.036 A:middle
And finally, I also recommend
checking out what else we have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.016 --> 00:36:03.036 A:middle
And finally, I also recommend
checking out what else we have

00:36:03.036 --> 00:36:04.546 A:middle
in store in watchOS 3.

00:36:05.776 --> 00:36:05.976 A:middle
Thank you.

00:36:06.516 --> 00:36:09.500 A:middle
[ Applause ]
