WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:21.516 --> 00:00:25.836 A:middle
[ Applause ]

00:00:26.336 --> 00:00:28.896 A:middle
&gt;&gt; Good morning everybody
and welcome to our session,

00:00:29.076 --> 00:00:30.386 A:middle
Introduction to Notifications.

00:00:30.956 --> 00:00:33.976 A:middle
I'm Kritarth Jain an engineer
on the iOS Notifications Team,

00:00:33.976 --> 00:00:36.176 A:middle
and today I'll be joined
by my colleague Julien

00:00:36.246 --> 00:00:37.596 A:middle
for the later half
of the session.

00:00:38.366 --> 00:00:40.206 A:middle
Now the team's been
working really hard

00:00:40.206 --> 00:00:43.206 A:middle
over the last one year to
give you guys a great release

00:00:43.206 --> 00:00:46.336 A:middle
for notifications for iOS
10 and we're really excited

00:00:46.496 --> 00:00:47.366 A:middle
to share it with you today.

00:00:47.996 --> 00:00:49.826 A:middle
We're going to start

00:00:49.826 --> 00:00:52.576 A:middle
out by doing an overview
of notifications.

00:00:53.526 --> 00:00:56.146 A:middle
And today we're existing
a brand new framework

00:00:56.216 --> 00:00:57.806 A:middle
for doing user notifications.

00:00:58.666 --> 00:01:01.386 A:middle
As part of this, we're
going to cover registration,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.666 --> 00:01:01.386 A:middle
As part of this, we're
going to cover registration,

00:01:02.056 --> 00:01:04.916 A:middle
content creation, scheduling
these notifications,

00:01:05.566 --> 00:01:08.816 A:middle
managing them, and action
handling on these notifications.

00:01:10.146 --> 00:01:11.436 A:middle
And lastly, we're going

00:01:11.436 --> 00:01:14.936 A:middle
to introduce a brand new feature
today called service extensions

00:01:15.426 --> 00:01:18.106 A:middle
that we think you're
really going to like.

00:01:18.336 --> 00:01:21.736 A:middle
But there's a lot more to cover
with notifications in iOS 10

00:01:22.036 --> 00:01:24.116 A:middle
and we're not going to get
to all of it in this session.

00:01:24.686 --> 00:01:26.756 A:middle
So there's going to be an
Advance Notification Session

00:01:26.756 --> 00:01:29.076 A:middle
following this one
right in this very room.

00:01:29.536 --> 00:01:30.656 A:middle
So do make sure to check it out.

00:01:32.106 --> 00:01:34.796 A:middle
So let's begin by talking
about user notifications.

00:01:35.796 --> 00:01:37.146 A:middle
Now I'm sure all
of you are familiar

00:01:37.146 --> 00:01:38.826 A:middle
with what a notification
looks like.

00:01:39.566 --> 00:01:42.566 A:middle
This is how your
application sends information

00:01:42.566 --> 00:01:45.306 A:middle
to your app users when your
app is not in the foreground.

00:01:46.476 --> 00:01:48.596 A:middle
It's a push mechanism
of sending information,

00:01:48.906 --> 00:01:52.916 A:middle
versus a pull mechanism where
your app user actively goes

00:01:52.916 --> 00:01:55.696 A:middle
to the application to get the
content or the information.

00:01:57.296 --> 00:01:59.916 A:middle
Now, you as app developers,
have different ways

00:01:59.916 --> 00:02:02.096 A:middle
in which you can send these
notifications to the user.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.916 --> 00:02:02.096 A:middle
in which you can send these
notifications to the user.

00:02:03.396 --> 00:02:06.376 A:middle
They can be visual alerts,
where the notification rolls

00:02:06.376 --> 00:02:07.426 A:middle
down from the top as a banner.

00:02:08.356 --> 00:02:10.536 A:middle
You can do sound and
vibration alerts associated

00:02:10.536 --> 00:02:13.606 A:middle
with your notifications as
well as badge the app icon.

00:02:13.936 --> 00:02:14.976 A:middle
So that the user knows

00:02:14.976 --> 00:02:18.906 A:middle
which application has
data available for them.

00:02:19.076 --> 00:02:20.826 A:middle
Depending upon the
user's context,

00:02:21.076 --> 00:02:23.266 A:middle
there're different ways how
they see that notification.

00:02:23.936 --> 00:02:26.696 A:middle
If the device is unlocked
the notification rolls

00:02:26.696 --> 00:02:27.896 A:middle
down from the top as a banner.

00:02:29.066 --> 00:02:31.706 A:middle
While the device is locked,
the notification comes right

00:02:31.706 --> 00:02:32.816 A:middle
on the user's lock screen.

00:02:32.816 --> 00:02:36.096 A:middle
And if the user ever
misses these notifications,

00:02:36.286 --> 00:02:38.216 A:middle
they can always go to
the Notification Center

00:02:38.216 --> 00:02:40.716 A:middle
and see all the pending
notifications waiting

00:02:40.716 --> 00:02:42.356 A:middle
for them there.

00:02:42.566 --> 00:02:45.356 A:middle
So what are the different
types of notifications that you

00:02:45.356 --> 00:02:48.466 A:middle
as app developers can use for
sending these notifications?

00:02:49.136 --> 00:02:50.376 A:middle
Mainly there are two types.

00:02:50.736 --> 00:02:53.036 A:middle
Local notifications and
remote notifications,

00:02:53.356 --> 00:02:55.006 A:middle
depending on their
source of origin.

00:02:55.566 --> 00:02:57.336 A:middle
So let's look at
these individually.

00:02:58.266 --> 00:03:01.226 A:middle
Now local notifications
are the ones that are used


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.266 --> 00:03:01.226 A:middle
Now local notifications
are the ones that are used

00:03:01.226 --> 00:03:03.136 A:middle
by applications that
are on the device.

00:03:04.356 --> 00:03:07.206 A:middle
Examples of local notifications
use time based triggers,

00:03:07.206 --> 00:03:08.386 A:middle
or location based triggers,

00:03:08.776 --> 00:03:11.006 A:middle
where your application
schedules this notification

00:03:11.146 --> 00:03:13.276 A:middle
with the system showing
the notification

00:03:13.276 --> 00:03:16.096 A:middle
to the user's device, and
when the user handles this

00:03:16.096 --> 00:03:18.656 A:middle
notification, your
application gets a callback.

00:03:20.066 --> 00:03:21.416 A:middle
As I mentioned, examples

00:03:21.416 --> 00:03:23.576 A:middle
of these can include
task reminder alerts,

00:03:23.976 --> 00:03:26.096 A:middle
calendar alerts, or
location based triggers.

00:03:27.456 --> 00:03:30.376 A:middle
Now, not all your
applications are contained

00:03:30.576 --> 00:03:31.626 A:middle
on the user's device.

00:03:32.196 --> 00:03:34.836 A:middle
A lot of them have a
server-side component as well,

00:03:35.076 --> 00:03:37.086 A:middle
where your server-side
application lives

00:03:37.516 --> 00:03:39.176 A:middle
across the network
on your servers.

00:03:39.986 --> 00:03:41.856 A:middle
So to facilitate notifications

00:03:41.856 --> 00:03:44.056 A:middle
for that we have
remote notifications.

00:03:44.656 --> 00:03:46.496 A:middle
Let's take a look at how
remote notifications work.

00:03:47.906 --> 00:03:51.016 A:middle
The main piece involved in
this exchange is the Apple Push

00:03:51.016 --> 00:03:53.326 A:middle
Notification Service,
or APNs for short.

00:03:54.456 --> 00:03:55.776 A:middle
It's part of remote
notifications.

00:03:56.556 --> 00:03:59.096 A:middle
Your remote site application
sends the notification payload

00:03:59.256 --> 00:04:02.506 A:middle
to APNs, which then does
a best-effort delivery


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.256 --> 00:04:02.506 A:middle
to APNs, which then does
a best-effort delivery

00:04:02.656 --> 00:04:05.456 A:middle
of this notification to the
user's device, showing them

00:04:05.456 --> 00:04:08.006 A:middle
that notification and then
forwarding your application

00:04:08.006 --> 00:04:11.306 A:middle
to be handled when the
user interacts with it.

00:04:11.566 --> 00:04:14.686 A:middle
Examples of remote notifications
can be news alerts,

00:04:14.726 --> 00:04:17.685 A:middle
where your server-side
application gets the latest

00:04:17.685 --> 00:04:20.866 A:middle
breaking news and then
forwards all these notifications

00:04:21.026 --> 00:04:23.456 A:middle
to the different devices
on all the clients

00:04:23.656 --> 00:04:26.496 A:middle
that have your application
installed on their device.

00:04:27.676 --> 00:04:30.246 A:middle
Instant messaging alerts as well
where the database is managed

00:04:30.246 --> 00:04:33.256 A:middle
on your servers, and when a new
message comes in you just pass

00:04:33.256 --> 00:04:37.216 A:middle
that notification along
to the user's device.

00:04:37.366 --> 00:04:40.956 A:middle
Now remote notifications in turn
have two different components,

00:04:41.276 --> 00:04:43.676 A:middle
they can be either
user-facing or silent updates.

00:04:44.286 --> 00:04:46.206 A:middle
Now user-facing notifications,

00:04:46.206 --> 00:04:48.646 A:middle
as the name suggests are
the ones that are displayed

00:04:48.646 --> 00:04:49.806 A:middle
to the user on the device.

00:04:50.446 --> 00:04:53.266 A:middle
And by setting up your
notification payload the right

00:04:53.266 --> 00:04:56.406 A:middle
way, you can add this content
to be shown to the user.

00:04:57.696 --> 00:04:59.536 A:middle
As opposed to user-facing
notifications,

00:04:59.926 --> 00:05:02.196 A:middle
we also offer silent
update notifications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.926 --> 00:05:02.196 A:middle
we also offer silent
update notifications.

00:05:04.216 --> 00:05:06.836 A:middle
Now, these silent
update notifications work

00:05:07.196 --> 00:05:10.306 A:middle
where your notification payload
includes the content available

00:05:10.306 --> 00:05:13.856 A:middle
flag when this notification
is received on the device,

00:05:14.116 --> 00:05:17.196 A:middle
the system knows to wake your
application up in the background

00:05:17.486 --> 00:05:19.046 A:middle
to perform a background
app refresh.

00:05:19.576 --> 00:05:22.956 A:middle
So then your client-side
application can go and talk

00:05:23.196 --> 00:05:24.946 A:middle
to your remote server
application

00:05:25.236 --> 00:05:27.236 A:middle
and get the latest
greatest content available

00:05:27.236 --> 00:05:29.846 A:middle
so that the next time your
application users come

00:05:29.846 --> 00:05:33.386 A:middle
to your device they see the
latest information available

00:05:33.386 --> 00:05:36.196 A:middle
to them giving them a
very good user experience.

00:05:38.436 --> 00:05:41.006 A:middle
So that was in a nutshell
the different notifications,

00:05:41.186 --> 00:05:43.196 A:middle
type of those notification
that you can use.

00:05:43.686 --> 00:05:46.356 A:middle
Now before we proceed,
let's do a quick overview

00:05:46.356 --> 00:05:47.366 A:middle
of the existing API

00:05:47.526 --> 00:05:51.226 A:middle
for notifications
that we have in iOS.

00:05:51.386 --> 00:05:55.016 A:middle
Now, you use UI application for
registering your application

00:05:55.426 --> 00:05:56.976 A:middle
and then scheduling
notifications

00:05:57.316 --> 00:05:58.526 A:middle
that your application
wants to send.

00:05:59.196 --> 00:06:01.996 A:middle
This is part of the UI kit
framework that I'm sure most


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.196 --> 00:06:01.996 A:middle
This is part of the UI kit
framework that I'm sure most

00:06:01.996 --> 00:06:02.706 A:middle
of you are familiar with.

00:06:03.706 --> 00:06:06.406 A:middle
However, there were some
issues with the existing API.

00:06:06.406 --> 00:06:09.846 A:middle
For example, there are
different callbacks for local

00:06:09.846 --> 00:06:11.576 A:middle
and remote notifications
which could lead

00:06:11.576 --> 00:06:13.476 A:middle
to the duplication of code.

00:06:14.716 --> 00:06:16.376 A:middle
There's also limited control.

00:06:16.376 --> 00:06:19.266 A:middle
After your application has
already sent the notification

00:06:19.366 --> 00:06:22.996 A:middle
to the user and there's
different support

00:06:23.236 --> 00:06:25.596 A:middle
for notifications across
the multiple platforms

00:06:25.596 --> 00:06:27.986 A:middle
that Apple supports today.

00:06:28.176 --> 00:06:31.166 A:middle
So we really wanted to
address these issues, and more,

00:06:31.166 --> 00:06:34.706 A:middle
and on top of that give you
guys some great new features

00:06:35.066 --> 00:06:37.486 A:middle
for really elevating the
notification experience

00:06:37.526 --> 00:06:38.326 A:middle
for your app users.

00:06:38.326 --> 00:06:42.736 A:middle
So today we're really excited to
announce a brand new framework

00:06:42.796 --> 00:06:44.346 A:middle
for doing user notifications.

00:06:45.376 --> 00:06:47.706 A:middle
Let's take a look at what's
this new framework includes.

00:06:48.696 --> 00:06:52.736 A:middle
To start out, it has a very
familiar API with feature parity

00:06:52.856 --> 00:06:53.816 A:middle
with what exists today.

00:06:54.416 --> 00:06:56.746 A:middle
So transferring your code
from the existing API

00:06:56.796 --> 00:07:00.286 A:middle
to the new framework
will be very easy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:56.796 --> 00:07:00.286 A:middle
to the new framework
will be very easy.

00:07:00.436 --> 00:07:03.436 A:middle
We've also expanded the
content options that you can set

00:07:03.436 --> 00:07:06.496 A:middle
on the notifications for having
richer notifications sent

00:07:06.496 --> 00:07:07.496 A:middle
to your user.

00:07:08.336 --> 00:07:10.736 A:middle
We've combined the
code pack for local

00:07:10.736 --> 00:07:13.406 A:middle
and remote notification handling
so that you have lesser code

00:07:13.636 --> 00:07:14.846 A:middle
for handling the notifications.

00:07:15.516 --> 00:07:20.826 A:middle
[ Applause ]

00:07:21.326 --> 00:07:23.286 A:middle
We've also simplified
the delegate methods

00:07:23.656 --> 00:07:26.186 A:middle
that your application gets
now when the user interacts

00:07:26.186 --> 00:07:28.116 A:middle
with actions on these
notifications.

00:07:28.646 --> 00:07:32.396 A:middle
We've also included better
notification management.

00:07:32.836 --> 00:07:35.576 A:middle
What this means is that
your apps now have access

00:07:35.576 --> 00:07:37.806 A:middle
to notifications that are
either pending delivery

00:07:37.806 --> 00:07:41.266 A:middle
or already delivered to the
user, allowing you to remove

00:07:41.476 --> 00:07:43.026 A:middle
as well update notifications.

00:07:43.456 --> 00:07:45.746 A:middle
We'll take a look at all of this
in more detail in the session.

00:07:47.216 --> 00:07:50.496 A:middle
Starting in iOS 10 we now
allow your applications

00:07:50.616 --> 00:07:52.956 A:middle
to do in-app presentation
of notifications.

00:07:54.516 --> 00:07:56.546 A:middle
[ Applause ]

00:07:57.046 --> 00:08:00.476 A:middle
So now, your apps get the
exact same look and feel


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.046 --> 00:08:00.476 A:middle
So now, your apps get the
exact same look and feel

00:08:00.636 --> 00:08:03.196 A:middle
as the system supports
right in your applications.

00:08:06.076 --> 00:08:07.126 A:middle
You can now also schedule

00:08:07.126 --> 00:08:12.306 A:middle
and handle notifications
right to your extensions.

00:08:13.766 --> 00:08:15.746 A:middle
And lastly, we've
added extension points

00:08:15.946 --> 00:08:18.586 A:middle
to notifications themselves,
but more on that later.

00:08:20.216 --> 00:08:22.816 A:middle
So what this new
framework also allows us is

00:08:22.816 --> 00:08:26.486 A:middle
to have a single notifications
API across multiple platforms

00:08:26.486 --> 00:08:30.506 A:middle
that Apple supports, including
iOS, watchOS, and tvOS.

00:08:31.476 --> 00:08:33.905 A:middle
Let's take a look at what
this means individually

00:08:33.905 --> 00:08:35.116 A:middle
for all these different
platforms.

00:08:37.046 --> 00:08:40.316 A:middle
On iOS, we give the full
support for managing

00:08:40.316 --> 00:08:42.806 A:middle
and scheduling notification
that the new framework supports.

00:08:44.256 --> 00:08:46.746 A:middle
On watchOS, we continue
the existing support

00:08:46.746 --> 00:08:49.566 A:middle
of forwarding notifications
from the user's device

00:08:49.736 --> 00:08:52.856 A:middle
to their Watch, but
starting with watchOS 3,

00:08:52.856 --> 00:08:54.786 A:middle
we now let your WatchOS
applications

00:08:54.786 --> 00:08:57.446 A:middle
to do local notification
on the Watch itself.

00:08:58.216 --> 00:09:04.396 A:middle
What this means is that
your Watch does not have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.216 --> 00:09:04.396 A:middle
What this means is that
your Watch does not have

00:09:04.436 --> 00:09:05.586 A:middle
to be connected to your device,

00:09:05.586 --> 00:09:07.996 A:middle
and your applications can
still do notifications.

00:09:08.536 --> 00:09:12.076 A:middle
For example, you have the
workout application and the user

00:09:12.076 --> 00:09:14.356 A:middle
of your application
is out on a workout,

00:09:14.446 --> 00:09:15.976 A:middle
but forgot their device behind.

00:09:16.456 --> 00:09:18.266 A:middle
You can still send
them notifications

00:09:18.266 --> 00:09:19.646 A:middle
of when they meet
their workout goals

00:09:19.736 --> 00:09:22.246 A:middle
or when their workout time is
up right on the Watch itself.

00:09:22.996 --> 00:09:25.796 A:middle
For more information about
how to do notifications

00:09:25.796 --> 00:09:28.356 A:middle
on WatchOS we have a Quick
Interaction Techniques

00:09:28.356 --> 00:09:29.126 A:middle
for WatchOS session.

00:09:30.636 --> 00:09:35.476 A:middle
And continuing, for
tvOS, we now give support

00:09:35.806 --> 00:09:39.106 A:middle
to badging app icons for both
local and remote notifications.

00:09:39.106 --> 00:09:41.356 A:middle
This can be used
in different ways.

00:09:41.606 --> 00:09:43.786 A:middle
For example, if your
application wants

00:09:43.786 --> 00:09:46.646 A:middle
to let the user know the number
of unwatched episodes they have,

00:09:46.996 --> 00:09:49.036 A:middle
you can just badge the
app icon with that number.

00:09:49.756 --> 00:09:51.196 A:middle
Or for a turn by
turn based game,

00:09:51.586 --> 00:09:53.416 A:middle
if the user has a
pending user turn,

00:09:53.726 --> 00:09:55.496 A:middle
then badging the app
icon lets them know

00:09:55.786 --> 00:09:56.966 A:middle
that that's waiting for them.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:01.276 --> 00:10:03.726 A:middle
So that's in a nutshell summary

00:10:03.726 --> 00:10:05.286 A:middle
of what this new
framework allows you to do

00:10:05.576 --> 00:10:07.966 A:middle
on all these different
platforms that Apple has.

00:10:08.626 --> 00:10:14.116 A:middle
Let's continue and dive into
notification delivery on iOS.

00:10:14.676 --> 00:10:18.206 A:middle
How does your application
actually send this notification

00:10:18.406 --> 00:10:20.246 A:middle
to the user's device
for them to see it?

00:10:21.116 --> 00:10:24.256 A:middle
Well, even before you can
do this, the very first step

00:10:24.536 --> 00:10:27.096 A:middle
that your application needs
to do is registration.

00:10:27.806 --> 00:10:31.326 A:middle
Let's take a look at
what registration means.

00:10:31.486 --> 00:10:34.536 A:middle
Now notifications are an
interruption for the user.

00:10:34.646 --> 00:10:37.336 A:middle
So it's very important you
get the user's authorization

00:10:37.336 --> 00:10:39.996 A:middle
and permission before you
send them these notifications.

00:10:40.466 --> 00:10:44.246 A:middle
So you can ask them permission
for banners, sound alerts

00:10:44.246 --> 00:10:47.236 A:middle
or badging the app icon and the
very first time you do this the

00:10:47.236 --> 00:10:49.276 A:middle
user gets prompted
with this message.

00:10:49.986 --> 00:10:53.096 A:middle
You need to do this registration
for both local as well

00:10:53.096 --> 00:10:54.086 A:middle
as remote notification.

00:10:55.616 --> 00:10:58.796 A:middle
And performing this registration
in code is as simple

00:10:58.796 --> 00:11:00.456 A:middle
as calling request authorization


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.796 --> 00:11:00.456 A:middle
as calling request authorization

00:11:00.786 --> 00:11:03.586 A:middle
on the UN user notification
object associated

00:11:03.586 --> 00:11:06.236 A:middle
with your application,
passing it the right parameters

00:11:06.366 --> 00:11:07.816 A:middle
that you want registration for.

00:11:09.976 --> 00:11:11.826 A:middle
However, do note
that the settings

00:11:11.826 --> 00:11:13.746 A:middle
that the user might
approve right now are highly

00:11:13.746 --> 00:11:15.946 A:middle
configurable in the settings
menu per application.

00:11:16.536 --> 00:11:20.006 A:middle
So your application users can
always go back and turn these on

00:11:20.006 --> 00:11:21.566 A:middle
or off depending on
their preferences.

00:11:22.586 --> 00:11:24.906 A:middle
In iOS 10 we now
give you the ability

00:11:24.906 --> 00:11:27.516 A:middle
to access these user
settings in your application

00:11:27.516 --> 00:11:30.246 A:middle
so that you can be smarter about
the notifications that you want

00:11:30.246 --> 00:11:32.566 A:middle
to send to the user depending
upon their preferences.

00:11:33.476 --> 00:11:37.716 A:middle
[ Applause ]

00:11:38.216 --> 00:11:40.096 A:middle
But registration
doesn't end here.

00:11:40.336 --> 00:11:42.576 A:middle
For remote notifications,
there's another step

00:11:42.756 --> 00:11:43.776 A:middle
for token registration,

00:11:44.046 --> 00:11:47.136 A:middle
which uses the existing
API on UI application.

00:11:47.676 --> 00:11:49.706 A:middle
So you register for
remote notifications,

00:11:50.576 --> 00:11:53.796 A:middle
you need a network connection so
that the system can then go talk

00:11:53.796 --> 00:11:55.656 A:middle
to APNs for this registration

00:11:55.656 --> 00:11:57.176 A:middle
for your device and
your application.

00:11:58.316 --> 00:12:00.886 A:middle
This token gets returned to
your client-side application,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.316 --> 00:12:00.886 A:middle
This token gets returned to
your client-side application,

00:12:01.166 --> 00:12:02.316 A:middle
which then you need to forward

00:12:02.316 --> 00:12:03.676 A:middle
to your servicer-side
application.

00:12:04.406 --> 00:12:07.286 A:middle
Now this is important because
this token needs to be included

00:12:07.286 --> 00:12:09.096 A:middle
as part of the notification
payload

00:12:09.416 --> 00:12:11.466 A:middle
that your remote side
application is passing

00:12:11.466 --> 00:12:12.106 A:middle
through your APNs.

00:12:12.846 --> 00:12:16.556 A:middle
Because this token acts as the
key for identifying your device

00:12:16.726 --> 00:12:19.356 A:middle
and the application to which it
wants to send the notification.

00:12:21.316 --> 00:12:22.686 A:middle
So that was registration.

00:12:22.966 --> 00:12:24.476 A:middle
Now your application is ready

00:12:24.476 --> 00:12:26.516 A:middle
to start sending
notifications to the users.

00:12:26.946 --> 00:12:28.066 A:middle
So the first thing
that you need to do

00:12:28.066 --> 00:12:31.346 A:middle
after that is create the
content of that notification.

00:12:33.356 --> 00:12:36.276 A:middle
Now I'm sure all of you have
seen the brand new notification

00:12:36.276 --> 00:12:38.236 A:middle
looks that we've
introduced with iOS 10.

00:12:38.726 --> 00:12:41.516 A:middle
We're really excited about
what this allows you to do.

00:12:42.116 --> 00:12:45.346 A:middle
To start with, we now show the
title of your notifications

00:12:45.426 --> 00:12:46.946 A:middle
in all iOS notifications.

00:12:47.516 --> 00:12:51.286 A:middle
[ Applause ]

00:12:51.786 --> 00:12:53.936 A:middle
We've also included an
extra field for the subtitle

00:12:53.936 --> 00:12:55.656 A:middle
so you can have more
dexterity in the type

00:12:55.656 --> 00:12:57.306 A:middle
of information you're
sending to the user.

00:12:58.136 --> 00:13:00.196 A:middle
And of course, there's
the body of the content.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.136 --> 00:13:00.196 A:middle
And of course, there's
the body of the content.

00:13:01.116 --> 00:13:03.676 A:middle
Let's take a look at how
to set this up in code.

00:13:03.676 --> 00:13:08.866 A:middle
So it's as simple as creating
a UNmutableNotificationContent

00:13:08.866 --> 00:13:11.896 A:middle
object and setting the different
properties on it, that's it.

00:13:13.106 --> 00:13:15.346 A:middle
For remote notifications,
it's fairly similar.

00:13:15.836 --> 00:13:17.976 A:middle
Your notification payload
is structured as shown here,

00:13:17.976 --> 00:13:19.986 A:middle
and again you set the
different properties

00:13:19.986 --> 00:13:24.356 A:middle
of your payload before
sending it to APNs.

00:13:25.586 --> 00:13:27.056 A:middle
However, that's not
it for content,

00:13:27.316 --> 00:13:29.706 A:middle
we decided to go one step
further, and starting

00:13:29.706 --> 00:13:33.156 A:middle
in iOS 10 we now let all
applications do media

00:13:33.156 --> 00:13:34.936 A:middle
attachments right in
the notifications.

00:13:35.516 --> 00:13:39.546 A:middle
[ Applause ]

00:13:40.046 --> 00:13:41.476 A:middle
So now you can have much richer

00:13:41.696 --> 00:13:44.406 A:middle
and colorful notifications
that your users see.

00:13:45.256 --> 00:13:48.036 A:middle
For more on media attachments,
we'll be doing a walkthrough

00:13:48.036 --> 00:13:50.526 A:middle
on how to set these up in the
Advance Notifications Session.

00:13:52.416 --> 00:13:55.406 A:middle
So now that your content
is ready, the next thing

00:13:55.406 --> 00:13:57.666 A:middle
that your app needs to
determine is when it wants

00:13:57.666 --> 00:13:58.586 A:middle
to send the notification.

00:13:59.036 --> 00:14:00.706 A:middle
And for that there are triggers.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.036 --> 00:14:00.706 A:middle
And for that there are triggers.

00:14:02.276 --> 00:14:05.686 A:middle
In iOS 10 we support four
different triggers, mainly push,

00:14:06.016 --> 00:14:08.836 A:middle
timer interval, calendar,
and location based triggers.

00:14:10.156 --> 00:14:13.086 A:middle
Now the push trigger is
associated exclusively

00:14:13.146 --> 00:14:14.366 A:middle
with remote notifications

00:14:14.666 --> 00:14:16.446 A:middle
when your remote side
notification sends the

00:14:16.446 --> 00:14:19.846 A:middle
notification to APNs it
arrives on the device associated

00:14:19.846 --> 00:14:22.836 A:middle
with the push trigger, all the
other triggers are the ones

00:14:23.076 --> 00:14:24.796 A:middle
that are associated with
local notifications.

00:14:27.296 --> 00:14:30.286 A:middle
Now, time interval based
triggers lets you schedule a

00:14:30.286 --> 00:14:32.996 A:middle
notification at a certain time
interval starting from now.

00:14:33.506 --> 00:14:35.556 A:middle
For example, if you wanted
to send the notification

00:14:35.556 --> 00:14:36.496 A:middle
in two minutes from now,

00:14:36.956 --> 00:14:39.766 A:middle
or you want to send it every
hour starting from now.

00:14:40.616 --> 00:14:43.016 A:middle
This also lets you schedule
the notification immediately

00:14:43.016 --> 00:14:44.486 A:middle
by setting the time
interval to zero.

00:14:46.336 --> 00:14:48.596 A:middle
Now as opposed to time interval
based triggers there are

00:14:48.596 --> 00:14:51.556 A:middle
calendar triggers that
lets you set a notification

00:14:51.696 --> 00:14:53.846 A:middle
at a specific date and
time in the future.

00:14:53.936 --> 00:14:56.086 A:middle
So you have more
control of exactly

00:14:56.086 --> 00:14:57.266 A:middle
when the notification gets sent.

00:14:58.366 --> 00:15:01.126 A:middle
Example of this can be at a
certain time tomorrow morning


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.366 --> 00:15:01.126 A:middle
Example of this can be at a
certain time tomorrow morning

00:15:01.436 --> 00:15:06.206 A:middle
or repeating it on a certain day
of the week at a certain time.

00:15:06.376 --> 00:15:08.796 A:middle
And lastly in triggers, we
have location based triggers,

00:15:09.166 --> 00:15:12.556 A:middle
which uses your devices absolute
location, or its location

00:15:12.556 --> 00:15:15.736 A:middle
in relation to Bluetooth
beacons and determining

00:15:15.736 --> 00:15:16.706 A:middle
if your device is entering

00:15:16.706 --> 00:15:19.136 A:middle
or leaving the region you can
send notification to the user.

00:15:20.176 --> 00:15:23.266 A:middle
Examples of this is when the
user is leaving their home

00:15:23.266 --> 00:15:25.316 A:middle
and the device is
leaving that proximity,

00:15:25.736 --> 00:15:27.596 A:middle
or say that the user
is at a grocery store

00:15:27.626 --> 00:15:28.816 A:middle
and your application wants

00:15:28.816 --> 00:15:30.256 A:middle
to send them a coupon
for a discount.

00:15:31.756 --> 00:15:34.586 A:middle
So those are the different
triggers that we have as part

00:15:34.586 --> 00:15:35.336 A:middle
of this new framework.

00:15:36.266 --> 00:15:38.776 A:middle
Now that your content's ready
and you know when you want

00:15:38.776 --> 00:15:39.766 A:middle
to send the notification,

00:15:40.156 --> 00:15:42.756 A:middle
the next step left is
scheduling the notification

00:15:42.756 --> 00:15:43.436 A:middle
with the system.

00:15:44.896 --> 00:15:49.266 A:middle
For local notifications this is
as simple as calling addrequest

00:15:49.346 --> 00:15:51.366 A:middle
on the UUserNotificationCenter
object.

00:15:52.146 --> 00:15:54.546 A:middle
Which then on the trigger
the system then displays the

00:15:54.546 --> 00:15:55.686 A:middle
notification to the user.

00:15:57.136 --> 00:15:58.476 A:middle
And for remote notifications,

00:15:59.986 --> 00:16:03.196 A:middle
your service-side application
passes the payload to APNs,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.986 --> 00:16:03.196 A:middle
your service-side application
passes the payload to APNs,

00:16:03.576 --> 00:16:05.406 A:middle
which does a best effort
delivery sending the

00:16:05.406 --> 00:16:07.256 A:middle
notification to the
user's device.

00:16:08.536 --> 00:16:10.436 A:middle
So let's summarize this
whole delivery mechanism

00:16:10.496 --> 00:16:12.096 A:middle
that we've talked about so far.

00:16:13.056 --> 00:16:15.676 A:middle
Your application starts out by
registering with the system.

00:16:16.886 --> 00:16:20.426 A:middle
Then it creates the content,
determines when it wants

00:16:20.426 --> 00:16:21.476 A:middle
to send the notification

00:16:22.006 --> 00:16:23.556 A:middle
and finally schedules
the notification

00:16:23.556 --> 00:16:24.836 A:middle
with the system leading

00:16:24.836 --> 00:16:27.386 A:middle
to the notification getting
shown to the user's device.

00:16:27.516 --> 00:16:29.506 A:middle
It's as simple as that.

00:16:29.586 --> 00:16:31.306 A:middle
Let's take a look at
the summary in code.

00:16:32.496 --> 00:16:36.056 A:middle
Start out by doing registration,
by calling requestAuthorization,

00:16:37.136 --> 00:16:39.136 A:middle
you create the content
of that notification.

00:16:39.176 --> 00:16:43.536 A:middle
You create the trigger, in this
example a simple time interval

00:16:43.536 --> 00:16:46.736 A:middle
based trigger, and then
you package all of this

00:16:46.776 --> 00:16:49.496 A:middle
in a UNNotificationRequest
object,

00:16:49.736 --> 00:16:51.186 A:middle
passing a unique identifier,

00:16:51.736 --> 00:16:53.286 A:middle
which will be important
we will talk

00:16:53.286 --> 00:16:54.106 A:middle
about later in this session.

00:16:54.926 --> 00:16:57.546 A:middle
And then you schedule this
notification with the system,

00:16:58.306 --> 00:17:00.006 A:middle
completing the notification's
delivery.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.306 --> 00:17:00.006 A:middle
completing the notification's
delivery.

00:17:02.786 --> 00:17:04.646 A:middle
So, so far we've talked
about what happens

00:17:04.646 --> 00:17:07.215 A:middle
to a notification while your
app is in the background

00:17:07.376 --> 00:17:08.955 A:middle
and the user's not
interacting with it,

00:17:09.096 --> 00:17:11.236 A:middle
but what if your application
is in the foreground

00:17:11.276 --> 00:17:13.036 A:middle
when it receives a notification?

00:17:13.766 --> 00:17:15.455 A:middle
And for this we do offer support

00:17:15.626 --> 00:17:17.826 A:middle
for notification handling while
your app is in the foreground.

00:17:19.215 --> 00:17:20.016 A:middle
Your application needs

00:17:20.016 --> 00:17:22.165 A:middle
to implement the
UNUserNotificationCenter

00:17:22.165 --> 00:17:22.646 A:middle
delegate.

00:17:23.256 --> 00:17:25.616 A:middle
And it has a method of
willPresent notification,

00:17:25.976 --> 00:17:28.796 A:middle
which lets you get the
notification content as part

00:17:28.796 --> 00:17:32.076 A:middle
of the UNNotification object
passed with this method.

00:17:32.966 --> 00:17:34.956 A:middle
Now this method also
has a CompletionHandler,

00:17:35.076 --> 00:17:36.896 A:middle
which must be called at
the end of this function.

00:17:38.186 --> 00:17:40.556 A:middle
One thing to note is that
the CompletionHandler takes

00:17:40.726 --> 00:17:42.156 A:middle
presentation options parameters.

00:17:43.516 --> 00:17:46.086 A:middle
Now, what this enables you to
do is the in-app presentation

00:17:46.086 --> 00:17:47.106 A:middle
that we talked about earlier.

00:17:48.106 --> 00:17:50.456 A:middle
Let's see an example of how
you can configure it up.

00:17:51.526 --> 00:17:55.576 A:middle
So, say your application still
wants to show the user the view

00:17:55.816 --> 00:17:58.066 A:middle
as well as your sound alert
while your application is

00:17:58.066 --> 00:17:58.636 A:middle
in foreground.

00:17:58.916 --> 00:18:01.266 A:middle
So this is as simple as
calling the handler block


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.916 --> 00:18:01.266 A:middle
So this is as simple as
calling the handler block

00:18:01.356 --> 00:18:02.676 A:middle
with these different parameters.

00:18:03.416 --> 00:18:04.966 A:middle
And if you don't want
in-app presentation,

00:18:04.966 --> 00:18:06.376 A:middle
you just don't pass
any parameters.

00:18:07.396 --> 00:18:10.206 A:middle
So that was notification
handling while your application

00:18:10.206 --> 00:18:11.086 A:middle
is in foreground.

00:18:11.996 --> 00:18:14.876 A:middle
Let's move on and talk about
notification management.

00:18:15.766 --> 00:18:18.086 A:middle
Now notification management
is new with this framework

00:18:18.446 --> 00:18:22.496 A:middle
and what this allows you to do
is have access to notification

00:18:22.576 --> 00:18:24.006 A:middle
that are pending delivery

00:18:24.006 --> 00:18:27.236 A:middle
for your locally scheduled
notifications, as well as access

00:18:27.236 --> 00:18:28.396 A:middle
to delivered notification

00:18:28.696 --> 00:18:31.086 A:middle
that the user might
never see while local

00:18:31.086 --> 00:18:32.216 A:middle
or remove notifications.

00:18:32.886 --> 00:18:34.866 A:middle
Now you can also
remove notifications

00:18:34.866 --> 00:18:38.166 A:middle
that have already been sent
to the user, as well as update

00:18:38.166 --> 00:18:39.556 A:middle
and promote these notifications.

00:18:40.896 --> 00:18:42.056 A:middle
And important piece

00:18:42.056 --> 00:18:44.766 A:middle
of notification management
is the request identifier.

00:18:45.636 --> 00:18:49.686 A:middle
Now, in the summary you saw that
the request identifier is set

00:18:49.686 --> 00:18:51.226 A:middle
on the notification
of the request object.

00:18:51.766 --> 00:18:54.916 A:middle
And for remote notifications
there's a new request header the

00:18:54.916 --> 00:18:57.886 A:middle
APNs collapse id that you
need to set on your payload.

00:18:59.006 --> 00:19:01.286 A:middle
The system uses this
request identifier to know


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.006 --> 00:19:01.286 A:middle
The system uses this
request identifier to know

00:19:01.286 --> 00:19:03.406 A:middle
which notification
you're requesting

00:19:03.406 --> 00:19:04.626 A:middle
to be removed or updated.

00:19:05.816 --> 00:19:06.426 A:middle
Let's take a look

00:19:06.426 --> 00:19:08.226 A:middle
at notification management
with an example.

00:19:09.396 --> 00:19:12.436 A:middle
Say your application wants to
send notifications for a game,

00:19:12.826 --> 00:19:14.006 A:middle
and it wants to send
notifications

00:19:14.006 --> 00:19:15.076 A:middle
for the start time of the game.

00:19:15.956 --> 00:19:19.266 A:middle
So you start out by creating
your UNNotification request

00:19:20.406 --> 00:19:21.776 A:middle
and scheduling it
with the system,

00:19:22.226 --> 00:19:23.586 A:middle
but say that the
game was cancelled.

00:19:23.976 --> 00:19:27.336 A:middle
So this is as simple as calling
removePendingNotification

00:19:27.336 --> 00:19:30.746 A:middle
Request, passing it the
exact same game identifier

00:19:30.746 --> 00:19:32.656 A:middle
that you created for the
initial notification.

00:19:33.836 --> 00:19:35.726 A:middle
But what if the game
time was updated?

00:19:36.556 --> 00:19:38.616 A:middle
Then you create a new request,

00:19:39.326 --> 00:19:40.816 A:middle
giving it the exact
same identifier

00:19:40.816 --> 00:19:44.726 A:middle
for the initial request,
setting the new trigger time

00:19:45.396 --> 00:19:46.876 A:middle
and just scheduling
it with the system.

00:19:47.446 --> 00:19:49.716 A:middle
And this in turn leads to
updating that notification.

00:19:50.206 --> 00:19:54.236 A:middle
Let's continue this example
for delivered notifications

00:19:54.456 --> 00:19:56.286 A:middle
and talk about score updates.

00:19:57.596 --> 00:19:58.376 A:middle
Again, you just start

00:19:58.376 --> 00:20:00.546 A:middle
out by creating this
notification request


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.376 --> 00:20:00.546 A:middle
out by creating this
notification request

00:20:01.456 --> 00:20:02.626 A:middle
and sending it to the system.

00:20:03.526 --> 00:20:05.326 A:middle
But say that the wrong
score was updated,

00:20:06.536 --> 00:20:08.766 A:middle
then you can simple
remove that notification

00:20:08.856 --> 00:20:10.726 A:middle
by calling
removeDeliveredNotification

00:20:11.206 --> 00:20:12.786 A:middle
giving it the same identifier.

00:20:14.716 --> 00:20:16.726 A:middle
And what if the score
gets updated

00:20:16.726 --> 00:20:18.666 A:middle
which of course is a very
common case for games.

00:20:19.426 --> 00:20:21.856 A:middle
So all you can do in
this scenario is create a

00:20:21.856 --> 00:20:25.156 A:middle
notification request, giving
it the same identifier,

00:20:26.016 --> 00:20:27.696 A:middle
passing it the new
score content,

00:20:28.056 --> 00:20:30.346 A:middle
and then simply scheduling
it with the system.

00:20:31.746 --> 00:20:34.316 A:middle
Now, what this means, let's
take a look at it as an example,

00:20:34.596 --> 00:20:36.646 A:middle
say that notification
was already there

00:20:36.646 --> 00:20:37.836 A:middle
for initial score update.

00:20:38.526 --> 00:20:42.006 A:middle
So by calling update, as I
showed in code, what this leads

00:20:42.006 --> 00:20:45.416 A:middle
to is that that notification
gets updated right

00:20:45.416 --> 00:20:46.506 A:middle
in the notification list,

00:20:46.756 --> 00:20:48.246 A:middle
replacing the original
notification,

00:20:48.586 --> 00:20:51.266 A:middle
so that you're not cluttering
the user's notification list

00:20:51.266 --> 00:20:51.596 A:middle
at all.

00:20:52.516 --> 00:20:58.056 A:middle
[ Applause ]

00:20:58.556 --> 00:21:01.606 A:middle
And you can use this in multiple
ways for aggregating information


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.556 --> 00:21:01.606 A:middle
And you can use this in multiple
ways for aggregating information

00:21:01.966 --> 00:21:03.246 A:middle
that is right for
your applications.

00:21:04.316 --> 00:21:05.756 A:middle
So that was notification
management,

00:21:05.996 --> 00:21:08.496 A:middle
it really gives your
applications a lot of control

00:21:08.756 --> 00:21:10.986 A:middle
on the notifications that
have been sent to the user.

00:21:12.196 --> 00:21:13.716 A:middle
So so far in this
session we've talked

00:21:13.716 --> 00:21:16.206 A:middle
about how your application
sends these notifications

00:21:16.206 --> 00:21:16.786 A:middle
to the users.

00:21:17.266 --> 00:21:19.326 A:middle
But what about the other
side of this exchange?

00:21:19.886 --> 00:21:22.456 A:middle
Notifications are very
intractable in the form

00:21:22.456 --> 00:21:24.636 A:middle
of default actions as
well as custom actions

00:21:24.716 --> 00:21:26.716 A:middle
that your applications
can set on them.

00:21:27.486 --> 00:21:30.576 A:middle
So, to talk about notification
actions let me invite my

00:21:30.576 --> 00:21:32.646 A:middle
colleague Julien to
continue this session.

00:21:32.646 --> 00:21:32.826 A:middle
Thank you.

00:21:33.516 --> 00:21:38.500 A:middle
[ Applause ]

00:21:41.396 --> 00:21:42.156 A:middle
&gt;&gt; Hi everyone.

00:21:42.716 --> 00:21:43.316 A:middle
I'm Julien.

00:21:43.316 --> 00:21:46.006 A:middle
I am a software engineer
in the Frameworks QA Team.

00:21:46.816 --> 00:21:49.036 A:middle
Kritarth showed you the web flow

00:21:49.036 --> 00:21:51.056 A:middle
with the current user
notifications framework

00:21:51.506 --> 00:21:54.036 A:middle
from registration up to the time

00:21:54.036 --> 00:21:56.106 A:middle
when notifications are
delivered to the device.

00:21:57.356 --> 00:21:59.126 A:middle
So now let's talk
about the actions

00:21:59.526 --> 00:22:01.646 A:middle
that the user can take
on the notifications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.526 --> 00:22:01.646 A:middle
that the user can take
on the notifications.

00:22:02.616 --> 00:22:04.076 A:middle
There are three types of actions

00:22:04.316 --> 00:22:06.606 A:middle
that your applications
can be aware of.

00:22:08.836 --> 00:22:11.106 A:middle
The first one is
the default action.

00:22:11.756 --> 00:22:14.806 A:middle
It is when the user opens
your app from a notification.

00:22:16.246 --> 00:22:18.556 A:middle
This can be done when
the device is unlocked

00:22:18.556 --> 00:22:21.266 A:middle
and the user receives a
notification, they can tap

00:22:21.316 --> 00:22:23.546 A:middle
on the banner, which
will open your app.

00:22:24.496 --> 00:22:27.786 A:middle
It can also be done from the
lock screen when the user swipes

00:22:27.846 --> 00:22:32.506 A:middle
from left to right, as well
as in the Notification Center

00:22:32.906 --> 00:22:35.806 A:middle
when the user swipes down to
present the Notification Center,

00:22:36.226 --> 00:22:38.196 A:middle
they can tap on any
of your notification

00:22:38.596 --> 00:22:39.596 A:middle
to open your application.

00:22:42.506 --> 00:22:45.006 A:middle
Now the second type of
actions are custom actions.

00:22:45.516 --> 00:22:47.746 A:middle
And they are within the
actionable notifications.

00:22:48.456 --> 00:22:51.426 A:middle
We introduced actionable
notifications in iOS 8

00:22:52.256 --> 00:22:53.866 A:middle
and they provide
the user a quick way

00:22:53.866 --> 00:22:57.136 A:middle
to execute an action
directly from the notification

00:22:57.726 --> 00:22:59.766 A:middle
without the need of
launching your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:01.486 --> 00:23:04.346 A:middle
Now these custom actions,
they appear as buttons

00:23:04.466 --> 00:23:07.386 A:middle
with customizable title below
the notification content.

00:23:09.196 --> 00:23:12.636 A:middle
In iOS 9 we introduced
text input actions

00:23:13.046 --> 00:23:16.346 A:middle
so that the user can for example
quickly reply to a message

00:23:17.006 --> 00:23:18.786 A:middle
of directly from
the notification.

00:23:19.316 --> 00:23:25.526 A:middle
And these custom actions can be
either background or foreground.

00:23:26.126 --> 00:23:29.046 A:middle
A background action will
dismiss the notification

00:23:29.496 --> 00:23:31.796 A:middle
and give you a short amount
of time in the background

00:23:31.906 --> 00:23:34.576 A:middle
to process that custom action
that the user selected.

00:23:35.616 --> 00:23:38.826 A:middle
On the other hand, a foreground
action will dismiss the

00:23:38.826 --> 00:23:42.036 A:middle
notification and launch your
application in the foreground

00:23:42.036 --> 00:23:43.756 A:middle
so that you can process
that custom action.

00:23:46.336 --> 00:23:48.406 A:middle
Now these custom
actions are available

00:23:48.406 --> 00:23:50.126 A:middle
on both iOS and watchOS.

00:23:52.116 --> 00:23:55.406 A:middle
So first, let's take a look
at what it looks like on iOS.

00:23:56.856 --> 00:23:59.156 A:middle
Here we have an example
of an iPhone 6S.

00:23:59.886 --> 00:24:02.576 A:middle
On this device, the
user can use 3D touch


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.886 --> 00:24:02.576 A:middle
On this device, the
user can use 3D touch

00:24:02.966 --> 00:24:04.236 A:middle
to expand a notification.

00:24:04.716 --> 00:24:08.836 A:middle
When they do so the custom
actions will appear below the

00:24:08.836 --> 00:24:09.866 A:middle
notification content.

00:24:10.666 --> 00:24:11.596 A:middle
And some of these actions,

00:24:11.596 --> 00:24:13.386 A:middle
as you can see can
be text input actions

00:24:13.736 --> 00:24:19.336 A:middle
so the user can quickly
reply to a message.

00:24:19.496 --> 00:24:23.396 A:middle
Now on watchOS, same
thing, the custom actions,

00:24:23.786 --> 00:24:25.726 A:middle
appear below the
notification content,

00:24:26.256 --> 00:24:30.246 A:middle
and some of these actions can
also be text input actions.

00:24:30.786 --> 00:24:32.926 A:middle
And on the watchOS, you
have the opportunity

00:24:32.926 --> 00:24:36.436 A:middle
to provide some suggestions that
the user is likely to choose

00:24:37.176 --> 00:24:38.326 A:middle
for your text input action.

00:24:40.156 --> 00:24:42.796 A:middle
Now for more information
about notifications

00:24:42.796 --> 00:24:46.436 A:middle
on watchOS you can attend the
Quick Interaction Techniques

00:24:46.436 --> 00:24:50.926 A:middle
for watchOS Session later today.

00:24:51.116 --> 00:24:51.936 A:middle
So now that we've talked

00:24:51.936 --> 00:24:54.466 A:middle
about what the custom
actions look like.

00:24:54.866 --> 00:24:57.616 A:middle
Let's first talk about how you
can register your custom actions

00:24:57.856 --> 00:24:59.446 A:middle
and then present
them to the user.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.016 --> 00:25:05.096 A:middle
So for registration, the first
thing you will need to do is

00:25:05.096 --> 00:25:06.396 A:middle
to create an action object.

00:25:07.046 --> 00:25:10.046 A:middle
You give it a unique
identifier, as well as a title.

00:25:10.746 --> 00:25:13.096 A:middle
The title will appear on
the customizable buttons

00:25:13.096 --> 00:25:15.896 A:middle
that we previously saw.

00:25:16.036 --> 00:25:18.336 A:middle
Action will be by
default background action,

00:25:18.876 --> 00:25:21.086 A:middle
but you can also provide some
option such as if you want it

00:25:21.086 --> 00:25:24.236 A:middle
to be a foreground action.

00:25:24.236 --> 00:25:25.826 A:middle
Now, all your actions they need

00:25:25.826 --> 00:25:27.716 A:middle
to be associated
with categories.

00:25:28.716 --> 00:25:30.946 A:middle
The category requires
a unique identifier.

00:25:31.846 --> 00:25:33.936 A:middle
You give it all the
actions you want.

00:25:34.366 --> 00:25:37.376 A:middle
You can also provide now
some intent identifiers,

00:25:38.846 --> 00:25:40.746 A:middle
for more information
about intents,

00:25:41.506 --> 00:25:43.566 A:middle
you can attend the
Introducing SiriKit Session.

00:25:44.756 --> 00:25:45.946 A:middle
There are also some options

00:25:45.946 --> 00:25:47.446 A:middle
that you can provide
for the category.

00:25:48.016 --> 00:25:50.206 A:middle
We will talk about one
of them in a few moments.

00:25:52.276 --> 00:25:54.166 A:middle
Now, once you've
created all your actions

00:25:54.166 --> 00:25:57.176 A:middle
and all your categories, the
only thing you need to do is

00:25:57.176 --> 00:25:57.966 A:middle
to register them

00:25:58.226 --> 00:26:01.406 A:middle
to the UNUserNotificationCenter
object associated


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.226 --> 00:26:01.406 A:middle
to the UNUserNotificationCenter
object associated

00:26:01.406 --> 00:26:02.326 A:middle
with your application.

00:26:05.006 --> 00:26:07.516 A:middle
Now let's talk about how you
can present these custom actions

00:26:07.516 --> 00:26:08.036 A:middle
to your user.

00:26:09.166 --> 00:26:12.586 A:middle
You can do so from both remote
and local notifications.

00:26:14.616 --> 00:26:16.836 A:middle
So first for remote
notifications,

00:26:17.336 --> 00:26:20.836 A:middle
the only thing you need to do
is to set a category identifier

00:26:20.836 --> 00:26:24.406 A:middle
in the APS dictionary of the
remote notification payload.

00:26:25.296 --> 00:26:28.606 A:middle
Now this identifier needs to
match one of the identifiers

00:26:28.746 --> 00:26:30.956 A:middle
for the categories you
previously registered.

00:26:33.746 --> 00:26:36.426 A:middle
For local notifications
you just need

00:26:36.426 --> 00:26:38.006 A:middle
to set the category identifier

00:26:38.476 --> 00:26:40.876 A:middle
on the mutable content
that you created.

00:26:41.396 --> 00:26:44.406 A:middle
Same thing this identifier
needs to match the identifier

00:26:44.406 --> 00:26:49.376 A:middle
that you [inaudible] before.

00:26:49.546 --> 00:26:51.226 A:middle
Now let's talk about
the third type of action

00:26:51.226 --> 00:26:53.446 A:middle
that your app can be aware
of is the dismiss action.

00:26:53.986 --> 00:26:58.186 A:middle
Now the dismiss action is
new to iOS 10 and it is

00:26:58.186 --> 00:27:00.776 A:middle
when the user dismisses
a specific notification.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.186 --> 00:27:00.776 A:middle
when the user dismisses
a specific notification.

00:27:02.286 --> 00:27:04.396 A:middle
You could use this
if, for example,

00:27:04.396 --> 00:27:06.016 A:middle
you have a calendar application

00:27:06.666 --> 00:27:09.356 A:middle
and let's say you send a remote
notification to your user

00:27:09.356 --> 00:27:11.306 A:middle
about an upcoming meeting.

00:27:12.066 --> 00:27:13.616 A:middle
The user looks at
the notification

00:27:14.156 --> 00:27:16.786 A:middle
and decides to dismiss it.

00:27:17.056 --> 00:27:18.816 A:middle
When in this case you might want

00:27:18.816 --> 00:27:21.906 A:middle
to stop sending other remote
notifications to other devices

00:27:21.906 --> 00:27:24.276 A:middle
of this user since they have
seen the notification already.

00:27:26.036 --> 00:27:29.096 A:middle
Now, how can the user actually
dismiss the notification?

00:27:29.986 --> 00:27:33.056 A:middle
Well they can do that on
the lock screen by swiping

00:27:33.056 --> 00:27:36.106 A:middle
from right to left, and
tapping on the Clear button.

00:27:38.836 --> 00:27:42.356 A:middle
They can also do that from the
Notification Center by swiping

00:27:42.356 --> 00:27:45.096 A:middle
from right to left as well,
and taping on the Clear button

00:27:45.096 --> 00:27:46.786 A:middle
which will dismiss
the notification.

00:27:47.316 --> 00:27:53.166 A:middle
Now since this is not the
common case you will need

00:27:53.166 --> 00:27:56.146 A:middle
to update for it.

00:27:56.406 --> 00:27:57.716 A:middle
So remember earlier
when we talked

00:27:57.716 --> 00:27:59.776 A:middle
about the different categories
that you could register,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.456 --> 00:28:02.666 A:middle
we talked about some
options, this is one of them,

00:28:03.006 --> 00:28:04.586 A:middle
the customDismissAction option.

00:28:07.166 --> 00:28:09.626 A:middle
So let's look at the
code we used earlier

00:28:09.626 --> 00:28:10.856 A:middle
to register our category.

00:28:11.806 --> 00:28:12.946 A:middle
The only thing you
need to do here,

00:28:14.196 --> 00:28:16.006 A:middle
is simply add the
customDismissAction

00:28:16.466 --> 00:28:17.886 A:middle
to the options of this category

00:28:18.266 --> 00:28:20.516 A:middle
and your app will
receive the actions

00:28:20.516 --> 00:28:22.876 A:middle
when the result dismisses
specific notification

00:28:23.206 --> 00:28:23.916 A:middle
with this category.

00:28:27.156 --> 00:28:29.576 A:middle
So let's summarize the actions
that we talked about today.

00:28:30.996 --> 00:28:32.546 A:middle
The first one is
a default action,

00:28:32.946 --> 00:28:34.756 A:middle
when the user opens
your application

00:28:34.946 --> 00:28:35.936 A:middle
from the notification.

00:28:37.716 --> 00:28:39.726 A:middle
The second one where
the custom actions

00:28:39.726 --> 00:28:42.616 A:middle
within actionable notifications
to provide a quick way

00:28:42.616 --> 00:28:45.256 A:middle
for the user to execute
an action directly

00:28:45.256 --> 00:28:46.176 A:middle
from the notification.

00:28:47.926 --> 00:28:50.226 A:middle
And finally the third one
is the dismiss action,

00:28:51.006 --> 00:28:53.526 A:middle
it is new to iOS 10 and
it allows you to know

00:28:53.566 --> 00:28:56.126 A:middle
when a user dismisses a
specific notification.

00:28:58.516 --> 00:29:04.016 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.516 --> 00:29:04.016 A:middle
[ Applause ]

00:29:04.516 --> 00:29:07.516 A:middle
Now let's talk about how you can
actually handle the responses

00:29:07.516 --> 00:29:10.336 A:middle
from these actions
in your application.

00:29:11.616 --> 00:29:14.056 A:middle
So until now we had
several methods based

00:29:14.056 --> 00:29:16.546 A:middle
on if the user opened the
app from a notification,

00:29:16.976 --> 00:29:21.746 A:middle
or if we had custom actions or
text input actions, or if it was

00:29:21.746 --> 00:29:23.516 A:middle
from a remote or a
local notification.

00:29:24.536 --> 00:29:27.026 A:middle
Well now with our new user
notifications framework,

00:29:27.026 --> 00:29:32.026 A:middle
we have a single method
to do that and it is part

00:29:32.026 --> 00:29:35.286 A:middle
of the UNUserNotificationCenter
delegate protocol.

00:29:37.006 --> 00:29:40.756 A:middle
The method you will need to
implement is didReceive response

00:29:40.836 --> 00:29:41.806 A:middle
with CompletionHandler.

00:29:43.636 --> 00:29:46.326 A:middle
Now let's take a closer
look at the response object

00:29:46.936 --> 00:29:48.696 A:middle
and what you can do with
it in your application.

00:29:50.936 --> 00:29:53.496 A:middle
Your response object has
an action identifier,

00:29:53.996 --> 00:29:57.266 A:middle
which can either be the
default, the dismiss action,

00:29:57.656 --> 00:29:59.816 A:middle
or any of the custom
actions that you created.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:01.486 --> 00:30:03.606 A:middle
It can have a user
text property in case

00:30:03.606 --> 00:30:05.476 A:middle
if it was a text input action.

00:30:05.866 --> 00:30:11.086 A:middle
It can also have a notification
object with the request object

00:30:11.086 --> 00:30:14.126 A:middle
and the identifier of
the notification as well

00:30:14.126 --> 00:30:15.266 A:middle
as the trigger and the content.

00:30:16.236 --> 00:30:19.066 A:middle
Based on the type of trigger
you can figure out if it was

00:30:19.066 --> 00:30:21.316 A:middle
from a local or a
remote notification.

00:30:22.796 --> 00:30:24.986 A:middle
So this is all with the new
user notification framework,

00:30:25.406 --> 00:30:27.496 A:middle
you can handle your
responses of actions.

00:30:30.856 --> 00:30:32.696 A:middle
Now, let's talk about
remote notifications.

00:30:33.186 --> 00:30:37.666 A:middle
This is your current
workflow, the workflow

00:30:37.666 --> 00:30:40.216 A:middle
with remote notification that
we saw earlier in this session.

00:30:41.286 --> 00:30:42.736 A:middle
You have your service
identification,

00:30:43.246 --> 00:30:45.436 A:middle
which sends a remote
notification to payload

00:30:45.436 --> 00:30:47.096 A:middle
to Apple push notification
service.

00:30:47.096 --> 00:30:52.386 A:middle
And then it is delivered to the
device and shown to the user.

00:30:52.506 --> 00:30:54.926 A:middle
Now, maybe some of
you are in a situation

00:30:54.926 --> 00:30:58.636 A:middle
where you have your server side
application and you communicate

00:30:58.926 --> 00:31:01.776 A:middle
to your iOS application
maybe using some


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.926 --> 00:31:01.776 A:middle
to your iOS application
maybe using some

00:31:01.776 --> 00:31:02.816 A:middle
end-to-end encryption.

00:31:04.476 --> 00:31:07.696 A:middle
Well, wouldn't that be great
if you could use that same end

00:31:07.696 --> 00:31:10.906 A:middle
to end encryption for your
remote notification as well?

00:31:13.256 --> 00:31:16.116 A:middle
Well for that in iOS 10
we are introducing the

00:31:16.116 --> 00:31:17.036 A:middle
service extension.

00:31:18.386 --> 00:31:19.316 A:middle
So now we are going to talk

00:31:19.316 --> 00:31:21.346 A:middle
about what the service
extension is

00:31:22.076 --> 00:31:23.716 A:middle
and then how you can
actually implement it

00:31:23.716 --> 00:31:24.526 A:middle
in your application.

00:31:28.386 --> 00:31:32.226 A:middle
Now the service extension is
a non iOS extension available

00:31:32.226 --> 00:31:35.366 A:middle
on iOS 10, which means it
runs in the background.

00:31:36.546 --> 00:31:41.366 A:middle
And its main purpose is to
augment or replace the content

00:31:41.536 --> 00:31:44.166 A:middle
of visible or remote
notifications before they are

00:31:44.166 --> 00:31:45.086 A:middle
displayed to the user.

00:31:47.006 --> 00:31:49.356 A:middle
So let's take a look again
at your current workflow

00:31:49.356 --> 00:31:50.556 A:middle
for remote notifications.

00:31:51.066 --> 00:31:55.126 A:middle
So you have your server-side
application, you send a payload

00:31:55.126 --> 00:31:56.896 A:middle
to Apple push notification
service

00:31:56.896 --> 00:31:58.556 A:middle
and then it is sent
to the device.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.236 --> 00:32:02.086 A:middle
Well, now with the extension,

00:32:02.746 --> 00:32:04.256 A:middle
you're able to modify
the content

00:32:04.736 --> 00:32:05.886 A:middle
between the time you sent it

00:32:05.886 --> 00:32:07.966 A:middle
from your server-side
application

00:32:08.046 --> 00:32:10.496 A:middle
and the time it is displayed
to the user on their device.

00:32:11.396 --> 00:32:14.556 A:middle
As you can see in this
example, I did a title,

00:32:14.556 --> 00:32:15.846 A:middle
as well as a subtitle,

00:32:16.396 --> 00:32:18.496 A:middle
and I modified the body
of the notification.

00:32:21.146 --> 00:32:23.836 A:middle
Now a few more details about
that service extension.

00:32:24.156 --> 00:32:26.886 A:middle
You will get a short execution
time, which means this is not

00:32:26.886 --> 00:32:28.816 A:middle
for long background
running tasks.

00:32:30.526 --> 00:32:35.146 A:middle
And in case you fail to
provide some updated content

00:32:35.146 --> 00:32:37.516 A:middle
in a timely manner, you
will get a fallback method.

00:32:38.616 --> 00:32:40.826 A:middle
In case you still fail to
provide some updated content,

00:32:41.296 --> 00:32:43.876 A:middle
we will show the original
remote notification

00:32:44.086 --> 00:32:45.526 A:middle
that you sent to the user.

00:32:46.096 --> 00:32:50.596 A:middle
Now some potential uses of
that you could use end-to-end

00:32:50.596 --> 00:32:54.706 A:middle
encryption for your remote
notifications and you could

00:32:54.706 --> 00:32:57.916 A:middle
as well add some attachments
to your remote notifications

00:32:57.916 --> 00:32:59.236 A:middle
to make them even richer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:00.666 --> 00:33:02.856 A:middle
Now there will be a
detailed example on how to do

00:33:02.856 --> 00:33:05.136 A:middle
that in the Advance
Notification Session.

00:33:07.696 --> 00:33:10.596 A:middle
Now let's talk about how you
can actually implement this new

00:33:10.596 --> 00:33:12.506 A:middle
service extension
in your application.

00:33:13.026 --> 00:33:17.736 A:middle
The first thing you would need
to do in your Xcode project

00:33:18.226 --> 00:33:19.136 A:middle
to add the new target.

00:33:20.036 --> 00:33:22.516 A:middle
You can use the template,
which is located

00:33:22.516 --> 00:33:24.936 A:middle
under the application
extension section.

00:33:26.016 --> 00:33:27.936 A:middle
And it is known as the
notification service.

00:33:28.796 --> 00:33:31.596 A:middle
Now this template
has one main class.

00:33:32.726 --> 00:33:37.906 A:middle
So we are going to take a look
at a simplified version of it.

00:33:38.176 --> 00:33:41.146 A:middle
So this class, is a subclass

00:33:41.146 --> 00:33:43.336 A:middle
of the UNNotification
service extension

00:33:44.626 --> 00:33:45.776 A:middle
and it has two main methods.

00:33:48.316 --> 00:33:52.126 A:middle
The first method is
didReceive with ContentHandler.

00:33:53.746 --> 00:33:56.376 A:middle
Now this method will give
you the current request

00:33:56.376 --> 00:33:58.426 A:middle
which has the identifier
for the notification

00:33:58.716 --> 00:33:59.686 A:middle
as well as the content.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:01.016 --> 00:34:02.576 A:middle
Then we have the ContentHandler.

00:34:03.076 --> 00:34:05.946 A:middle
You will need to call this
ContentHandler when you want

00:34:05.946 --> 00:34:08.466 A:middle
to present the notification
to your user, and you need

00:34:08.466 --> 00:34:12.585 A:middle
to provide some content for it.

00:34:12.846 --> 00:34:15.846 A:middle
Now, the second method is
service extension time will

00:34:15.846 --> 00:34:17.856 A:middle
expire, and this will be called

00:34:17.856 --> 00:34:20.666 A:middle
if you cannot provide updated
content in a timely manner.

00:34:22.056 --> 00:34:25.436 A:middle
So now remember if you fail
to call the ContentHandler

00:34:25.436 --> 00:34:29.056 A:middle
in this method, we will show
the original remote notification

00:34:29.056 --> 00:34:30.226 A:middle
content that you sent.

00:34:33.606 --> 00:34:36.626 A:middle
So now let's talk about how you
can actually trigger this code

00:34:36.626 --> 00:34:38.136 A:middle
from a remote notification.

00:34:38.706 --> 00:34:43.766 A:middle
Here, we have a very
simple example

00:34:43.766 --> 00:34:46.126 A:middle
of remote notification
payload with an alert.

00:34:47.196 --> 00:34:50.766 A:middle
And as you can see we have a new
key, the mutable content key.

00:34:51.786 --> 00:34:54.356 A:middle
Now, you will need to use this
key to let the system know

00:34:54.565 --> 00:34:56.426 A:middle
that you want the service
extension to be launched

00:34:56.926 --> 00:34:58.926 A:middle
to update the remote
notification content.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.536 --> 00:35:02.836 A:middle
You do not need to use
this key every time,

00:35:03.076 --> 00:35:04.726 A:middle
only use it when
you actually want

00:35:04.726 --> 00:35:06.606 A:middle
to replace the content
of the notification.

00:35:10.116 --> 00:35:12.826 A:middle
Now you can see that I also
added some encrypted content

00:35:12.826 --> 00:35:13.416 A:middle
of my own.

00:35:14.106 --> 00:35:16.316 A:middle
So let's take a look at some
code, which will be able

00:35:16.316 --> 00:35:18.776 A:middle
to process this remote
notification payload.

00:35:22.336 --> 00:35:26.006 A:middle
So you can see here we have
our didReceive( request method,

00:35:26.006 --> 00:35:30.386 A:middle
and the first thing I do here is
I decrypt the encrypted content

00:35:30.466 --> 00:35:32.026 A:middle
of the remote notification
payload.

00:35:35.426 --> 00:35:38.106 A:middle
I then create a
MutableNotificationContent

00:35:38.266 --> 00:35:43.126 A:middle
object and I assign the
body of this notification

00:35:43.696 --> 00:35:46.246 A:middle
with the decrypted content
that we previously set.

00:35:51.496 --> 00:35:54.716 A:middle
And finally we call
the ContentHandler

00:35:55.176 --> 00:35:57.426 A:middle
to present the notification
content to the user.

00:35:57.956 --> 00:36:01.466 A:middle
Now, this is how simple it is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:57.956 --> 00:36:01.466 A:middle
Now, this is how simple it is

00:36:01.466 --> 00:36:04.796 A:middle
to implement the new service
extension in your application.

00:36:06.516 --> 00:36:13.956 A:middle
[ Applause ]

00:36:14.456 --> 00:36:19.016 A:middle
Now let's recap what
we've talked about today.

00:36:19.186 --> 00:36:21.976 A:middle
We saw an overview of
notification with local

00:36:21.976 --> 00:36:23.206 A:middle
and remote notifications.

00:36:25.256 --> 00:36:28.266 A:middle
We showed you the new user
notification framework,

00:36:29.046 --> 00:36:32.466 A:middle
where is available on
iOS, watchOS, and tvOS.

00:36:35.836 --> 00:36:38.956 A:middle
We talked about how you can
register for notifications,

00:36:40.126 --> 00:36:42.136 A:middle
as well as how you can
create your content.

00:36:42.636 --> 00:36:45.956 A:middle
How you can schedule
your notifications,

00:36:45.956 --> 00:36:47.866 A:middle
either local or remote.

00:36:48.846 --> 00:36:51.706 A:middle
We also talked about the new
management that you can do

00:36:51.706 --> 00:36:56.936 A:middle
on the pending and
delivered notifications.

00:36:57.006 --> 00:36:58.796 A:middle
And then we talked about
the different actions

00:36:58.836 --> 00:37:00.786 A:middle
that the user can take
on your notifications


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.836 --> 00:37:00.786 A:middle
that the user can take
on your notifications

00:37:01.366 --> 00:37:03.856 A:middle
and how you can handle the
responses of these actions

00:37:04.226 --> 00:37:05.136 A:middle
within your application.

00:37:07.486 --> 00:37:10.376 A:middle
Finally, we presented the
brand new service extension

00:37:10.886 --> 00:37:13.656 A:middle
which allows you to augment
or replace the content

00:37:13.656 --> 00:37:17.666 A:middle
of visual remote notifications
before they are displayed

00:37:17.666 --> 00:37:18.236 A:middle
to the user.

00:37:21.396 --> 00:37:24.576 A:middle
For more information,
you can visit this link

00:37:24.706 --> 00:37:29.766 A:middle
on developer.apple.com.

00:37:29.966 --> 00:37:31.356 A:middle
We will have some
related sessions.

00:37:31.746 --> 00:37:35.426 A:middle
There is an Advance Notification
Session right after this one,

00:37:35.426 --> 00:37:37.676 A:middle
we strongly encourage you
to attend this session

00:37:38.106 --> 00:37:39.666 A:middle
if you are interested
in notifications.

00:37:40.916 --> 00:37:43.786 A:middle
There is also if you want more
information on notifications

00:37:43.786 --> 00:37:46.726 A:middle
on the Watch you can attend the
Quick Interaction Techniques

00:37:46.726 --> 00:37:47.666 A:middle
for watchOS Session.

00:37:49.096 --> 00:37:49.666 A:middle
Thank you everyone.

00:37:50.508 --> 00:37:52.508 A:middle
[ Applause ]
