WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:08.516 --> 00:00:17.500 A:middle
[ Music ]

00:00:25.756 --> 00:00:26.386 A:middle
&gt;&gt; Hello, everyone.

00:00:27.181 --> 00:00:29.181 A:middle
[ Applause ]

00:00:29.346 --> 00:00:29.966 A:middle
&gt;&gt; Oh, please.

00:00:30.386 --> 00:00:32.735 A:middle
My name's Woody.

00:00:32.735 --> 00:00:34.466 A:middle
I work in software
engineering at Apple.

00:00:34.466 --> 00:00:35.996 A:middle
I'd like to welcome
you to the conference,

00:00:36.076 --> 00:00:38.376 A:middle
both those of you here in
the room and those of you

00:00:38.376 --> 00:00:40.386 A:middle
who are watching from
home on the live screen.

00:00:41.976 --> 00:00:44.036 A:middle
There's a couple things I'd
like to go through with you

00:00:44.036 --> 00:00:45.276 A:middle
in the next 40 minutes.

00:00:45.646 --> 00:00:46.916 A:middle
We're going to take
a look at some ways

00:00:47.056 --> 00:00:49.456 A:middle
that you can today start
reducing your technical debt.

00:00:50.086 --> 00:00:51.646 A:middle
Then, we'll take a
look at Asset Catalogs.

00:00:52.516 --> 00:00:54.226 A:middle
We'll take a look at
the new design pattern.

00:00:54.226 --> 00:00:56.646 A:middle
Well, it's not really new but
a design pattern we'd like you

00:00:56.646 --> 00:00:59.176 A:middle
to start using called
Dependency Injection.

00:00:59.746 --> 00:01:01.886 A:middle
And in the latter half of the
presentation will be an update


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.746 --> 00:01:01.886 A:middle
And in the latter half of the
presentation will be an update

00:01:01.886 --> 00:01:05.396 A:middle
from my presentation last
year about Live playgrounds.

00:01:06.106 --> 00:01:06.786 A:middle
So, let's get going.

00:01:08.126 --> 00:01:11.366 A:middle
Last year in the session at one
of the labs, I met one of you

00:01:11.656 --> 00:01:13.486 A:middle
that was describing a scenario.

00:01:13.486 --> 00:01:15.326 A:middle
You were describing something
that I think is going

00:01:15.326 --> 00:01:18.316 A:middle
to be quite familiar
to many of you.

00:01:19.016 --> 00:01:22.076 A:middle
You've got your boss that's
piling on these requests

00:01:22.076 --> 00:01:25.746 A:middle
for features and the features
generate revenue and you want

00:01:25.746 --> 00:01:27.036 A:middle
to get paid, so you do that.

00:01:27.826 --> 00:01:29.506 A:middle
Then you've got your
customers and they want

00:01:29.506 --> 00:01:31.206 A:middle
to fix the bugs that
cause them pain.

00:01:31.736 --> 00:01:34.396 A:middle
And you take pride in your work
so you want to do that too.

00:01:34.706 --> 00:01:36.666 A:middle
Some technical debt that
you want to resolve.

00:01:36.916 --> 00:01:39.546 A:middle
Sometimes I think about building
software as like building

00:01:39.546 --> 00:01:40.896 A:middle
up a pile of Jenga blocks.

00:01:41.036 --> 00:01:42.446 A:middle
In the first version,
it's pretty stable

00:01:42.446 --> 00:01:44.136 A:middle
and you start piling
on stuff on top of it

00:01:44.136 --> 00:01:47.416 A:middle
and then it becomes unstable and
begins to fall down after that.

00:01:47.416 --> 00:01:49.896 A:middle
So, you want to take a step
back and maybe resolve some

00:01:49.896 --> 00:01:51.116 A:middle
of the lower-level issues.

00:01:52.756 --> 00:01:57.886 A:middle
With all these things,
you then come to WWDC.

00:01:58.256 --> 00:01:59.686 A:middle
And we pile on new API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.566 --> 00:02:04.656 A:middle
And then we give you
a new version of Swift

00:02:04.656 --> 00:02:06.366 A:middle
and it breaks source
code compatibility

00:02:06.526 --> 00:02:07.976 A:middle
but introduces some
new features.

00:02:08.386 --> 00:02:11.966 A:middle
And you were warned, so
don't complain about it.

00:02:13.026 --> 00:02:15.566 A:middle
And then we introduced
new platforms

00:02:15.736 --> 00:02:18.336 A:middle
and new extension points and
some of our existing apps

00:02:18.336 --> 00:02:19.766 A:middle
like Siri and Messages.

00:02:20.296 --> 00:02:23.366 A:middle
And if you want to think of your
role as a developer as a bit

00:02:23.366 --> 00:02:25.796 A:middle
of a run loop with all these
events being pushed into it,

00:02:26.146 --> 00:02:27.206 A:middle
well, you know what
happens then.

00:02:27.206 --> 00:02:28.026 A:middle
There's too much stuff.

00:02:28.686 --> 00:02:30.496 A:middle
So, what you do?

00:02:30.496 --> 00:02:32.476 A:middle
What are some things
that you can start doing

00:02:32.806 --> 00:02:34.366 A:middle
to get ready for the fall?

00:02:35.036 --> 00:02:37.526 A:middle
First of all, if you were to
support a deployment target

00:02:37.526 --> 00:02:42.726 A:middle
of iOS 8 and 9, you would
cover 95% of the devices.

00:02:42.876 --> 00:02:44.436 A:middle
So, there's really no
need any more to have any

00:02:44.436 --> 00:02:46.126 A:middle
of those deployment
targets set to 7.

00:02:46.666 --> 00:02:47.426 A:middle
Let's get rid of that.

00:02:47.806 --> 00:02:49.896 A:middle
In fact, the general idea is

00:02:49.896 --> 00:02:53.256 A:middle
that you take the current
shipping version, so 9.3,

00:02:53.766 --> 00:02:55.376 A:middle
and then set your
deployment target

00:02:55.376 --> 00:02:57.916 A:middle
to one version back, maybe 8.4.

00:02:58.436 --> 00:03:01.416 A:middle
But don't go to 8.3 or 8.2
anymore because then you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.436 --> 00:03:01.416 A:middle
But don't go to 8.3 or 8.2
anymore because then you

00:03:01.416 --> 00:03:03.366 A:middle
and your customers don't
benefit from the improvements

00:03:03.366 --> 00:03:06.646 A:middle
that we've implemented under
the hood in that 8.4 release.

00:03:07.566 --> 00:03:09.766 A:middle
When we come out with iOS 10
in the fall for the public,

00:03:10.926 --> 00:03:14.876 A:middle
set your deployment
target to 9.3.

00:03:15.106 --> 00:03:17.486 A:middle
Next, Issue Navigator.

00:03:18.036 --> 00:03:20.456 A:middle
Resolve those issues.

00:03:20.836 --> 00:03:22.146 A:middle
Take a look at them
and fix them.

00:03:23.096 --> 00:03:26.566 A:middle
When we tell you that
there's, when we tell you

00:03:26.566 --> 00:03:29.646 A:middle
that there is a deprecated API,
we deprecate API for a variety

00:03:29.646 --> 00:03:32.426 A:middle
of reasons, including to
achieve better error handling

00:03:32.686 --> 00:03:34.686 A:middle
or to better, have
better reporting

00:03:34.686 --> 00:03:37.966 A:middle
or to permit more performance
or just add flexibility

00:03:37.966 --> 00:03:39.556 A:middle
in the arguments return values.

00:03:39.766 --> 00:03:44.366 A:middle
And there's really no excuse
for not moving on to the new API

00:03:44.526 --> 00:03:45.926 A:middle
because we tell you right there.

00:03:45.926 --> 00:03:47.066 A:middle
It tells you what to use.

00:03:47.336 --> 00:03:48.046 A:middle
So, just use that.

00:03:48.156 --> 00:03:48.896 A:middle
Switch over those.

00:03:50.116 --> 00:03:52.726 A:middle
Next, you might decide that you
want to treat warnings as errors

00:03:53.316 --> 00:03:55.606 A:middle
and we've had that for a
while with Objective-C.

00:03:55.996 --> 00:04:00.366 A:middle
But now we also have it
in Xcode 8 for Swift.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:55.996 --> 00:04:00.366 A:middle
But now we also have it
in Xcode 8 for Swift.

00:04:00.366 --> 00:04:00.736 A:middle
I know.

00:04:01.036 --> 00:04:03.036 A:middle
[ Applause ]

00:04:03.056 --> 00:04:04.606 A:middle
I think I'm the first
person to tell you that.

00:04:06.146 --> 00:04:07.216 A:middle
I really like this idea.

00:04:07.216 --> 00:04:09.046 A:middle
I think it's fantastic,
treating warnings as errors,

00:04:09.046 --> 00:04:11.876 A:middle
because it forces you and your
team to address the issues.

00:04:12.096 --> 00:04:14.666 A:middle
It's far too easy to
ignore those yellow warnings

00:04:14.666 --> 00:04:16.866 A:middle
and think you'll come back to
them later and then you don't

00:04:17.076 --> 00:04:20.255 A:middle
and that's the whole
technical debt thing.

00:04:20.486 --> 00:04:26.266 A:middle
Also, do you think this would
work if you pitched maybe a 1.0

00:04:26.266 --> 00:04:28.886 A:middle
of a new project, a new
app, and you said your team,

00:04:29.016 --> 00:04:30.736 A:middle
we're going to ship
1.0, but we're not going

00:04:30.736 --> 00:04:32.256 A:middle
to have any art work in
it, it's not ready yet.

00:04:32.546 --> 00:04:33.936 A:middle
We're not going to
have any icons in it.

00:04:34.056 --> 00:04:35.166 A:middle
We'll ship it and
we'll get those caught

00:04:35.166 --> 00:04:36.626 A:middle
up in the .1 release.

00:04:37.126 --> 00:04:37.826 A:middle
That would never fly.

00:04:37.826 --> 00:04:38.556 A:middle
No one's going to do that,

00:04:38.556 --> 00:04:40.296 A:middle
because this is how users
interact with your app.

00:04:41.796 --> 00:04:44.076 A:middle
Well, actually it's how
many users but not all

00:04:44.076 --> 00:04:45.076 A:middle
of them interact with your app.

00:04:45.536 --> 00:04:48.276 A:middle
Many of them interact with your
app using the accessibility

00:04:48.276 --> 00:04:50.576 A:middle
features that we have built
into the operating systems.

00:04:51.106 --> 00:04:54.946 A:middle
So, why would ship your app with
artwork for people that need it

00:04:54.946 --> 00:04:56.926 A:middle
or want it or use it but then
not have the accessibility

00:04:56.926 --> 00:04:57.636 A:middle
features in there?

00:04:57.636 --> 00:04:58.716 A:middle
That's not fair.

00:04:59.496 --> 00:05:01.016 A:middle
So, resolve some of
the technical debt


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.496 --> 00:05:01.016 A:middle
So, resolve some of
the technical debt

00:05:01.016 --> 00:05:02.156 A:middle
that comes to accessibility.

00:05:02.286 --> 00:05:03.106 A:middle
Add support for that.

00:05:03.106 --> 00:05:05.876 A:middle
We think that the accessibility
support is as much a part

00:05:05.876 --> 00:05:08.156 A:middle
of your user interface
as the artwork is.

00:05:12.236 --> 00:05:13.476 A:middle
It's built into Xcode,

00:05:13.756 --> 00:05:15.316 A:middle
so you can use Interface
Builder for that.

00:05:15.646 --> 00:05:17.156 A:middle
It's also easy to
do programmatically.

00:05:17.736 --> 00:05:21.566 A:middle
We have a lot of
locale-aware API.

00:05:22.576 --> 00:05:24.206 A:middle
You should be using those
and that's less code

00:05:24.206 --> 00:05:24.936 A:middle
that you have to write.

00:05:25.576 --> 00:05:26.906 A:middle
That generally isn't
new, though.

00:05:27.606 --> 00:05:28.676 A:middle
But these are.

00:05:29.856 --> 00:05:31.216 A:middle
Dimensions and measurement
formatting.

00:05:31.396 --> 00:05:33.106 A:middle
If you've got recipe
apps or fitness apps

00:05:33.106 --> 00:05:35.296 A:middle
and you've been converting
between metric and imperial

00:05:35.666 --> 00:05:37.606 A:middle
on your own code,
get rid of that code

00:05:37.606 --> 00:05:39.946 A:middle
and use our code that's now
available in the fall release.

00:05:41.286 --> 00:05:46.226 A:middle
We'd like you to support
Peek, Pop and Quick actions.

00:05:46.616 --> 00:05:49.416 A:middle
Right? You know, if you
have iPhone 6S right now,

00:05:50.696 --> 00:05:53.356 A:middle
you're probably accustomed
to let's push hard on this

00:05:53.356 --> 00:05:54.226 A:middle
and see if it does anything.

00:05:54.386 --> 00:05:54.926 A:middle
No, nothing.

00:05:55.036 --> 00:05:56.656 A:middle
So, let's push hard on that
and see if it does anything.

00:05:56.796 --> 00:05:57.636 A:middle
Well, that one does something.

00:05:57.876 --> 00:05:58.986 A:middle
It's hard to discover.

00:05:58.986 --> 00:06:00.476 A:middle
How awesome would
it be if every app


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.986 --> 00:06:00.476 A:middle
How awesome would
it be if every app

00:06:00.476 --> 00:06:03.326 A:middle
that we had already
had support for Peek,

00:06:03.326 --> 00:06:04.666 A:middle
Pop and Push and the 3-D touch?

00:06:05.896 --> 00:06:14.826 A:middle
Next. We want you to run
the Swift migrator using the

00:06:14.826 --> 00:06:16.116 A:middle
developer preview of Xcode 8.

00:06:16.116 --> 00:06:19.956 A:middle
If it doesn't migrate your code,
file a bug report and tell us.

00:06:20.416 --> 00:06:22.386 A:middle
Then we have an opportunity
to fix that so

00:06:22.386 --> 00:06:24.556 A:middle
that when you run migrator
for real in the fall

00:06:24.846 --> 00:06:27.876 A:middle
on the final release of
Xcode 8, it'll likely work.

00:06:27.876 --> 00:06:31.376 A:middle
If it doesn't work,
we resolve some

00:06:31.376 --> 00:06:32.626 A:middle
of our own technical
debt with our API.

00:06:32.666 --> 00:06:34.186 A:middle
The public interface is the same

00:06:34.346 --> 00:06:36.436 A:middle
but the implementation might
change between releases.

00:06:36.816 --> 00:06:42.166 A:middle
And it could be that the way
you use whatever API is a way

00:06:42.166 --> 00:06:43.036 A:middle
that we didn't expect.

00:06:43.926 --> 00:06:44.966 A:middle
So, you have an edge case.

00:06:45.596 --> 00:06:46.566 A:middle
So, tell us about that too.

00:06:46.736 --> 00:06:48.346 A:middle
This is why we do
these preview releases.

00:06:48.866 --> 00:06:52.326 A:middle
We want you to file bug reports.

00:06:52.866 --> 00:06:55.456 A:middle
The report isn't just
banter in the hallway.

00:06:55.566 --> 00:06:57.846 A:middle
And it's not just
writing on a dev forum

00:06:58.276 --> 00:07:00.206 A:middle
and is not just sending
an email to Apple.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.276 --> 00:07:00.206 A:middle
and is not just sending
an email to Apple.

00:07:01.006 --> 00:07:04.006 A:middle
The proper way to file
a bug report is this.

00:07:04.106 --> 00:07:05.486 A:middle
BugReport.Apple.com.

00:07:05.926 --> 00:07:06.566 A:middle
Fill in the blanks.

00:07:07.066 --> 00:07:09.896 A:middle
And then once you do
that, you get a number

00:07:09.896 --> 00:07:11.136 A:middle
and then that's the
number that you go

00:07:11.306 --> 00:07:12.696 A:middle
and post back into
the dev forums.

00:07:12.826 --> 00:07:15.116 A:middle
There's a lot of Apple engineers
that read the dev forums.

00:07:15.306 --> 00:07:18.076 A:middle
We like to hear what you are
saying but when you file,

00:07:18.076 --> 00:07:20.546 A:middle
or when you report an
issue in those groups

00:07:20.626 --> 00:07:23.946 A:middle
and you don't include the bug
report number, it's difficult

00:07:23.946 --> 00:07:25.416 A:middle
for us internally to
kind of follow through

00:07:25.416 --> 00:07:25.926 A:middle
and get traction on it.

00:07:26.046 --> 00:07:26.976 A:middle
So, do that.

00:07:30.136 --> 00:07:36.276 A:middle
Next, you're probably
not a great fan

00:07:36.276 --> 00:07:38.386 A:middle
of filing bug reports with us.

00:07:39.376 --> 00:07:41.996 A:middle
Because you've filed
them and then you wait

00:07:41.996 --> 00:07:43.306 A:middle
and nothing seems to happen.

00:07:43.846 --> 00:07:44.756 A:middle
You get nothing back.

00:07:45.486 --> 00:07:48.596 A:middle
In the words of Whitney Houston,
where lonely bug reports go?

00:07:49.266 --> 00:07:51.386 A:middle
Well, they seem to go in
this great big black hole

00:07:51.386 --> 00:07:52.676 A:middle
because you never
get anything back.

00:07:53.506 --> 00:07:56.826 A:middle
Or you think maybe you get
it in front of an engineer

00:07:56.826 --> 00:07:59.866 A:middle
and the engineer kind of
ignores what you're saying.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:01.296 --> 00:08:04.246 A:middle
I want to just assure
you, this is not the case.

00:08:04.606 --> 00:08:05.426 A:middle
One of the first things I did

00:08:05.426 --> 00:08:07.016 A:middle
when I joined Apple
is I did a search

00:08:07.336 --> 00:08:10.526 A:middle
in the bug tracking system,
the issue tracking system,

00:08:10.856 --> 00:08:14.386 A:middle
to find all the issues that I
filed as an external developer.

00:08:14.386 --> 00:08:15.366 A:middle
And a lot of them had traction.

00:08:15.566 --> 00:08:17.256 A:middle
I just didn't have any
feedback from them.

00:08:17.706 --> 00:08:19.406 A:middle
So, I wanted to show you
that if you do file a bug,

00:08:19.526 --> 00:08:20.306 A:middle
we do look at them.

00:08:21.666 --> 00:08:23.546 A:middle
The other thing that I find
is you might spend a lot

00:08:23.546 --> 00:08:24.336 A:middle
of time filing a bug.

00:08:25.376 --> 00:08:27.126 A:middle
A lot of time maybe you're
making some sample code.

00:08:27.126 --> 00:08:29.606 A:middle
You're trying a couple
different devices.

00:08:29.606 --> 00:08:30.666 A:middle
You're checking for regression.

00:08:30.666 --> 00:08:31.806 A:middle
Like, that's great stuff to do.

00:08:32.066 --> 00:08:33.976 A:middle
It takes you maybe half
an hour or maybe an hour,

00:08:34.015 --> 00:08:36.385 A:middle
and then you file
it and it comes back

00:08:36.385 --> 00:08:37.116 A:middle
and it says it's a dupe.

00:08:37.895 --> 00:08:39.525 A:middle
And you're like, oh, I
just wasted half an hour,

00:08:39.525 --> 00:08:42.486 A:middle
hour my life for something
that somebody else already did.

00:08:43.476 --> 00:08:45.136 A:middle
So, I just want to
briefly talk about dupes.

00:08:46.516 --> 00:08:49.596 A:middle
Because dupes first of all
are not a voting system.

00:08:49.596 --> 00:08:51.956 A:middle
It's not like if you copy
somebody else's bug verbatim

00:08:52.146 --> 00:08:54.256 A:middle
and you file a new bug with
exactly the same thing and it,

00:08:54.476 --> 00:08:55.876 A:middle
we're going to say oh,
there's another vote for that,

00:08:55.876 --> 00:08:56.716 A:middle
we should fix that first.

00:08:56.716 --> 00:08:57.846 A:middle
It's not quite like that.

00:08:58.946 --> 00:09:01.026 A:middle
What we do do with them though,
even though they're a dupe,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.946 --> 00:09:01.026 A:middle
What we do do with them though,
even though they're a dupe,

00:09:01.376 --> 00:09:02.666 A:middle
it just means these
two are related.

00:09:03.546 --> 00:09:06.116 A:middle
We need dupes too, not
for voting purposes

00:09:06.426 --> 00:09:09.906 A:middle
but because we can have five
people file the same root bug,

00:09:10.046 --> 00:09:10.736 A:middle
same root issue.

00:09:11.706 --> 00:09:15.646 A:middle
The first four don't give
us enough information

00:09:15.646 --> 00:09:16.326 A:middle
to be able to find it.

00:09:17.026 --> 00:09:20.436 A:middle
But maybe it's your report,
maybe it's your fifth one which,

00:09:20.436 --> 00:09:23.476 A:middle
albeit, is a dupe, but
has the information in it

00:09:23.476 --> 00:09:24.926 A:middle
that we need to find the issue.

00:09:26.386 --> 00:09:29.726 A:middle
In fact, an Apple engineer
that's been with the company

00:09:29.726 --> 00:09:36.316 A:middle
for gosh, a couple decades,
made a quip a couple weeks ago.

00:09:36.826 --> 00:09:41.316 A:middle
Paul had said that each bug
report as its host link.

00:09:42.406 --> 00:09:42.776 A:middle
All right.

00:09:43.236 --> 00:09:44.626 A:middle
So, in summary, things
to get going today.

00:09:44.976 --> 00:09:45.646 A:middle
Fix your warnings.

00:09:45.646 --> 00:09:46.806 A:middle
Replace your deprecated API.

00:09:47.366 --> 00:09:50.106 A:middle
Localize your App if
it hasn't already.

00:09:50.106 --> 00:09:51.306 A:middle
Use accessibility.

00:09:52.286 --> 00:09:53.756 A:middle
Or support accessibility rather.

00:09:53.756 --> 00:09:54.706 A:middle
Get Peek and Pop in there.

00:09:54.986 --> 00:09:56.956 A:middle
And then take a look at
the next release of Xcode

00:09:57.186 --> 00:09:58.586 A:middle
and give us some
feedback on that.

00:09:59.736 --> 00:10:01.366 A:middle
With that, let's move
onto Asset Catalogs.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.736 --> 00:10:01.366 A:middle
With that, let's move
onto Asset Catalogs.

00:10:03.706 --> 00:10:06.436 A:middle
It's time to move
onto Asset Catalogs.

00:10:07.366 --> 00:10:09.726 A:middle
For you. So, if you still have
files in your File Navigator

00:10:09.726 --> 00:10:14.366 A:middle
like this, go ahead and get them
into an Asset Catalog like that.

00:10:15.926 --> 00:10:20.396 A:middle
The approach is you add a
catalog from the File menu.

00:10:21.036 --> 00:10:24.026 A:middle
By the way, you don't have
to add just one catalog.

00:10:24.026 --> 00:10:26.026 A:middle
You can have as many catalogs
as you like in the project.

00:10:26.606 --> 00:10:31.646 A:middle
Maybe you're working on an app
and that app is a card game.

00:10:31.836 --> 00:10:34.666 A:middle
So, you have a catalog for
the front images of the cards

00:10:34.666 --> 00:10:36.736 A:middle
and a second catalog for the
back images of the cards.

00:10:36.866 --> 00:10:37.296 A:middle
We can do that.

00:10:38.296 --> 00:10:41.226 A:middle
Another example, you might have
your graphic designer download

00:10:41.226 --> 00:10:42.686 A:middle
Xcode for free from
the App Store

00:10:44.236 --> 00:10:45.636 A:middle
and create the Asset
Catalog for you.

00:10:46.606 --> 00:10:49.626 A:middle
And then send it to you or
check it into a code repository.

00:10:49.826 --> 00:10:50.416 A:middle
We could do that too.

00:10:51.716 --> 00:10:54.646 A:middle
When we copy files into an Asset
Catalog, they are exactly that.

00:10:54.646 --> 00:10:55.256 A:middle
They are copies.

00:10:55.456 --> 00:10:57.426 A:middle
We don't reference the
original location ever.

00:10:57.766 --> 00:10:59.196 A:middle
So, they do participate
in version control.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:02.436 --> 00:11:05.086 A:middle
To migrate your project,
you tap the big plus button.

00:11:05.866 --> 00:11:07.056 A:middle
Choose Import From Project.

00:11:07.456 --> 00:11:10.976 A:middle
We're going to give you
a list of all the Assets

00:11:10.976 --> 00:11:14.286 A:middle
that are eligible to be
migrated from the File Navigator

00:11:14.286 --> 00:11:15.526 A:middle
into the Asset Catalog.

00:11:18.256 --> 00:11:18.866 A:middle
There you go.

00:11:19.286 --> 00:11:20.736 A:middle
You migrated your image Assets.

00:11:22.016 --> 00:11:25.516 A:middle
If you previously used
to use the bundle API,

00:11:25.876 --> 00:11:28.176 A:middle
pathForResource etc.,
that doesn't work anymore

00:11:28.176 --> 00:11:29.496 A:middle
because once we compile the app,

00:11:29.766 --> 00:11:31.286 A:middle
the images aren't
free-floating around anymore.

00:11:31.426 --> 00:11:33.626 A:middle
So you won't find anything.

00:11:34.306 --> 00:11:38.556 A:middle
But if you're using image named,
then we'll find them if they're

00:11:38.556 --> 00:11:40.676 A:middle
in an Asset Catalog
and we'll find them

00:11:40.676 --> 00:11:43.876 A:middle
if they're just free-floating
in your File Navigator still.

00:11:44.286 --> 00:11:45.446 A:middle
This API has been
around for a while.

00:11:45.646 --> 00:11:48.616 A:middle
This API Image Name has
a lot of advantages above

00:11:48.616 --> 00:11:50.506 A:middle
and beyond just being
able to find content

00:11:50.506 --> 00:11:51.326 A:middle
from an image catalog.

00:11:52.136 --> 00:11:52.836 A:middle
Asset Catalog.

00:11:53.506 --> 00:11:55.796 A:middle
For example, it internally
caches the first time

00:11:55.796 --> 00:11:57.156 A:middle
that you asked for
an image by name.

00:11:57.326 --> 00:11:58.846 A:middle
We load it up, we give
you back a reference.

00:11:58.846 --> 00:12:00.616 A:middle
The second time you ask
for the same image by name,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.846 --> 00:12:00.616 A:middle
The second time you ask
for the same image by name,

00:12:00.616 --> 00:12:02.436 A:middle
we just return another
reference to the same thing.

00:12:03.366 --> 00:12:06.036 A:middle
That's not how the
contents of file API works.

00:12:06.186 --> 00:12:08.066 A:middle
Contents of file loads
new images every time.

00:12:08.596 --> 00:12:10.566 A:middle
So, it's much more perform an,
especially when you're scrolling

00:12:10.566 --> 00:12:12.406 A:middle
through a table,
to use image names.

00:12:12.856 --> 00:12:16.816 A:middle
We support multiple
representations of an asset.

00:12:17.166 --> 00:12:21.286 A:middle
So, with image names, you'd
give it a name, the API name.

00:12:22.206 --> 00:12:24.076 A:middle
You'd let the framework
consider the device

00:12:24.076 --> 00:12:25.496 A:middle
that you're running on.

00:12:26.076 --> 00:12:29.526 A:middle
Consider the resolution of the
display, retina, non-retina,

00:12:29.526 --> 00:12:30.806 A:middle
retina on a Plus device.

00:12:31.366 --> 00:12:36.036 A:middle
And possibly other
differentiating factors

00:12:36.136 --> 00:12:39.196 A:middle
for the media assets such as the
amount of memory in the device

00:12:39.556 --> 00:12:42.736 A:middle
or the version of Metal that
is supported in the device.

00:12:43.266 --> 00:12:45.866 A:middle
And you get an image back.

00:12:47.286 --> 00:12:49.866 A:middle
There's two broad kinds
of asset types for images

00:12:49.866 --> 00:12:50.936 A:middle
that you can consider.

00:12:50.936 --> 00:12:52.086 A:middle
We have scaled images.

00:12:52.286 --> 00:12:55.096 A:middle
Those are like PNG's, JPEG's.

00:12:55.096 --> 00:12:58.226 A:middle
And then we have
single vector images

00:12:58.226 --> 00:13:01.316 A:middle
or just vector-based
images, like PDFs or SPG's.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.226 --> 00:13:01.316 A:middle
or just vector-based
images, like PDFs or SPG's.

00:13:01.316 --> 00:13:05.476 A:middle
We treat them a little
bit differently.

00:13:06.056 --> 00:13:08.636 A:middle
On an asset by asset basis,
you can say this asset's going

00:13:08.636 --> 00:13:11.066 A:middle
to be vector-based and that
asset's going to be scale.

00:13:12.256 --> 00:13:14.156 A:middle
You do that by specifying
the scale factor.

00:13:14.726 --> 00:13:18.356 A:middle
So, I'm going to talk first
about some of the scaled images

00:13:18.596 --> 00:13:20.616 A:middle
and then move onto the
vector-based images.

00:13:21.346 --> 00:13:24.656 A:middle
For scaled images, in this
example we're asking you

00:13:24.656 --> 00:13:26.876 A:middle
to provide three different
renderings of the artwork

00:13:26.876 --> 00:13:30.306 A:middle
from 1X devices,
non-retina, 2X and 3X.

00:13:31.126 --> 00:13:33.516 A:middle
If we don't find, because
you didn't include it,

00:13:34.446 --> 00:13:37.626 A:middle
the 2X and 3X, we'll take the 1X
image and we'll scale it up so

00:13:37.626 --> 00:13:40.186 A:middle
that it becomes, well,
an image that's used

00:13:40.186 --> 00:13:46.316 A:middle
on the higher end devices or
the higher density devices.

00:13:46.416 --> 00:13:49.746 A:middle
Likewise, if you just
provided us with 3X artwork,

00:13:49.746 --> 00:13:51.116 A:middle
we'd scale it down at runtime.

00:13:52.286 --> 00:13:54.416 A:middle
These two scenarios
aren't that great.

00:13:54.656 --> 00:13:56.916 A:middle
In this scenario, if I take
the 1X image and I scale it

00:13:56.916 --> 00:14:00.366 A:middle
up for an iPhone 6S Plus, it's
going to look really jaggy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:56.916 --> 00:14:00.366 A:middle
up for an iPhone 6S Plus, it's
going to look really jaggy.

00:14:00.366 --> 00:14:02.186 A:middle
It's going to have a visual
artifact called aliasing.

00:14:02.216 --> 00:14:04.546 A:middle
It's not very desirable
and the, well,

00:14:04.546 --> 00:14:05.946 A:middle
your customers aren't
going to enjoy it.

00:14:07.496 --> 00:14:09.606 A:middle
This one, at first
glance you might think oh,

00:14:09.606 --> 00:14:11.706 A:middle
I'll just provide the 3X artwork
and let you scale it down.

00:14:12.876 --> 00:14:15.136 A:middle
But there's a huge problem
with that because to scale

00:14:15.136 --> 00:14:17.766 A:middle
down a 3X image, we
have to open a 3X image.

00:14:18.136 --> 00:14:18.896 A:middle
And it's really big.

00:14:19.746 --> 00:14:23.156 A:middle
And then we take an
extraction of the pixels

00:14:23.156 --> 00:14:25.266 A:middle
and create a scaled-down
version for it.

00:14:26.466 --> 00:14:29.356 A:middle
It's an order, two orders of
magnitude, possibly larger.

00:14:30.466 --> 00:14:31.186 A:middle
So, consider this.

00:14:32.456 --> 00:14:35.536 A:middle
You're on a device
like a 5S, 5C.

00:14:36.296 --> 00:14:38.026 A:middle
There's no need for
3X images on it

00:14:38.636 --> 00:14:40.086 A:middle
but you only provide 3X images.

00:14:40.846 --> 00:14:42.776 A:middle
So, we start off with the
baseline of memory in use.

00:14:43.776 --> 00:14:47.026 A:middle
That's fine, but then we
have to load up the 3X image,

00:14:47.266 --> 00:14:48.876 A:middle
down convert it, get
rid of the 3X image

00:14:49.056 --> 00:14:50.836 A:middle
and keep this scaled-down
version of it,

00:14:51.276 --> 00:14:53.186 A:middle
which just temporarily
creates a memory spike.

00:14:53.186 --> 00:14:56.166 A:middle
And if you're good, it's
probably going to be fine.

00:14:56.166 --> 00:14:57.236 A:middle
But if you good, I mean

00:14:57.236 --> 00:15:01.556 A:middle
if you're lucky it's
going to be fine.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.236 --> 00:15:01.556 A:middle
if you're lucky it's
going to be fine.

00:15:01.616 --> 00:15:03.466 A:middle
But let's say you're
scrolling at a table view

00:15:03.656 --> 00:15:05.526 A:middle
and as you're scrolling,
we have to do this a lot.

00:15:05.846 --> 00:15:07.286 A:middle
All of a sudden the
memory utilization

00:15:07.286 --> 00:15:09.496 A:middle
for your app balloons
and then what happens

00:15:09.496 --> 00:15:10.356 A:middle
when you use too much memory?

00:15:11.086 --> 00:15:13.656 A:middle
Anybody know, just
say it out loud.

00:15:13.956 --> 00:15:14.576 A:middle
Yeah, right.

00:15:14.576 --> 00:15:15.616 A:middle
We terminate it.

00:15:15.616 --> 00:15:18.336 A:middle
It's terminated because you
didn't provide the artwork.

00:15:18.536 --> 00:15:19.696 A:middle
So, provide the artwork.

00:15:20.136 --> 00:15:22.896 A:middle
In fact, you can do this
really easily with the task or,

00:15:23.116 --> 00:15:25.256 A:middle
not a task but with
an Automator workflow.

00:15:25.816 --> 00:15:28.526 A:middle
You give it a 3X image, let it
scale it down, give it a name.

00:15:28.526 --> 00:15:29.686 A:middle
Scale it down, give it a name.

00:15:29.776 --> 00:15:31.666 A:middle
Great, throw those all
into your Asset Catalog.

00:15:32.016 --> 00:15:33.776 A:middle
And if you wanted to, you could,

00:15:34.316 --> 00:15:36.986 A:middle
and this is another
best practice.

00:15:36.986 --> 00:15:38.176 A:middle
Use this naming convention,

00:15:38.586 --> 00:15:41.316 A:middle
the non-retina ones is
just a line justify.PNG.

00:15:41.316 --> 00:15:44.336 A:middle
And then add 2X and
add 3X the other two.

00:15:45.016 --> 00:15:46.556 A:middle
And then when you drag
and drop the three of them

00:15:46.556 --> 00:15:49.506 A:middle
into an Asset Catalog, we
detect a naming convention.

00:15:49.506 --> 00:15:51.856 A:middle
We create one asset with the
three different representations

00:15:52.316 --> 00:15:53.886 A:middle
as opposed to three
separate assets.

00:15:55.096 --> 00:15:57.426 A:middle
For Vector Assets,
Vector Assets are amazing

00:15:57.426 --> 00:15:59.926 A:middle
because the file contains a
set of instructions on how

00:15:59.926 --> 00:16:03.366 A:middle
to draw the image as opposed
to having it pre-rasturized.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.926 --> 00:16:03.366 A:middle
to draw the image as opposed
to having it pre-rasturized.

00:16:04.246 --> 00:16:06.326 A:middle
This is the same image, not
three different versions of it.

00:16:06.406 --> 00:16:09.376 A:middle
Same image scaled
to different sizes.

00:16:09.546 --> 00:16:10.616 A:middle
When you specify
that you're going

00:16:10.616 --> 00:16:12.406 A:middle
to use single vector scaling,

00:16:12.476 --> 00:16:14.096 A:middle
you're providing one
vector-based image.

00:16:14.276 --> 00:16:16.256 A:middle
And at build time,
we rasterize it

00:16:16.256 --> 00:16:17.626 A:middle
into the different
sizes that we need.

00:16:18.706 --> 00:16:19.866 A:middle
It's much simpler for you.

00:16:19.866 --> 00:16:22.946 A:middle
This is the kind of thing you'd
likely do for toolbar images

00:16:22.946 --> 00:16:24.366 A:middle
and navigation bar images.

00:16:25.696 --> 00:16:27.456 A:middle
There you go, scale
factor single vector.

00:16:28.516 --> 00:16:30.576 A:middle
It's also possible
to combine both.

00:16:31.826 --> 00:16:36.046 A:middle
You can set the scale factor
to be vector and scales.

00:16:36.546 --> 00:16:38.486 A:middle
And what you do is you provide
us a vector-based image,

00:16:38.486 --> 00:16:40.606 A:middle
like the limits in
the well called All.

00:16:41.686 --> 00:16:43.776 A:middle
Then, if you want
to do any over-rides

00:16:43.776 --> 00:16:46.476 A:middle
for the other scale factors,
you just provide those

00:16:46.476 --> 00:16:50.836 A:middle
as either other vector images
or PNG's, JPEG scaled images.

00:16:52.276 --> 00:16:54.946 A:middle
Then when we build it, if we see
that you're missing some assets,

00:16:55.086 --> 00:16:57.756 A:middle
we'll just rasterize those
based on the vector image that's

00:16:57.756 --> 00:17:00.046 A:middle
in the All truck well or target.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.756 --> 00:17:00.046 A:middle
in the All truck well or target.

00:17:01.076 --> 00:17:02.846 A:middle
Otherwise, we'll use the
scaled ones that are provided.

00:17:03.376 --> 00:17:08.376 A:middle
New in Xcode 8, you can
adjust the compression.

00:17:10.955 --> 00:17:11.616 A:middle
Come on, you.

00:17:12.226 --> 00:17:13.116 A:middle
You can adjust the compression.

00:17:13.496 --> 00:17:15.356 A:middle
So, we can say for a
JPEG image you want

00:17:15.356 --> 00:17:17.246 A:middle
to use glossy compression
but maybe

00:17:17.246 --> 00:17:19.046 A:middle
for a PNG we don't want
any compression all

00:17:19.046 --> 00:17:21.106 A:middle
because it's going to be
an item in the toolbar.

00:17:21.185 --> 00:17:22.685 A:middle
We don't want to see
any artifacts with that.

00:17:24.096 --> 00:17:26.195 A:middle
Another issue you can resolve
by using Asset Catalogs,

00:17:26.336 --> 00:17:27.896 A:middle
just in case the pitch
isn't strong enough yet,

00:17:28.546 --> 00:17:31.946 A:middle
is to fix the issue or
resolve some issues.

00:17:31.946 --> 00:17:35.236 A:middle
We're referring to
rounded corners.

00:17:36.596 --> 00:17:39.266 A:middle
The issue with rounded
corners is we have adaptive UI.

00:17:39.896 --> 00:17:43.486 A:middle
So, your button might
contain a text label

00:17:43.486 --> 00:17:46.746 A:middle
that fits perfectly well
until the app is run

00:17:46.746 --> 00:17:49.096 A:middle
in a different language and
then it changes the size.

00:17:49.626 --> 00:17:51.386 A:middle
And when we change the size
of the button, we still want

00:17:51.386 --> 00:17:54.206 A:middle
to preserve the beautiful
rounded corners on it.

00:17:55.456 --> 00:17:57.206 A:middle
The way you would even
get a rounded button

00:17:57.206 --> 00:17:58.596 A:middle
in the first place is

00:17:58.596 --> 00:18:00.346 A:middle
in Interface Builder
you'd select a button


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.596 --> 00:18:00.346 A:middle
in Interface Builder
you'd select a button

00:18:00.346 --> 00:18:02.216 A:middle
and specify a background image.

00:18:03.006 --> 00:18:04.356 A:middle
And then we apply that
as the background.

00:18:04.936 --> 00:18:11.066 A:middle
In this example, I have an
asset called rounded rectangle

00:18:12.576 --> 00:18:14.766 A:middle
and I apply that as my
background rectangle

00:18:14.766 --> 00:18:16.516 A:middle
but you can see in the
two sizes of the button,

00:18:16.516 --> 00:18:20.066 A:middle
when it's stretched out it's
really horrible looking.

00:18:22.356 --> 00:18:24.516 A:middle
So, one way you can
fix this is the way

00:18:24.516 --> 00:18:25.796 A:middle
that you've been
fixing it all along

00:18:25.796 --> 00:18:27.156 A:middle
which is using Stretchable
Image.

00:18:28.186 --> 00:18:29.796 A:middle
And you say well, I want
to preserve X number

00:18:29.796 --> 00:18:30.756 A:middle
of pixels on both sides.

00:18:32.136 --> 00:18:33.866 A:middle
And that's fine but
one of the themes

00:18:33.866 --> 00:18:36.426 A:middle
of this presentation is
having you write less code

00:18:36.426 --> 00:18:38.616 A:middle
and rely more on the frameworks
and the tools that we provide.

00:18:39.586 --> 00:18:42.446 A:middle
So, instead this is built
into the Asset Editor.

00:18:42.726 --> 00:18:43.636 A:middle
It's called Asset Slicer.

00:18:44.536 --> 00:18:47.686 A:middle
And you can use it to
specify that, the portions

00:18:47.686 --> 00:18:49.436 A:middle
in red, don't stretch these.

00:18:50.066 --> 00:18:51.416 A:middle
Don't distort them.

00:18:52.076 --> 00:18:54.986 A:middle
The portion that's illuminated,
repeat these pixels.

00:18:55.996 --> 00:18:58.436 A:middle
And by doing that, you get
perfect rounded corners

00:18:58.436 --> 00:18:59.636 A:middle
and you don't have to
do any code for it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:00.696 --> 00:19:03.006 A:middle
This is also something you could
have your graphic designer do

00:19:03.006 --> 00:19:04.296 A:middle
because it's part
of an Asset Catalog.

00:19:04.296 --> 00:19:06.966 A:middle
All right, next up, let's talk

00:19:06.966 --> 00:19:09.686 A:middle
about a design pattern
called Dependency Injection.

00:19:10.566 --> 00:19:13.026 A:middle
Let's first of all talk about
what we're kind of fixing

00:19:13.026 --> 00:19:16.206 A:middle
or trying to change
by introducing this.

00:19:16.406 --> 00:19:18.736 A:middle
So, we have UITextField and
it works with the delegate

00:19:18.736 --> 00:19:21.096 A:middle
and the delegate is called
UITextField delegate.

00:19:21.226 --> 00:19:23.336 A:middle
Fine. And in it, it
contains methods that relate

00:19:23.336 --> 00:19:25.506 A:middle
to text fields, like
textFieldShouldBeginEditing.

00:19:26.266 --> 00:19:30.046 A:middle
Okay? We have WCSession.

00:19:30.516 --> 00:19:31.636 A:middle
And WCSession delegate.

00:19:31.636 --> 00:19:32.456 A:middle
What's inside the delegate?

00:19:32.566 --> 00:19:34.126 A:middle
Methods that relate
to WCSession.

00:19:34.666 --> 00:19:35.636 A:middle
You can see the pattern here.

00:19:36.146 --> 00:19:38.716 A:middle
Which we break with this one.

00:19:39.356 --> 00:19:43.036 A:middle
We have the app delegate
and of course it has methods

00:19:43.036 --> 00:19:44.676 A:middle
that relate to the
application object.

00:19:45.346 --> 00:19:48.706 A:middle
But then we stick other stuff
in there too like databases

00:19:48.706 --> 00:19:50.826 A:middle
and essentially eventually
you have everything

00:19:50.826 --> 00:19:53.096 A:middle
in there including the
kitchen sink just piling up.

00:19:53.366 --> 00:19:56.196 A:middle
And we do it because it's
really easy to reach back

00:19:56.576 --> 00:19:58.446 A:middle
through the Application
object, get the shared object,

00:19:58.446 --> 00:19:59.756 A:middle
cast it and retrieve it.

00:19:59.916 --> 00:20:03.486 A:middle
But it's such a strong coupling
between your view controllers


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.916 --> 00:20:03.486 A:middle
But it's such a strong coupling
between your view controllers

00:20:03.826 --> 00:20:06.466 A:middle
and your app delegate and your
app delegate doesn't really need

00:20:06.466 --> 00:20:07.796 A:middle
to be the place where that goes.

00:20:08.286 --> 00:20:11.726 A:middle
Instead of a pattern like this

00:20:12.026 --> 00:20:13.456 A:middle
where each view controller
reaches back

00:20:13.456 --> 00:20:15.276 A:middle
to some common object,
maybe that you're storing

00:20:15.276 --> 00:20:17.756 A:middle
in your app delegate,
you could switch it.

00:20:19.136 --> 00:20:21.936 A:middle
Using Dependency Injection,
you take the model object

00:20:22.186 --> 00:20:24.246 A:middle
that one view controller
has and you pass it forward

00:20:24.246 --> 00:20:25.696 A:middle
to the next view
controller at the time

00:20:25.696 --> 00:20:26.916 A:middle
that view controller
is presented.

00:20:27.556 --> 00:20:29.706 A:middle
The idea is you give the
view control everything

00:20:29.706 --> 00:20:31.776 A:middle
that it needs to do its job.

00:20:33.716 --> 00:20:36.396 A:middle
So, for mail, you'd have
a list of mailboxes.

00:20:36.966 --> 00:20:38.176 A:middle
A view controller
that shows a list

00:20:38.176 --> 00:20:40.566 A:middle
of mailboxes would have a model
object representing an array

00:20:40.566 --> 00:20:41.406 A:middle
of mailboxes.

00:20:41.796 --> 00:20:43.466 A:middle
You tap on one of the mailboxes.

00:20:43.906 --> 00:20:46.716 A:middle
Another view controller's
going to present

00:20:46.716 --> 00:20:48.226 A:middle
to show the messages
in that mailbox.

00:20:48.786 --> 00:20:49.276 A:middle
The middle one.

00:20:49.536 --> 00:20:51.936 A:middle
And you pass forward the one
mailbox and it shows those

00:20:51.936 --> 00:20:52.936 A:middle
and you keep passing it forward.

00:20:53.496 --> 00:20:58.646 A:middle
The way you would do that in
a segue is to override prepare

00:20:58.646 --> 00:21:00.006 A:middle
for segue and pass
it for repair.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.646 --> 00:21:00.006 A:middle
for segue and pass
it for repair.

00:21:00.556 --> 00:21:02.176 A:middle
The way you would do it

00:21:02.176 --> 00:21:04.806 A:middle
if you were programmatically
presenting is in the action

00:21:04.806 --> 00:21:06.576 A:middle
for the button viewed
in instantiate.

00:21:06.576 --> 00:21:08.886 A:middle
The view controller,
pass model object there.

00:21:10.496 --> 00:21:14.556 A:middle
The benefit of this technique
is your view controllers are

00:21:14.556 --> 00:21:15.706 A:middle
standalone now.

00:21:15.706 --> 00:21:17.826 A:middle
They don't have these strong
ties and dependencies.

00:21:18.026 --> 00:21:19.176 A:middle
You can reuse them more.

00:21:23.036 --> 00:21:24.856 A:middle
Coming back, you've
got some choices.

00:21:25.236 --> 00:21:27.946 A:middle
You can do what we do, which
is often to write a protocol

00:21:27.946 --> 00:21:30.346 A:middle
and have you implement it
so that there's a call back

00:21:30.346 --> 00:21:31.546 A:middle
to say the view controller's
dismissed

00:21:31.546 --> 00:21:32.906 A:middle
and maybe update
your model there.

00:21:33.046 --> 00:21:34.346 A:middle
You can pass in a closure.

00:21:34.796 --> 00:21:36.976 A:middle
You can pass object
models by reference.

00:21:37.336 --> 00:21:40.236 A:middle
Or, you can, if you're
using online segues,

00:21:40.236 --> 00:21:42.446 A:middle
it's exactly the same as
overwriting prepare for segue

00:21:42.446 --> 00:21:43.936 A:middle
because it happens in both ways,

00:21:44.126 --> 00:21:45.556 A:middle
forward directions
and back directions.

00:21:46.996 --> 00:21:49.526 A:middle
Another reason why
we like this is

00:21:49.526 --> 00:21:51.986 A:middle
because view controllers are
pretty much like Lego blocks.

00:21:52.876 --> 00:21:55.486 A:middle
They should be able to be
rearranged independently

00:21:55.486 --> 00:21:57.436 A:middle
of each other to
create new structures.

00:21:57.786 --> 00:22:01.826 A:middle
In this case, an iPhone SE's
overall user experience is going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.786 --> 00:22:01.826 A:middle
In this case, an iPhone SE's
overall user experience is going

00:22:01.826 --> 00:22:03.716 A:middle
to be different for your
app than it would be

00:22:03.716 --> 00:22:07.136 A:middle
on an iPad 12 inch,
iPadPro 12 inch.

00:22:08.126 --> 00:22:09.646 A:middle
If your view controllers
are independent,

00:22:09.646 --> 00:22:12.236 A:middle
it's easy to do that.

00:22:12.236 --> 00:22:12.556 A:middle
All right.

00:22:13.076 --> 00:22:17.266 A:middle
Now, last year at WWDC,
I gave a presentation

00:22:17.766 --> 00:22:22.436 A:middle
on topics including playgrounds
and modernizing the UI.

00:22:23.516 --> 00:22:26.426 A:middle
And interoperability with
Objective-C and Swift.

00:22:26.996 --> 00:22:31.426 A:middle
And since then, we've added
things to the playgrounds,

00:22:31.626 --> 00:22:32.886 A:middle
things that we couldn't
do last year.

00:22:32.886 --> 00:22:34.706 A:middle
So, I want to show you
some of those things.

00:22:35.376 --> 00:22:39.166 A:middle
With that, we're going
to move to a demo.

00:22:39.536 --> 00:22:42.416 A:middle
So, this is the periodic
table of elements app

00:22:42.416 --> 00:22:43.296 A:middle
that I showed you last year.

00:22:43.506 --> 00:22:45.366 A:middle
Since then, it's been
updated a little bit.

00:22:45.366 --> 00:22:49.196 A:middle
For example, the colors
have changed a bit.

00:22:49.346 --> 00:22:51.786 A:middle
Instead of using states
of matter, gas, liquid,

00:22:51.786 --> 00:22:55.166 A:middle
now it's the kind of object
like a transition metal, metal,

00:22:55.166 --> 00:22:57.436 A:middle
halogen, that kind of thing.

00:22:57.436 --> 00:22:59.006 A:middle
We've also added
support to render it

00:22:59.006 --> 00:23:01.826 A:middle
out so it actually looks like
a periodic table of elements


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.006 --> 00:23:01.826 A:middle
out so it actually looks like
a periodic table of elements

00:23:02.136 --> 00:23:04.146 A:middle
and that's a collection
view doing that.

00:23:06.056 --> 00:23:13.426 A:middle
I want to show you
some of the code.

00:23:13.636 --> 00:23:15.476 A:middle
One of the things that
changed with this code base

00:23:15.476 --> 00:23:17.656 A:middle
since the last time
that you saw it is

00:23:17.656 --> 00:23:19.796 A:middle
that the data model has
moved over to Swift.

00:23:20.756 --> 00:23:24.566 A:middle
So now I have a class the
represents an atomic element

00:23:24.866 --> 00:23:26.526 A:middle
like nitrogen or oxygen.

00:23:27.206 --> 00:23:29.796 A:middle
And I have a class that
represents a collection

00:23:30.266 --> 00:23:33.056 A:middle
of those called, excuse
me, periodic elements.

00:23:34.356 --> 00:23:37.456 A:middle
This class instantiates
the elements,

00:23:37.456 --> 00:23:40.636 A:middle
the individual atomic elements,
by reading in a property list.

00:23:41.556 --> 00:23:43.826 A:middle
Which I've also stored
in my app here.

00:23:44.396 --> 00:23:48.376 A:middle
But now that I've moved
the data model to Swift,

00:23:48.746 --> 00:23:50.596 A:middle
I can show you the data
model in a playground.

00:23:51.176 --> 00:23:53.326 A:middle
Last year when I did
this, I'm just going

00:23:53.326 --> 00:23:54.646 A:middle
to make a new playground first.

00:23:55.566 --> 00:23:56.736 A:middle
New file, playground.

00:23:57.576 --> 00:24:01.836 A:middle
Last year when I did
this, I was copying,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.576 --> 00:24:01.836 A:middle
Last year when I did
this, I was copying,

00:24:01.836 --> 00:24:04.616 A:middle
pasting between my
code and my playground.

00:24:05.186 --> 00:24:08.976 A:middle
And when you do this a lot, your
playground can become really big

00:24:08.976 --> 00:24:09.976 A:middle
with a lot of code in it.

00:24:09.976 --> 00:24:13.136 A:middle
So, instead our playgrounds
now have subfolders

00:24:14.206 --> 00:24:15.816 A:middle
for source code and resources.

00:24:16.366 --> 00:24:20.996 A:middle
I can take my model
objects and put them

00:24:20.996 --> 00:24:22.006 A:middle
into the sources folder.

00:24:22.586 --> 00:24:26.196 A:middle
And then we compile
them behind the scenes

00:24:26.746 --> 00:24:29.386 A:middle
and we implicitly import
all of their public symbols

00:24:29.386 --> 00:24:31.976 A:middle
into the playground to make
them available for you.

00:24:33.556 --> 00:24:37.796 A:middle
Which means if I take this
resource file, my property list,

00:24:37.846 --> 00:24:39.666 A:middle
and include that in
the resources folder

00:24:39.906 --> 00:24:41.726 A:middle
which makes it accessible
to the playground,

00:24:42.336 --> 00:24:48.486 A:middle
I can come over to
the playground here

00:24:48.486 --> 00:24:51.806 A:middle
and instantiate an instance
of the atomic elements.

00:24:53.086 --> 00:24:54.036 A:middle
Here's Californium.

00:24:54.906 --> 00:24:57.236 A:middle
Like that.

00:24:58.416 --> 00:25:01.676 A:middle
So, the ability to
take these source files


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.416 --> 00:25:01.676 A:middle
So, the ability to
take these source files

00:25:02.086 --> 00:25:04.956 A:middle
and have them automatically
imported into your project

00:25:05.636 --> 00:25:07.076 A:middle
when they're in the
sources folder

00:25:07.076 --> 00:25:09.756 A:middle
or the resources folder is a
pretty, I think powerful way

00:25:10.186 --> 00:25:12.336 A:middle
to keep your playgrounds
themselves small

00:25:12.336 --> 00:25:16.666 A:middle
and concise while also having
more content inside of them.

00:25:16.866 --> 00:25:18.816 A:middle
Now, above and beyond that,
something else happened

00:25:18.816 --> 00:25:23.926 A:middle
since last year that affects
this app in particular.

00:25:24.306 --> 00:25:27.056 A:middle
The International Union of Pure

00:25:27.056 --> 00:25:31.056 A:middle
and Applied Chemistry
confirmed the discovery

00:25:31.056 --> 00:25:32.846 A:middle
of 4 additional elements.

00:25:33.736 --> 00:25:35.606 A:middle
So, now all of a sudden
this Property List file

00:25:35.606 --> 00:25:37.516 A:middle
that I've got embedded
inside my app doesn't seem

00:25:37.516 --> 00:25:38.836 A:middle
like such good idea anymore.

00:25:39.436 --> 00:25:42.756 A:middle
So, I thought well,
we can fix that.

00:25:42.756 --> 00:25:43.676 A:middle
We'll just put it online.

00:25:44.896 --> 00:25:48.746 A:middle
So I set up a little Web
server and put it a JSON file

00:25:48.746 --> 00:25:49.946 A:middle
at this time with
all the elements.

00:25:51.186 --> 00:25:53.746 A:middle
And then the idea is that
when my app launches,

00:25:54.266 --> 00:25:56.576 A:middle
initially it'll use the
embedded built-in data file.

00:25:57.246 --> 00:25:58.956 A:middle
That way if there's no
network connectivity,

00:25:58.956 --> 00:26:00.556 A:middle
there's still something
for the customer to see.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.956 --> 00:26:00.556 A:middle
there's still something
for the customer to see.

00:26:00.556 --> 00:26:03.716 A:middle
And this is also a pattern
we recommend that you do.

00:26:04.676 --> 00:26:06.286 A:middle
Then we'll do a background
check,

00:26:06.666 --> 00:26:07.936 A:middle
and in the background
we'll check to see

00:26:07.936 --> 00:26:09.326 A:middle
if there's an update
to the file.

00:26:09.326 --> 00:26:10.906 A:middle
And if so, we'll put
it in the caches folder

00:26:10.906 --> 00:26:13.726 A:middle
and we'll reference
that inside the app.

00:26:14.496 --> 00:26:16.576 A:middle
So, I want to do the network
request in the playground.

00:26:17.196 --> 00:26:21.416 A:middle
And for that, we have the class
formerly known as NSURL Session

00:26:21.416 --> 00:26:23.196 A:middle
and now known as URL Session.

00:26:24.056 --> 00:26:26.346 A:middle
Which is shown here.

00:26:26.956 --> 00:26:32.356 A:middle
We grabbed the Session and the
thing I like about the Session

00:26:32.356 --> 00:26:35.136 A:middle
when I call it out on line 24,

00:26:36.326 --> 00:26:37.936 A:middle
is I give it a completion
handler.

00:26:38.666 --> 00:26:40.676 A:middle
Because this runs asynchronously
in the background.

00:26:41.426 --> 00:26:43.586 A:middle
Go to the Network Request,
let my code continue to run.

00:26:44.826 --> 00:26:48.996 A:middle
When the request either times
out or the data comes in,

00:26:48.996 --> 00:26:50.766 A:middle
it gives us call back.

00:26:50.766 --> 00:26:52.486 A:middle
And in the call back on line 28,

00:26:53.646 --> 00:26:55.976 A:middle
you can see I'm printing
out one element here.

00:26:56.526 --> 00:27:01.176 A:middle
But you actually don't
see it over there.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:56.526 --> 00:27:01.176 A:middle
But you actually don't
see it over there.

00:27:02.356 --> 00:27:02.976 A:middle
That's a problem.

00:27:08.756 --> 00:27:10.336 A:middle
So, just think about
what's happening here.

00:27:10.956 --> 00:27:11.966 A:middle
We have a playground
that's running.

00:27:12.506 --> 00:27:14.146 A:middle
We asked it to do a
background operation.

00:27:14.806 --> 00:27:16.816 A:middle
At some indeterminate
time in the future,

00:27:17.316 --> 00:27:19.546 A:middle
we get a call back saying
this is what we want to do.

00:27:20.006 --> 00:27:22.206 A:middle
But playgrounds typically
execute like a script.

00:27:22.256 --> 00:27:23.486 A:middle
The first line all the way

00:27:23.486 --> 00:27:24.846 A:middle
through to the end
and they stop.

00:27:26.116 --> 00:27:27.156 A:middle
Key word being typically.

00:27:27.156 --> 00:27:28.366 A:middle
But they don't have to.

00:27:28.916 --> 00:27:31.546 A:middle
We can get a runloop and
have asynchronous operations

00:27:31.546 --> 00:27:32.336 A:middle
in our playgrounds.

00:27:33.316 --> 00:27:35.416 A:middle
To do that we import
a new module called

00:27:35.656 --> 00:27:36.306 A:middle
playground support.

00:27:37.426 --> 00:27:42.826 A:middle
And then you ask the playground
for indefinite execution.

00:27:42.826 --> 00:27:45.896 A:middle
And then it never stops,
it just keeps processing.

00:27:46.466 --> 00:27:49.706 A:middle
So, now if I scroll
down to this section,

00:27:49.706 --> 00:27:52.506 A:middle
you can see I'm getting
my callback.

00:27:53.196 --> 00:27:53.856 A:middle
There's cadmium.

00:27:53.946 --> 00:27:54.486 A:middle
All right.

00:27:57.076 --> 00:28:02.426 A:middle
Next I want to expand
on last year.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.076 --> 00:28:02.426 A:middle
Next I want to expand
on last year.

00:28:02.516 --> 00:28:04.636 A:middle
Last I showed a drawing,

00:28:04.636 --> 00:28:07.846 A:middle
a rounded corner
core graphics image.

00:28:08.956 --> 00:28:10.776 A:middle
This time I don't just want to
draw an image and preview it.

00:28:10.776 --> 00:28:13.276 A:middle
I want to do a whole table view
controller in the playground.

00:28:13.746 --> 00:28:17.476 A:middle
And we have some new features

00:28:17.476 --> 00:28:19.166 A:middle
in the playgrounds
that let us do this.

00:28:19.896 --> 00:28:24.366 A:middle
Let me just open up
some space in my app.

00:28:25.076 --> 00:28:27.716 A:middle
Call it View.

00:28:28.286 --> 00:28:33.406 A:middle
So, I'm going to make a subclass
of UI Table View Controller.

00:28:34.986 --> 00:28:40.826 A:middle
This is all that it
is, a selected area.

00:28:41.106 --> 00:28:43.086 A:middle
I'm implementing the 2
methods at every Table View

00:28:43.086 --> 00:28:44.896 A:middle
or Table View Controller
are required to have.

00:28:45.306 --> 00:28:49.036 A:middle
Number of objects, sorry,
rather number of items,

00:28:49.296 --> 00:28:51.996 A:middle
self-wrote index that and
returnings themselves.

00:28:52.526 --> 00:28:55.146 A:middle
And I'd like to see that live.

00:28:56.356 --> 00:28:59.696 A:middle
So, this time what we do is we
instantiate the view controller


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.626 --> 00:29:02.896 A:middle
and then using that
playground support module

00:29:03.066 --> 00:29:06.066 A:middle
that I've already imported, the
one that's right here on line 4,

00:29:06.706 --> 00:29:11.416 A:middle
I grab the playground's
Live View.

00:29:12.006 --> 00:29:16.956 A:middle
And then we take that
view and we render it

00:29:16.956 --> 00:29:19.746 A:middle
into the assistant editor who's
no longer an Assistant Editor

00:29:20.836 --> 00:29:22.226 A:middle
but rather our Live View.

00:29:29.446 --> 00:29:31.076 A:middle
See? It's a Live Table View.

00:29:31.556 --> 00:29:32.926 A:middle
It scrolls, it's active.

00:29:34.501 --> 00:29:36.501 A:middle
[ Applause ]

00:29:36.986 --> 00:29:37.266 A:middle
Thank you.

00:29:37.566 --> 00:29:38.816 A:middle
Is not just a static image.

00:29:39.296 --> 00:29:40.436 A:middle
It's a real interactive
table view.

00:29:40.436 --> 00:29:42.946 A:middle
If you wanted to try some
of our new delegate methods

00:29:42.946 --> 00:29:44.836 A:middle
or even the existent delegate
methods, you could throw them

00:29:44.836 --> 00:29:46.366 A:middle
into the playground and
now interact with them.

00:29:46.856 --> 00:29:50.476 A:middle
No need to put this into
the simulator anymore.

00:29:51.746 --> 00:29:53.476 A:middle
So, now I want to take the two
things and put them together.

00:29:54.606 --> 00:29:57.016 A:middle
Specifically, I have this
background network request

00:29:57.016 --> 00:29:57.636 A:middle
that's happening.

00:29:58.046 --> 00:30:00.606 A:middle
And after I retrieve the data,
I want to reload my table view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.046 --> 00:30:00.606 A:middle
And after I retrieve the data,
I want to reload my table view.

00:30:00.806 --> 00:30:09.226 A:middle
So, let me show you that.

00:30:09.396 --> 00:30:11.386 A:middle
First of all, comment this.

00:30:12.046 --> 00:30:15.386 A:middle
And just to prove to you that
it's totally loading the data

00:30:15.446 --> 00:30:19.216 A:middle
from that site, I'm
going to change this

00:30:19.686 --> 00:30:21.796 A:middle
so I have an empty
array of elements.

00:30:21.796 --> 00:30:22.506 A:middle
All right.

00:30:26.556 --> 00:30:28.916 A:middle
So, I have an empty
array of elements.

00:30:28.916 --> 00:30:30.066 A:middle
I do the network request.

00:30:30.836 --> 00:30:32.126 A:middle
When the network
request comes back

00:30:32.126 --> 00:30:35.006 A:middle
and it's call back, it's a sign.

00:30:35.566 --> 00:30:37.946 A:middle
The new array of elements
that I just pulled in.

00:30:38.546 --> 00:30:39.516 A:middle
And then we reload
the Table View.

00:30:40.096 --> 00:30:41.926 A:middle
All right.

00:30:51.126 --> 00:30:51.856 A:middle
Is that what you would expect?

00:30:51.856 --> 00:30:54.546 A:middle
It's not what I expected the
first time that I saw that.

00:30:55.036 --> 00:30:56.256 A:middle
Oh, that must be a bug in Xcode.

00:30:56.256 --> 00:30:58.066 A:middle
I'll just go file a bug
report at Apple.com.

00:30:58.066 --> 00:30:59.496 A:middle
But it's actually not.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.986 --> 00:31:03.186 A:middle
It's a bug in my code,
believe it or not.

00:31:03.426 --> 00:31:06.006 A:middle
It's a bug in my code and
here's what's happening.

00:31:06.976 --> 00:31:09.706 A:middle
We have this background
operation coming in.

00:31:10.526 --> 00:31:12.516 A:middle
The background operation
has a background operation.

00:31:12.766 --> 00:31:13.576 A:middle
It's not on the main thread.

00:31:14.246 --> 00:31:15.236 A:middle
UI is in the main thread.

00:31:16.096 --> 00:31:19.926 A:middle
So, in my closure, the
completion handler,

00:31:19.926 --> 00:31:21.716 A:middle
I can't be updating the
main thread from there,

00:31:22.136 --> 00:31:25.206 A:middle
which is what I'm trying to do
when I reload my Table View.

00:31:26.536 --> 00:31:31.136 A:middle
When I tap on the cells,
we are invalidating them

00:31:31.136 --> 00:31:32.266 A:middle
and that's why they do refresh

00:31:32.266 --> 00:31:36.086 A:middle
and you can see them
at that time.

00:31:36.296 --> 00:31:37.476 A:middle
This is also something
we can fix.

00:31:37.476 --> 00:31:40.316 A:middle
We have something new in
Swift 3, which is a Swift API

00:31:40.596 --> 00:31:42.096 A:middle
for Grand Central Dispatch.

00:31:43.936 --> 00:31:47.776 A:middle
So, instead of that
C API we had before,

00:31:48.386 --> 00:31:53.266 A:middle
I can now say a dispatch
cue, which cues the main cue.

00:31:53.546 --> 00:31:54.376 A:middle
What kind of operation?

00:31:54.376 --> 00:31:55.296 A:middle
An asynchronous one.

00:31:55.726 --> 00:31:56.556 A:middle
We don't need that anymore.

00:31:57.186 --> 00:31:58.776 A:middle
And here's what I wanted
to do on the main thread.

00:31:58.776 --> 00:32:04.176 A:middle
Now it bounces back to the
main thread and it's there.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.776 --> 00:32:04.176 A:middle
Now it bounces back to the
main thread and it's there.

00:32:06.676 --> 00:32:11.086 A:middle
Dispatch cue, thank you,
dispatch cue in Swift,

00:32:11.676 --> 00:32:14.496 A:middle
Live Views in Swift and
indefinite execution.

00:32:15.846 --> 00:32:17.726 A:middle
Let's switch back to the slides.

00:32:18.516 --> 00:32:20.566 A:middle
[ Applause ]

00:32:21.066 --> 00:32:21.446 A:middle
Thank you.

00:32:21.746 --> 00:32:24.546 A:middle
So, just as a point of
summary, there's the key points

00:32:24.546 --> 00:32:27.066 A:middle
from the previous presentation,
or the preset demonstration.

00:32:27.616 --> 00:32:30.266 A:middle
Some other tips.

00:32:30.746 --> 00:32:32.876 A:middle
When I dragged those files
into the sources folder

00:32:32.876 --> 00:32:34.576 A:middle
or the resources
folder, they are copied.

00:32:34.636 --> 00:32:37.176 A:middle
They are not referenced.

00:32:37.176 --> 00:32:40.796 A:middle
Also, only methods that are
marked as public, methods,

00:32:40.796 --> 00:32:42.316 A:middle
properties, and datatypes,
etc that are marked

00:32:42.316 --> 00:32:43.706 A:middle
as public are going
to be available

00:32:44.036 --> 00:32:44.976 A:middle
to you in the playground.

00:32:44.976 --> 00:32:46.866 A:middle
So, you might have to go
add some public specifiers

00:32:46.866 --> 00:32:48.716 A:middle
because the default
visibility specifier

00:32:48.716 --> 00:32:50.676 A:middle
in Swift is internal,
not public.

00:32:53.256 --> 00:32:55.586 A:middle
I mentioned using
a caches folder.

00:32:56.626 --> 00:32:58.816 A:middle
Now, we still have
some devices out there

00:32:58.816 --> 00:33:01.046 A:middle
that are constrained
storage wise.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.816 --> 00:33:01.046 A:middle
that are constrained
storage wise.

00:33:01.646 --> 00:33:03.706 A:middle
And those customers try
to updates to new versions

00:33:03.706 --> 00:33:05.116 A:middle
of the operating
system and they find

00:33:05.116 --> 00:33:06.226 A:middle
out there's not enough space.

00:33:07.116 --> 00:33:08.876 A:middle
So, what we do when that
happens, when the device is

00:33:08.876 --> 00:33:11.576 A:middle
under storage pressure, is we
go through the caches folders

00:33:11.576 --> 00:33:12.876 A:middle
and we delete everything
we can find

00:33:12.876 --> 00:33:14.436 A:middle
in all the applications
caches folders.

00:33:14.696 --> 00:33:15.966 A:middle
This way we free up space.

00:33:17.036 --> 00:33:18.326 A:middle
We need your help with this.

00:33:18.456 --> 00:33:20.376 A:middle
If you are temporarily
downloading data

00:33:20.376 --> 00:33:22.346 A:middle
and you're not putting
into caches folder,

00:33:22.656 --> 00:33:23.766 A:middle
put it in the caches folder.

00:33:24.246 --> 00:33:29.756 A:middle
Next. I thought it'd
be really neat to take,

00:33:30.416 --> 00:33:33.826 A:middle
it's doing that again.

00:33:34.466 --> 00:33:39.336 A:middle
To take the view controllers
that use dependency injection

00:33:39.336 --> 00:33:42.536 A:middle
and rearrange them in a way that
might suit a different platform.

00:33:43.166 --> 00:33:45.696 A:middle
So, I'm going switch
back to the demo.

00:33:48.276 --> 00:33:49.526 A:middle
Turn on my Bluetooth.

00:33:55.396 --> 00:33:58.866 A:middle
And take the view controllers
as is over the tvOS.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:14.656 --> 00:34:19.516 A:middle
Well, there we go.

00:34:19.746 --> 00:34:21.856 A:middle
I have paired my
Siri remote to my Mac

00:34:21.856 --> 00:34:23.275 A:middle
so I can use it with
the simulator.

00:34:24.806 --> 00:34:27.255 A:middle
It's exactly the same code
from before, same view,

00:34:27.255 --> 00:34:29.036 A:middle
same table view, all
that stuff is there.

00:34:29.746 --> 00:34:35.275 A:middle
I can go over and I can see
the periodic table like this.

00:34:35.516 --> 00:34:38.025 A:middle
And I get that neat TV effect
when I slide over the cells

00:34:38.025 --> 00:34:38.826 A:middle
and its collection view.

00:34:39.315 --> 00:34:40.485 A:middle
It's the same layout code.

00:34:40.485 --> 00:34:41.545 A:middle
It's the same view controller.

00:34:41.545 --> 00:34:43.246 A:middle
It's all the same as
what I had before.

00:34:44.686 --> 00:34:47.156 A:middle
Well, almost.

00:34:55.956 --> 00:34:57.506 A:middle
I added this line
of code so that

00:34:57.506 --> 00:34:59.746 A:middle
when I selected a
collection view cell,

00:34:59.746 --> 00:35:02.006 A:middle
you would get that focused item.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.746 --> 00:35:02.006 A:middle
you would get that focused item.

00:35:02.706 --> 00:35:05.846 A:middle
And I used the OS
Compiler directive

00:35:06.196 --> 00:35:07.596 A:middle
to say this is only for tvOS.

00:35:08.396 --> 00:35:09.416 A:middle
Other than that,
it's the same code.

00:35:10.286 --> 00:35:11.606 A:middle
Which kind of brings
me to another point

00:35:11.606 --> 00:35:14.956 A:middle
that if you ever think you are
taking an app from one platform

00:35:14.956 --> 00:35:16.466 A:middle
and just dropping it
on another platform

00:35:16.916 --> 00:35:18.536 A:middle
with no real other changes,

00:35:18.536 --> 00:35:21.516 A:middle
you're possibly doing something
wrong and might want to check

00:35:21.516 --> 00:35:23.216 A:middle
out the human interface
guidelines just

00:35:23.216 --> 00:35:25.456 A:middle
to see how you can make
that platform and that app

00:35:25.456 --> 00:35:30.666 A:middle
on that platform more native and
feel more like it belongs there.

00:35:31.286 --> 00:35:34.546 A:middle
Let me give you an example.

00:35:34.546 --> 00:35:36.776 A:middle
Let's say that you made
an app that does some sort

00:35:36.776 --> 00:35:38.006 A:middle
of like cloud-based accounting.

00:35:38.756 --> 00:35:41.726 A:middle
And maybe you have an iPad
version and on the iPad version,

00:35:41.726 --> 00:35:42.806 A:middle
people fill out invoices.

00:35:43.546 --> 00:35:44.726 A:middle
Makes sense.

00:35:45.646 --> 00:35:48.566 A:middle
It makes no sense,
in my opinion,

00:35:49.446 --> 00:35:52.426 A:middle
to fill out invoices
on a 60-inch TV.

00:35:52.456 --> 00:35:53.746 A:middle
You just wouldn't do it.

00:35:53.746 --> 00:35:54.386 A:middle
Why would you do that?

00:35:54.986 --> 00:35:56.816 A:middle
This is not an app you
would just take as is

00:35:56.816 --> 00:35:58.656 A:middle
and launch it on tvOS.

00:35:59.286 --> 00:36:02.646 A:middle
But, the iPad version of your
app probably has some great


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.286 --> 00:36:02.646 A:middle
But, the iPad version of your
app probably has some great

00:36:02.646 --> 00:36:04.646 A:middle
visualization about how
the company is performing.

00:36:04.646 --> 00:36:06.256 A:middle
Maybe you've got some
graphs or charts.

00:36:07.516 --> 00:36:08.786 A:middle
Those would be awesome on a TV.

00:36:09.076 --> 00:36:13.876 A:middle
You could have a version of your
app that has a Live Status board

00:36:13.876 --> 00:36:14.886 A:middle
of how the company's doing.

00:36:15.306 --> 00:36:17.716 A:middle
And maybe in the company's
boardroom or something it's just

00:36:17.716 --> 00:36:19.666 A:middle
on and it just animates
through and shows an update.

00:36:19.826 --> 00:36:21.016 A:middle
It's the same data model.

00:36:21.116 --> 00:36:22.436 A:middle
It's the same data access.

00:36:22.926 --> 00:36:24.606 A:middle
But you pivoted that
data in a way

00:36:24.606 --> 00:36:26.856 A:middle
that makes it more
applicable for the platform

00:36:26.856 --> 00:36:27.516 A:middle
in which it's running.

00:36:27.696 --> 00:36:29.236 A:middle
And that's an idea I
want you to think about.

00:36:29.236 --> 00:36:31.246 A:middle
How can we take the same data
that we have and just pivot it

00:36:31.466 --> 00:36:36.606 A:middle
in a way that works
for that platform?

00:36:36.606 --> 00:36:40.606 A:middle
In summary, modernizing your
app is an ongoing process.

00:36:40.606 --> 00:36:42.876 A:middle
We want you to rely on the
frameworks as much as you can.

00:36:44.156 --> 00:36:46.286 A:middle
If you can get rid of
code that's in your app

00:36:46.286 --> 00:36:48.376 A:middle
and instead use code that
we've got in our frameworks,

00:36:48.376 --> 00:36:49.746 A:middle
that's code let's code
for you to maintain.

00:36:50.476 --> 00:36:51.166 A:middle
We'd like you to do that.

00:36:52.166 --> 00:36:54.676 A:middle
We want you to get started today
with finding issues with Xcode,

00:36:54.676 --> 00:36:56.156 A:middle
with the Swift converter.

00:36:56.826 --> 00:36:58.566 A:middle
We want you to architect
your app

00:36:58.566 --> 00:37:00.776 A:middle
with fewer inter-object
dependencies so it's easier


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.566 --> 00:37:00.776 A:middle
with fewer inter-object
dependencies so it's easier

00:37:00.776 --> 00:37:03.206 A:middle
for you to rearrange your app.

00:37:04.496 --> 00:37:07.226 A:middle
Finally, we want you to
consider bringing your app

00:37:07.226 --> 00:37:09.696 A:middle
to other platforms
of ours [laughter]

00:37:14.436 --> 00:37:15.406 A:middle
by pivoting your data model.

00:37:16.276 --> 00:37:18.216 A:middle
There are some related
sessions you can check out.

00:37:18.856 --> 00:37:19.426 A:middle
There you go.

00:37:20.196 --> 00:37:25.426 A:middle
And other than that, you
can check out our link

00:37:25.426 --> 00:37:26.526 A:middle
for this particular session.

00:37:26.776 --> 00:37:28.006 A:middle
And that is it for me.

00:37:28.256 --> 00:37:28.866 A:middle
Thanks, everyone.

00:37:29.516 --> 00:37:33.500 A:middle
[ Applause ]

