WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:07.516 --> 00:00:18.500 A:middle
[ Music ]

00:00:21.516 --> 00:00:27.456 A:middle
[ Applause ]

00:00:27.956 --> 00:00:28.776 A:middle
&gt;&gt; Hello and welcome.

00:00:28.826 --> 00:00:31.536 A:middle
I hope that everybody's
having a great WWDC.

00:00:32.186 --> 00:00:34.216 A:middle
My name is Justin Stoyles,
I'm part of our Graphics

00:00:34.216 --> 00:00:35.286 A:middle
and Media Group here at Apple.

00:00:35.806 --> 00:00:37.466 A:middle
And I'm really excited
to talk to you today

00:00:37.466 --> 00:00:38.746 A:middle
about working with wide color.

00:00:39.476 --> 00:00:41.426 A:middle
We're going to cover
a few topics today.

00:00:41.536 --> 00:00:42.326 A:middle
I'm going to start

00:00:42.326 --> 00:00:44.676 A:middle
with discussing some
core color concepts.

00:00:45.136 --> 00:00:47.146 A:middle
And we'll talk a little bit
about what is wide color

00:00:47.306 --> 00:00:48.086 A:middle
and why does it matter.

00:00:48.996 --> 00:00:50.386 A:middle
Then I'm going to hand
it over to Patrick,

00:00:50.616 --> 00:00:53.206 A:middle
who's going to walk you
over some of the processes

00:00:53.206 --> 00:00:55.716 A:middle
of getting wide color assets
into your application.

00:00:56.066 --> 00:00:58.196 A:middle
And then I'm going to
hand it over to Steve,

00:00:58.376 --> 00:01:00.136 A:middle
who's going to talk about
rendering wide color.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.376 --> 00:01:00.136 A:middle
who's going to talk about
rendering wide color.

00:01:00.756 --> 00:01:01.496 A:middle
So let's get started.

00:01:02.486 --> 00:01:04.396 A:middle
As I mentioned, I'm
excited to talk to you

00:01:04.396 --> 00:01:06.546 A:middle
about wide color today
and the reason why is

00:01:06.546 --> 00:01:08.306 A:middle
because we're actually
transforming the way

00:01:08.306 --> 00:01:10.826 A:middle
that we handle wide color,
and colors in general

00:01:10.926 --> 00:01:12.326 A:middle
on the Mac and iOS platform.

00:01:13.046 --> 00:01:15.936 A:middle
A good place to start
is in the '90s.

00:01:16.466 --> 00:01:18.296 A:middle
So Apple has always
been at the forefront

00:01:18.296 --> 00:01:20.126 A:middle
of solving the color
problem in computing.

00:01:20.536 --> 00:01:22.146 A:middle
And a good place to
start with ColorSync.

00:01:22.346 --> 00:01:25.116 A:middle
So ColorSync is our color
management platform on the Mac

00:01:25.566 --> 00:01:27.436 A:middle
and it was developed in
the '90s and at the time,

00:01:27.676 --> 00:01:30.146 A:middle
Apple and a number of other
like-minded companies got

00:01:30.146 --> 00:01:32.866 A:middle
together with the idea that
standards in color management

00:01:32.896 --> 00:01:35.166 A:middle
and color reproduction
would begin to solve some

00:01:35.166 --> 00:01:37.296 A:middle
of the problems faced by
engineers and designers

00:01:37.616 --> 00:01:38.396 A:middle
when working with color.

00:01:39.526 --> 00:01:40.806 A:middle
That group later became known

00:01:40.806 --> 00:01:43.036 A:middle
as the International
Color Consortium, or ICC,

00:01:43.036 --> 00:01:44.116 A:middle
which you may be familiar with.

00:01:44.856 --> 00:01:47.616 A:middle
The work of ICC was then
incorporated into ColorSync

00:01:47.616 --> 00:01:49.386 A:middle
and we built that
fundamentally into OS X.

00:01:51.106 --> 00:01:53.786 A:middle
Now Apple has also been at the
forefront of display technology.

00:01:54.106 --> 00:01:55.886 A:middle
We now have these
beautiful retina displays

00:01:55.886 --> 00:01:56.836 A:middle
across our product line.

00:01:57.036 --> 00:01:58.046 A:middle
People really, really love them.

00:01:58.506 --> 00:01:59.966 A:middle
But what really is
the next frontier?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.756 --> 00:02:04.866 A:middle
Well, last year we announced
the beautiful new iMacs

00:02:04.866 --> 00:02:05.746 A:middle
with P3 displays.

00:02:06.216 --> 00:02:07.876 A:middle
And the feedback we got
was really tremendous.

00:02:08.256 --> 00:02:10.036 A:middle
They display 25 percent
more color.

00:02:10.386 --> 00:02:11.796 A:middle
And they have the
P3 color space,

00:02:11.796 --> 00:02:12.866 A:middle
which people really,
really love.

00:02:13.396 --> 00:02:14.896 A:middle
And if you fast forward
another year,

00:02:15.206 --> 00:02:18.876 A:middle
we have these new iPad Pro
9.7 displays with True Tones.

00:02:18.876 --> 00:02:20.146 A:middle
So we've taken that
even further.

00:02:20.146 --> 00:02:22.296 A:middle
Now, there's a lot
happening under the hood here,

00:02:22.336 --> 00:02:24.306 A:middle
and we're going to try to get
into some of those topics today.

00:02:24.666 --> 00:02:26.916 A:middle
And I'll start with
Core Color Concepts.

00:02:27.806 --> 00:02:29.506 A:middle
Let's start very,
very, very simple.

00:02:29.636 --> 00:02:31.516 A:middle
So, what is a color space?

00:02:31.516 --> 00:02:33.286 A:middle
Well a color space
is an environment

00:02:33.366 --> 00:02:35.516 A:middle
in which colors can be
compared and represented.

00:02:35.846 --> 00:02:38.696 A:middle
It can be a 1, 2, 3,
or 4 dimensional space

00:02:38.996 --> 00:02:41.926 A:middle
that is defined by the intensity
of its color components.

00:02:43.196 --> 00:02:45.656 A:middle
Those color components
are also often referred

00:02:45.656 --> 00:02:46.446 A:middle
to as color channels.

00:02:47.386 --> 00:02:49.946 A:middle
One representation that you
might be familiar with is RGB.

00:02:50.346 --> 00:02:52.976 A:middle
So, this is very
relevant with displays,

00:02:52.976 --> 00:02:54.796 A:middle
where your subpixels are
red, green, and blue.

00:02:54.796 --> 00:02:57.116 A:middle
And to think about these
color channels you can think

00:02:57.116 --> 00:02:58.516 A:middle
that the intensity of each

00:02:58.516 --> 00:03:00.546 A:middle
of these color channels
defines the color


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.516 --> 00:03:00.546 A:middle
of these color channels
defines the color

00:03:00.546 --> 00:03:02.146 A:middle
that you see on the other end.

00:03:03.356 --> 00:03:05.426 A:middle
There's many different
types of color spaces.

00:03:05.606 --> 00:03:08.126 A:middle
I mentioned RGB spaces, which
are very popular in displays.

00:03:08.516 --> 00:03:10.696 A:middle
But there's also lots
more, there's gray spaces,

00:03:10.696 --> 00:03:12.036 A:middle
which are used in
monochrome printing.

00:03:12.756 --> 00:03:15.356 A:middle
In color printing we
often use CMYK spaces.

00:03:15.766 --> 00:03:17.716 A:middle
And if you're trying
to do calculations

00:03:17.716 --> 00:03:20.346 A:middle
and transformations, we
generally use color spaces

00:03:20.346 --> 00:03:22.116 A:middle
like LAB, which are
device independent.

00:03:22.116 --> 00:03:28.126 A:middle
So now we have color spaces, and
color channels, and we now want

00:03:28.126 --> 00:03:29.256 A:middle
to create a coordinate system

00:03:29.256 --> 00:03:30.916 A:middle
where we can compare
and compute colors.

00:03:31.316 --> 00:03:33.106 A:middle
So there's the concept
of color primaries.

00:03:33.696 --> 00:03:37.146 A:middle
So color primaries generally
fall at the most intense value

00:03:37.146 --> 00:03:39.516 A:middle
that you can get with that
particular color channel.

00:03:40.366 --> 00:03:43.596 A:middle
So in this example of an RGB
color space, you would see

00:03:43.596 --> 00:03:44.896 A:middle
that the color primaries are

00:03:44.896 --> 00:03:47.836 A:middle
where we anchor 1.0
in our color space.

00:03:48.306 --> 00:03:51.026 A:middle
So for black, I would
have no saturation in each

00:03:51.026 --> 00:03:52.686 A:middle
of my color channels,
so I have 0, 0, 0.

00:03:53.276 --> 00:03:54.746 A:middle
For white I would have 1, 1, 1.

00:03:55.106 --> 00:03:57.186 A:middle
And for red I would only
saturate the red channel,

00:03:57.496 --> 00:03:58.636 A:middle
and I would have 1, 0, 0.

00:03:59.286 --> 00:03:59.726 A:middle
Very simple.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.916 --> 00:04:03.646 A:middle
And when we refer to color
gamut, we're actually talking

00:04:03.646 --> 00:04:06.646 A:middle
about all of the colors that
can be defined as a combination

00:04:06.646 --> 00:04:08.116 A:middle
of those individual
color channels.

00:04:09.136 --> 00:04:11.326 A:middle
So now you understand some
of the basic color concepts

00:04:11.366 --> 00:04:12.946 A:middle
that we're going to be
discussing in this presentation.

00:04:13.376 --> 00:04:14.856 A:middle
So then what is wide color?

00:04:15.276 --> 00:04:17.406 A:middle
Well first we should
talk a little bit

00:04:17.446 --> 00:04:19.336 A:middle
about what is the standard
in the industry today.

00:04:20.216 --> 00:04:24.656 A:middle
So standard RGB, or sRGB is the
most widely used color space

00:04:24.656 --> 00:04:25.366 A:middle
in computing today.

00:04:25.986 --> 00:04:27.826 A:middle
It's based on the
BT.709 standard.

00:04:28.246 --> 00:04:30.156 A:middle
We use an approximated
gamma of 2.2.

00:04:30.596 --> 00:04:32.126 A:middle
Typical lighting conditions.

00:04:32.126 --> 00:04:33.516 A:middle
Which in this case is D65.

00:04:34.296 --> 00:04:36.546 A:middle
And it's the default
color space for iOS.

00:04:36.826 --> 00:04:38.306 A:middle
And it's actually the
default color space

00:04:38.306 --> 00:04:39.356 A:middle
for a lot of platforms.

00:04:39.736 --> 00:04:41.776 A:middle
Which is very convenient,
because there are some platforms

00:04:41.776 --> 00:04:42.886 A:middle
out there that are
color managed,

00:04:43.016 --> 00:04:43.896 A:middle
and there are some that are not.

00:04:44.296 --> 00:04:45.826 A:middle
And when a lot of
the content that is

00:04:45.826 --> 00:04:49.086 A:middle
in existence today is sRGB,
you can make some assumptions

00:04:49.196 --> 00:04:50.356 A:middle
on your incoming content

00:04:50.356 --> 00:04:52.466 A:middle
and have it reproduce
faithfully on the other end.

00:04:52.906 --> 00:04:54.406 A:middle
But that's not always
going to be case.

00:04:54.796 --> 00:04:57.566 A:middle
sRGB does a good job of
describing colors that we work

00:04:57.566 --> 00:04:59.986 A:middle
with on a daily basis, and our
systems have been really good

00:04:59.986 --> 00:05:01.276 A:middle
at displaying those
colors to us.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.986 --> 00:05:01.276 A:middle
at displaying those
colors to us.

00:05:01.816 --> 00:05:05.546 A:middle
But really there's a lot of
colors that don't fit into sRGB.

00:05:06.376 --> 00:05:09.536 A:middle
A lot of textiles are
designed using inks and dyes

00:05:09.946 --> 00:05:11.896 A:middle
that have lots of colors
that are outside of sRGB,

00:05:11.896 --> 00:05:14.616 A:middle
mainly because these
colors really catch our eye.

00:05:14.616 --> 00:05:16.086 A:middle
They're really vivid
and impressive.

00:05:16.726 --> 00:05:18.366 A:middle
If you're watching
soccer for example,

00:05:18.476 --> 00:05:21.096 A:middle
a lot of the uniforms are
actually outside of sRGB,

00:05:21.096 --> 00:05:22.836 A:middle
because they're striking,
they get our attention.

00:05:23.126 --> 00:05:24.746 A:middle
Whether you're watching
your kid's soccer game,

00:05:24.746 --> 00:05:26.386 A:middle
or you're watching the
Eurocup, you're going

00:05:26.386 --> 00:05:27.966 A:middle
to see a lot these
jerseys with colors

00:05:27.966 --> 00:05:29.816 A:middle
that are actually not
describable within sRGB.

00:05:29.816 --> 00:05:33.966 A:middle
A lot of products are
also designed with colors

00:05:33.966 --> 00:05:34.826 A:middle
that are outside of sRGB.

00:05:34.826 --> 00:05:37.236 A:middle
And these are products that we
interact with on a daily basis.

00:05:38.236 --> 00:05:40.996 A:middle
But really the most compelling
examples are in nature itself.

00:05:41.436 --> 00:05:44.926 A:middle
Sunsets, autumn leaves,
tropical waters.

00:05:45.176 --> 00:05:47.326 A:middle
These are all things in
nature that have colors

00:05:47.326 --> 00:05:48.246 A:middle
that are outside of sRGB.

00:05:48.246 --> 00:05:50.866 A:middle
And we actually want
to show those.

00:05:51.126 --> 00:05:53.966 A:middle
And the nice thing is you
probably have a lot of images

00:05:53.966 --> 00:05:55.076 A:middle
that you've taken
on your camera,

00:05:55.156 --> 00:05:56.586 A:middle
especially if you're
capturing in RAW,

00:05:56.926 --> 00:05:58.686 A:middle
that actually contain a
lot of this color data,

00:05:58.686 --> 00:06:00.386 A:middle
but you're not seeing
it on your display


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.686 --> 00:06:00.386 A:middle
but you're not seeing
it on your display

00:06:00.386 --> 00:06:02.446 A:middle
if your display is only sRGB.

00:06:03.076 --> 00:06:06.096 A:middle
So what do we do about this?

00:06:06.306 --> 00:06:08.896 A:middle
Well, last year as I mentioned,
we introduced products

00:06:08.896 --> 00:06:09.886 A:middle
with a new color space.

00:06:09.956 --> 00:06:12.526 A:middle
And that color space
is Display P3.

00:06:12.526 --> 00:06:15.426 A:middle
So in our iMacs, and in
our new iPad Pro 9.7,

00:06:15.786 --> 00:06:16.896 A:middle
we use this color space.

00:06:16.896 --> 00:06:19.246 A:middle
And it's based on the
SMPTE standard of DCI-P3.

00:06:19.246 --> 00:06:21.076 A:middle
But it's a little bit different.

00:06:21.636 --> 00:06:25.076 A:middle
DCI-P3 is a color space that is
defined for digital projection.

00:06:25.076 --> 00:06:27.206 A:middle
And it works really great
for those viewing conditions.

00:06:27.696 --> 00:06:30.086 A:middle
But our viewing conditions
are a little bit different.

00:06:30.196 --> 00:06:33.766 A:middle
And sRGB is really great at
defining a standard that works

00:06:33.766 --> 00:06:34.886 A:middle
with our viewing conditions.

00:06:34.936 --> 00:06:37.876 A:middle
So we adopted the same gamma,
and typical lighting conditions

00:06:37.876 --> 00:06:39.586 A:middle
for our white point, as sRGB.

00:06:39.586 --> 00:06:44.606 A:middle
These are the key differences
between Display P3 and DCI-P3.

00:06:44.956 --> 00:06:47.636 A:middle
In order to understand what
colors are actually outside

00:06:47.636 --> 00:06:50.226 A:middle
of sRGB, but can be
described in Display P3,

00:06:50.226 --> 00:06:52.586 A:middle
I'll try to show it
to you in action.

00:06:54.216 --> 00:06:56.206 A:middle
So here's an image
from my photo library,

00:06:56.536 --> 00:06:59.766 A:middle
and I exported it using photos
in a Display P3 color space.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.176 --> 00:07:01.456 A:middle
This is a really
beautiful image,

00:07:01.766 --> 00:07:04.256 A:middle
and even though we're viewing
it on an sRGB projector today,

00:07:04.256 --> 00:07:06.766 A:middle
or if you're viewing the video,
you're viewing it in sRGB today.

00:07:07.016 --> 00:07:08.546 A:middle
This image still looks
really, really great.

00:07:08.546 --> 00:07:10.456 A:middle
But there's a lot of
things in this image

00:07:10.456 --> 00:07:14.036 A:middle
that you might not notice right
away, but there's actually a lot

00:07:14.036 --> 00:07:16.736 A:middle
of colors that aren't
actually describable in sRGB.

00:07:16.736 --> 00:07:19.876 A:middle
These are colors that are
outside of the sRGB color gamut.

00:07:20.226 --> 00:07:23.016 A:middle
And in this case what you
end up with is posterization

00:07:23.016 --> 00:07:25.406 A:middle
in those regions, so
those colors are flattened

00:07:25.406 --> 00:07:26.806 A:middle
on the edge of the sRGB gamut.

00:07:28.216 --> 00:07:29.106 A:middle
So how do we fix this?

00:07:29.106 --> 00:07:32.976 A:middle
Well, we're moving more
professional workflows

00:07:33.096 --> 00:07:34.206 A:middle
to our mobile platforms.

00:07:35.006 --> 00:07:36.286 A:middle
And in order to enable that,

00:07:36.396 --> 00:07:38.966 A:middle
it's not just putting a wide
gamut display into your system.

00:07:38.966 --> 00:07:41.796 A:middle
There's a number of other things
that need to come along with it.

00:07:42.066 --> 00:07:43.426 A:middle
One of those things is we need

00:07:43.426 --> 00:07:44.896 A:middle
to upgrade our factory
calibration.

00:07:45.256 --> 00:07:49.076 A:middle
So, now all of our products have
individually calibrated displays

00:07:49.286 --> 00:07:50.936 A:middle
that from device to
device you can count

00:07:50.936 --> 00:07:52.776 A:middle
on those colors being
accurate and consistent.

00:07:53.156 --> 00:07:54.976 A:middle
And then finally, we had

00:07:54.976 --> 00:07:58.186 A:middle
to build full system-wide
color management into iOS.

00:07:58.186 --> 00:08:00.006 A:middle
And that's exactly
what we've done.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.186 --> 00:08:00.006 A:middle
And that's exactly
what we've done.

00:08:00.546 --> 00:08:04.956 A:middle
But we can't just build the
same color management system

00:08:05.186 --> 00:08:06.906 A:middle
with the same approach
as we did on the Mac.

00:08:07.576 --> 00:08:10.766 A:middle
There's different considerations
and different restrictions

00:08:10.766 --> 00:08:12.006 A:middle
when working with
a mobile platform.

00:08:12.626 --> 00:08:15.456 A:middle
One of those considerations
are the countless applications

00:08:15.456 --> 00:08:17.456 A:middle
that already exist
in the iOS ecosystem.

00:08:18.056 --> 00:08:21.956 A:middle
These are applications that are
built in sRGB, tuned for color

00:08:21.956 --> 00:08:23.426 A:middle
and performance in sRGB.

00:08:24.046 --> 00:08:26.776 A:middle
So how do we make sure that
those applications can still run

00:08:26.776 --> 00:08:28.536 A:middle
on our platforms that
are now color managed,

00:08:28.856 --> 00:08:30.466 A:middle
without any impact
to performance,

00:08:30.686 --> 00:08:32.186 A:middle
without any impact
to your colors.

00:08:32.816 --> 00:08:35.316 A:middle
And what we did is we
built on top of sRGB.

00:08:36.395 --> 00:08:39.775 A:middle
So we've introduced an
extended range sRGB color space.

00:08:40.155 --> 00:08:42.756 A:middle
This is our working space
for working with wide color.

00:08:43.535 --> 00:08:45.766 A:middle
We use the same sRGB primaries.

00:08:47.276 --> 00:08:48.916 A:middle
We use the same gamma 2.2.

00:08:49.326 --> 00:08:50.476 A:middle
The same white point.

00:08:51.246 --> 00:08:53.356 A:middle
But, the interesting
difference here is

00:08:53.356 --> 00:08:55.736 A:middle
that we actually allow values
that are greater than one

00:08:55.876 --> 00:08:58.226 A:middle
and less than zero,
which allows us

00:08:58.226 --> 00:09:00.896 A:middle
to not only keep the same
performance and look of all


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.226 --> 00:09:00.896 A:middle
to not only keep the same
performance and look of all

00:09:00.896 --> 00:09:04.476 A:middle
of your applications that are
built in sRGB, but using values

00:09:04.476 --> 00:09:05.986 A:middle
that are negative and
values that are greater

00:09:05.986 --> 00:09:09.176 A:middle
than one allow us to express any
color in the visual spectrum,

00:09:09.356 --> 00:09:11.586 A:middle
while still keeping our
anchor points in sRGB.

00:09:12.256 --> 00:09:15.646 A:middle
The best way to describe
this is with a demonstration.

00:09:16.836 --> 00:09:19.806 A:middle
So let's say I want to
take the most saturated red

00:09:19.846 --> 00:09:20.506 A:middle
in Display P3.

00:09:20.506 --> 00:09:22.536 A:middle
So that would be 1, 0, 0.

00:09:23.176 --> 00:09:25.926 A:middle
Now, if want to express
that in extended range sRGB,

00:09:25.926 --> 00:09:28.566 A:middle
it would look a little
bit like this.

00:09:29.146 --> 00:09:31.136 A:middle
So in the red channel,
I actually have a value

00:09:31.136 --> 00:09:32.126 A:middle
that is greater than one.

00:09:32.786 --> 00:09:34.376 A:middle
And in the green
and blue channels,

00:09:34.506 --> 00:09:36.226 A:middle
I'm actually using
negative values.

00:09:36.226 --> 00:09:38.176 A:middle
So I'm subtracting
green and blue,

00:09:38.386 --> 00:09:40.106 A:middle
and adding oversaturated red.

00:09:40.106 --> 00:09:43.346 A:middle
And what that allows me to do
is get a color that is outside

00:09:43.346 --> 00:09:47.806 A:middle
of the sRGB gamut, while using
that same sRGB anchor points

00:09:48.186 --> 00:09:49.986 A:middle
in extended range sRGB.

00:09:51.636 --> 00:09:54.236 A:middle
The interesting thing is if
you're using a pixel format

00:09:54.436 --> 00:09:56.816 A:middle
that allows you to go very
negative, and very positive,

00:09:57.196 --> 00:09:59.406 A:middle
this approach allows
you to express any color

00:09:59.406 --> 00:09:59.976 A:middle
in the visual spectrum.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.136 --> 00:10:01.656 A:middle
So this is scalable.

00:10:02.116 --> 00:10:05.966 A:middle
Speaking of pixel formats,

00:10:07.406 --> 00:10:11.576 A:middle
sRGB is largely standardized
in 8 bits.

00:10:11.576 --> 00:10:16.156 A:middle
So 8 bits is largely enough
to describe colors in sRGB,

00:10:16.936 --> 00:10:17.966 A:middle
not perfect, but great.

00:10:18.456 --> 00:10:20.896 A:middle
Now an easy example to
describe the difference

00:10:20.896 --> 00:10:23.066 A:middle
between the precision that
we would want for sRGB,

00:10:23.066 --> 00:10:24.916 A:middle
and the precision
that we would want

00:10:24.996 --> 00:10:27.966 A:middle
for wider gamut, is
with this example.

00:10:28.076 --> 00:10:30.716 A:middle
So say I wanted to build
a staircase in my home

00:10:30.856 --> 00:10:32.146 A:middle
from the basement
to my first floor.

00:10:32.526 --> 00:10:35.186 A:middle
I would use, say 8 stairs, I'd
probably use 12, but let's say

00:10:35.186 --> 00:10:36.396 A:middle
for simplicity I would use 8.

00:10:37.586 --> 00:10:39.016 A:middle
This is the appropriate
height for me.

00:10:39.416 --> 00:10:42.156 A:middle
Now, if I wanted to extend that
staircase up to my second floor,

00:10:42.156 --> 00:10:44.476 A:middle
I wouldn't just use the
same number of stairs.

00:10:44.656 --> 00:10:46.556 A:middle
And when we're using
digital encoding for color,

00:10:47.066 --> 00:10:49.626 A:middle
it makes sense that if you're
trying to express more colors,

00:10:49.936 --> 00:10:51.616 A:middle
you would want to
us more precision.

00:10:57.136 --> 00:10:59.796 A:middle
So if we're talking about using
colors that are outside of sRGB,

00:10:59.796 --> 00:11:03.666 A:middle
really our recommendation is to
use 16 bits per color channel.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.796 --> 00:11:03.666 A:middle
really our recommendation is to
use 16 bits per color channel.

00:11:04.266 --> 00:11:07.926 A:middle
Now, before I hand
it over to Patrick,

00:11:08.076 --> 00:11:09.796 A:middle
I wanted to end with
one more point.

00:11:09.796 --> 00:11:12.786 A:middle
So, we've gone through our
entire system and upgraded all

00:11:12.786 --> 00:11:15.256 A:middle
of our frameworks and
tools to be color savvy.

00:11:15.756 --> 00:11:17.306 A:middle
But if you're building
your application

00:11:17.306 --> 00:11:18.486 A:middle
with open source tools,

00:11:18.846 --> 00:11:21.476 A:middle
or you've built your own
image processing pipeline

00:11:21.476 --> 00:11:24.526 A:middle
from scratch, you need to
take some action to make sure

00:11:24.526 --> 00:11:27.436 A:middle
that the tools that you've
used are color savvy.

00:11:28.106 --> 00:11:29.746 A:middle
Otherwise, we've
got you covered.

00:11:30.206 --> 00:11:32.386 A:middle
And for more on that, I'll
hand it over to Patrick.

00:11:33.516 --> 00:11:36.546 A:middle
[ Applause ]

00:11:37.046 --> 00:11:37.626 A:middle
&gt;&gt; Thank you Justin.

00:11:38.916 --> 00:11:39.876 A:middle
Hi. I'm Patrick Heynen.

00:11:39.876 --> 00:11:42.226 A:middle
I'm a Senior Engineering Manager
in the Cocoa Frameworks Group.

00:11:42.786 --> 00:11:45.786 A:middle
And I'd like to ask where
does wide color come from?

00:11:45.966 --> 00:11:48.146 A:middle
Well the answer is it turns
out, it's not just shirt.

00:11:48.606 --> 00:11:50.396 A:middle
No, it comes from you.

00:11:51.416 --> 00:11:54.026 A:middle
Namely, it comes from
apps and their content,

00:11:54.516 --> 00:11:55.846 A:middle
and the user experiences

00:11:55.846 --> 00:11:57.246 A:middle
that you provide in
your applications.

00:11:58.466 --> 00:12:01.666 A:middle
So what kind of content types
are amenable for wide color?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.466 --> 00:12:01.666 A:middle
So what kind of content types
are amenable for wide color?

00:12:02.626 --> 00:12:05.226 A:middle
Well the first one is the one
you're probably most familiar

00:12:05.226 --> 00:12:06.836 A:middle
with and that's static
image resources.

00:12:06.906 --> 00:12:09.476 A:middle
These are the sort
of the PNG, or JPEG,

00:12:09.476 --> 00:12:12.016 A:middle
or individual graphic files
that you may have bundled

00:12:12.016 --> 00:12:13.666 A:middle
into your application
and shipped along

00:12:13.726 --> 00:12:16.136 A:middle
with your application
bundle to your customers.

00:12:17.696 --> 00:12:20.006 A:middle
The next category is document

00:12:20.006 --> 00:12:21.646 A:middle
and network-based
image resources.

00:12:21.646 --> 00:12:24.206 A:middle
These are individual
image content

00:12:24.526 --> 00:12:27.426 A:middle
that you may either download
off of a network service,

00:12:27.736 --> 00:12:31.906 A:middle
or store in your document data.

00:12:32.086 --> 00:12:34.446 A:middle
There's also further
categories, like advanced media,

00:12:34.446 --> 00:12:37.256 A:middle
which refers to things like
live photos, or content acquire

00:12:37.256 --> 00:12:39.516 A:middle
from the build-in
iPhone cameras.

00:12:39.596 --> 00:12:43.496 A:middle
I'm not going to go
into too much detail

00:12:43.496 --> 00:12:47.706 A:middle
about wide color implications
for those kinds of types,

00:12:47.706 --> 00:12:50.036 A:middle
but I refer you to the
Advances in iOS Photography

00:12:50.316 --> 00:12:53.536 A:middle
and Editing Live Photos
and RAW on iOS Sessions

00:12:53.536 --> 00:12:54.546 A:middle
for more details about that.

00:12:55.476 --> 00:12:58.636 A:middle
And lastly, there's also
the concept of GPU textures.

00:12:58.636 --> 00:13:00.786 A:middle
If your program -- if your
application is working


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.636 --> 00:13:00.786 A:middle
If your program -- if your
application is working

00:13:00.786 --> 00:13:04.336 A:middle
at the GPU level, like your game
engine, or your advance piece

00:13:04.336 --> 00:13:07.486 A:middle
of graphic software, and you're
sending color information

00:13:07.486 --> 00:13:09.436 A:middle
in the form of either
textures or shader values

00:13:09.696 --> 00:13:12.226 A:middle
to the GPU directly, there
are other considerations

00:13:12.226 --> 00:13:13.866 A:middle
as well for wide content.

00:13:14.336 --> 00:13:16.766 A:middle
I'm not going to go into much
detail about those either,

00:13:16.766 --> 00:13:20.016 A:middle
but I refer you to my colleague,
Dan Omachi's excellent treatment

00:13:20.016 --> 00:13:23.376 A:middle
of this in What's
New in Metal Part 2.

00:13:23.596 --> 00:13:26.106 A:middle
Okay. So let's frame
the color problem.

00:13:26.826 --> 00:13:28.706 A:middle
Justin gave a great
explanation earlier.

00:13:28.706 --> 00:13:31.086 A:middle
But how does it apply to apps?

00:13:31.606 --> 00:13:37.356 A:middle
Well app content can come from a
broad range of sources and come

00:13:37.356 --> 00:13:38.776 A:middle
in a broad range
of color richness,

00:13:38.776 --> 00:13:40.106 A:middle
all the way from grayscale,

00:13:40.106 --> 00:13:44.686 A:middle
all the way through to even
16-bit wide color gamut content.

00:13:45.756 --> 00:13:49.826 A:middle
At the same time, devices and
displays come in a broad range

00:13:49.826 --> 00:13:51.006 A:middle
of color capabilities.

00:13:51.186 --> 00:13:54.796 A:middle
For example, in iPhone
5 it was only capable

00:13:54.796 --> 00:13:58.316 A:middle
of representing sRGB, all the
way through the latest iPad Pro

00:13:58.316 --> 00:14:01.206 A:middle
which does a great job
with full P3 colors


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.316 --> 00:14:01.206 A:middle
which does a great job
with full P3 colors

00:14:01.206 --> 00:14:02.796 A:middle
and extended range sRGB.

00:14:03.336 --> 00:14:05.096 A:middle
So, how do you bridge
the difference?

00:14:06.166 --> 00:14:08.656 A:middle
Well, we're going to
solve this color problem.

00:14:09.276 --> 00:14:12.416 A:middle
And the backbone really
is color management.

00:14:14.736 --> 00:14:16.176 A:middle
So, what is color management?

00:14:17.596 --> 00:14:20.136 A:middle
The job of color
management is to ensure

00:14:20.746 --> 00:14:23.396 A:middle
that an image looks the
same on any output device,

00:14:23.726 --> 00:14:25.976 A:middle
no matter what color
space it is encoded in

00:14:25.976 --> 00:14:27.136 A:middle
or how it was originally
created.

00:14:27.956 --> 00:14:28.796 A:middle
That's pretty much it.

00:14:29.786 --> 00:14:33.606 A:middle
But how does it work?

00:14:33.806 --> 00:14:36.726 A:middle
Color management
starts with every image

00:14:36.726 --> 00:14:39.046 A:middle
or content type having an
associated color space,

00:14:39.246 --> 00:14:40.876 A:middle
sometimes referred
to as color profile.

00:14:42.496 --> 00:14:45.446 A:middle
This informs the system what
the colors actually mean.

00:14:45.586 --> 00:14:49.206 A:middle
And then the color matching
process algorithmically maps

00:14:49.206 --> 00:14:52.086 A:middle
those colors to the
characteristics and output space

00:14:52.146 --> 00:14:53.556 A:middle
of the device that
you're rendering to.

00:14:54.126 --> 00:14:57.716 A:middle
Of course, this is a
computational process,

00:14:57.716 --> 00:14:58.806 A:middle
and it is not for free.

00:14:58.806 --> 00:15:00.756 A:middle
In fact, every single
pixel needs to be touched


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.806 --> 00:15:00.756 A:middle
In fact, every single
pixel needs to be touched

00:15:00.756 --> 00:15:03.146 A:middle
and converted and matched.

00:15:03.326 --> 00:15:05.706 A:middle
Also, it's important to
note this is a potentially

00:15:05.706 --> 00:15:06.756 A:middle
lossy operation.

00:15:06.986 --> 00:15:09.616 A:middle
Especially if you're going
from a wider color gamut source

00:15:09.976 --> 00:15:13.146 A:middle
down to a narrower one,
say a 16-bit P3 content

00:15:13.146 --> 00:15:16.226 A:middle
down to an sRGB 8-bit,
there's going to be some loss

00:15:16.226 --> 00:15:18.526 A:middle
of color fidelity
in that scenario.

00:15:18.526 --> 00:15:20.116 A:middle
So that's something
to be aware of.

00:15:20.116 --> 00:15:24.066 A:middle
So these are important
aspects, but there's good news.

00:15:24.646 --> 00:15:28.286 A:middle
The first good news is that
the color matching operations,

00:15:28.376 --> 00:15:30.636 A:middle
the way they're algorithmically
defined, I'm not going to go

00:15:30.636 --> 00:15:32.096 A:middle
into the details of the
color science behind them.

00:15:32.096 --> 00:15:34.056 A:middle
But it turns out
that computationally,

00:15:34.056 --> 00:15:35.586 A:middle
they're very easily
hardware accelerated,

00:15:35.946 --> 00:15:37.986 A:middle
either by the CPU or by GPU.

00:15:39.216 --> 00:15:41.076 A:middle
Which leads to the
next good news which is

00:15:41.346 --> 00:15:42.966 A:middle
that we've built
this functionality

00:15:42.966 --> 00:15:46.466 A:middle
into the system itself, so that
it all works automatically via

00:15:46.466 --> 00:15:49.716 A:middle
the Quartz 2D, ColorSync on
the Mac, and Core Animation.

00:15:50.276 --> 00:15:53.616 A:middle
In fact, all you really
need to make sure of is

00:15:53.616 --> 00:15:58.036 A:middle
that your content is tagged
properly, and in that case,

00:15:58.036 --> 00:16:00.356 A:middle
there's no code required to
display your image correctly,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.036 --> 00:16:00.356 A:middle
there's no code required to
display your image correctly,

00:16:00.356 --> 00:16:03.416 A:middle
and have the colors
appear correct.

00:16:03.536 --> 00:16:04.936 A:middle
So, platform color management.

00:16:05.486 --> 00:16:09.076 A:middle
Well, macOS, as Justin eluded

00:16:09.076 --> 00:16:10.926 A:middle
to has been color managed
since its inception.

00:16:10.996 --> 00:16:13.036 A:middle
Some might even say since
before its inception,

00:16:13.036 --> 00:16:14.556 A:middle
when it was previously
known as macOS,

00:16:14.976 --> 00:16:16.566 A:middle
during the ColorSync times.

00:16:17.376 --> 00:16:18.316 A:middle
So there's nothing new there,

00:16:18.316 --> 00:16:20.186 A:middle
but there is something
new on the iOS fronts.

00:16:20.186 --> 00:16:22.496 A:middle
We have, since iOS 9.3,

00:16:22.496 --> 00:16:24.366 A:middle
we now have automatic
color management support

00:16:24.516 --> 00:16:25.286 A:middle
on most devices.

00:16:25.556 --> 00:16:29.016 A:middle
So that's color management,
the backbone

00:16:29.016 --> 00:16:30.466 A:middle
of solving the color problem.

00:16:32.396 --> 00:16:36.446 A:middle
But now let's talk about how
some design consideration

00:16:36.446 --> 00:16:39.656 A:middle
and how the toolchain and the
platform services have been

00:16:39.656 --> 00:16:42.806 A:middle
enhanced to accommodate
getting wide content

00:16:42.806 --> 00:16:43.756 A:middle
into your applications.

00:16:44.526 --> 00:16:47.196 A:middle
First, as always it
starts with design.

00:16:48.736 --> 00:16:50.926 A:middle
So, what is important to think

00:16:50.926 --> 00:16:53.186 A:middle
about when you're
approaching the wide color

00:16:53.186 --> 00:16:56.816 A:middle
from a design perspective?

00:16:56.816 --> 00:17:00.406 A:middle
Well, the first thing I would
say is that it's important


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:56.816 --> 00:17:00.406 A:middle
Well, the first thing I would
say is that it's important

00:17:00.406 --> 00:17:03.186 A:middle
to use wide gamut content
where it makes sense.

00:17:04.106 --> 00:17:06.665 A:middle
It doesn't mean everywhere,
remember most of the colors

00:17:06.665 --> 00:17:09.796 A:middle
that we interact with on a daily
basis, are in fact contained

00:17:09.796 --> 00:17:11.236 A:middle
within that nice sRGB triangle.

00:17:11.236 --> 00:17:12.596 A:middle
That's where the bulk
of the colors are.

00:17:13.596 --> 00:17:16.846 A:middle
There are however, these nice,
new vivid saturated colors

00:17:17.175 --> 00:17:20.376 A:middle
that may make sense for
your application to use.

00:17:20.786 --> 00:17:22.786 A:middle
So really it's important to
think about wide gamut content

00:17:22.786 --> 00:17:24.276 A:middle
as being a tool that you can use

00:17:24.526 --> 00:17:27.066 A:middle
where vivid colors really
enhance the user experience

00:17:27.066 --> 00:17:28.786 A:middle
and add some value
to your application.

00:17:30.116 --> 00:17:33.786 A:middle
There is no need to go and
update all of your content

00:17:34.036 --> 00:17:35.826 A:middle
and immediately upgrade
it to P3.

00:17:35.826 --> 00:17:38.056 A:middle
This is not that kind
of technology shift.

00:17:38.156 --> 00:17:40.956 A:middle
This is merely a new
creative tool that you use

00:17:41.326 --> 00:17:43.206 A:middle
where you want it,
when you want it.

00:17:43.506 --> 00:17:46.146 A:middle
And the good news is we've
enhanced the toolchain support

00:17:46.426 --> 00:17:49.726 A:middle
to make this gradual opt-in
of wide gamut possible.

00:17:51.716 --> 00:17:54.626 A:middle
So let's say you do want
to upgrade some content

00:17:54.626 --> 00:17:56.286 A:middle
to wide color, what are
some considerations?

00:17:56.656 --> 00:17:58.336 A:middle
It's really important
to be careful

00:17:58.726 --> 00:18:02.686 A:middle
when you upgrade a
design file to wide color.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.726 --> 00:18:02.686 A:middle
when you upgrade a
design file to wide color.

00:18:04.196 --> 00:18:07.476 A:middle
A common pitfall is to
just assign a new profile.

00:18:07.656 --> 00:18:10.946 A:middle
It starts out as sRB, assigning
a new wider color profile.

00:18:11.306 --> 00:18:13.986 A:middle
This is a mistake, because this
will just remap the existing

00:18:13.986 --> 00:18:15.546 A:middle
color information
into new color space.

00:18:15.806 --> 00:18:18.226 A:middle
It's a pretty effect, but it's
probably not what you want.

00:18:18.276 --> 00:18:21.136 A:middle
Because it will just stretch
all the colors out to be vivid

00:18:21.136 --> 00:18:24.546 A:middle
and the appearance of the design
file will be inevitably altered.

00:18:25.086 --> 00:18:29.866 A:middle
Instead, it's important to
use convert to P3 instead.

00:18:30.756 --> 00:18:34.156 A:middle
This will actually do a
color match operation,

00:18:34.156 --> 00:18:36.576 A:middle
your resulting design should
not change its appearance,

00:18:36.846 --> 00:18:39.446 A:middle
but it will be prepared
to go and have some

00:18:39.446 --> 00:18:41.456 A:middle
of its content boosted
up into those nice,

00:18:41.456 --> 00:18:43.476 A:middle
vivid saturated P3 colors.

00:18:45.316 --> 00:18:48.816 A:middle
When you're working on wide
gamut designs, it's important

00:18:48.816 --> 00:18:50.386 A:middle
to use, and we recommend
strongly

00:18:50.386 --> 00:18:52.426 A:middle
that you use the
Display P3 color profile

00:18:52.696 --> 00:18:54.406 A:middle
as your working document
profile.

00:18:56.026 --> 00:18:58.676 A:middle
Also to maintain
maximum color precision

00:18:58.676 --> 00:19:01.036 A:middle
and highest quality
it's a good idea to work


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.676 --> 00:19:01.036 A:middle
and highest quality
it's a good idea to work

00:19:01.036 --> 00:19:02.966 A:middle
in 16-bit per channel
color mode.

00:19:04.226 --> 00:19:08.916 A:middle
And of course, it's nice to
be able to see your designs.

00:19:09.256 --> 00:19:11.676 A:middle
So, if you are going
to be working

00:19:11.776 --> 00:19:14.246 A:middle
with wide color it's good
to do that design work

00:19:14.246 --> 00:19:16.666 A:middle
on a system capable of
rendering wide gamut color

00:19:16.666 --> 00:19:20.196 A:middle
such as the late 2015 iMac,
or other capable hardware.

00:19:20.726 --> 00:19:24.676 A:middle
When it comes time
for production,

00:19:24.676 --> 00:19:28.006 A:middle
for exporting delivering
assets, it's important

00:19:28.006 --> 00:19:32.956 A:middle
to use 16-bit PNG files with an
embedded Display P3 ICC profile.

00:19:33.286 --> 00:19:36.786 A:middle
This is sort of the gold
standard of content interchange

00:19:36.786 --> 00:19:38.426 A:middle
for wide color content.

00:19:40.416 --> 00:19:41.606 A:middle
Now, a brief note.

00:19:42.496 --> 00:19:45.766 A:middle
There are some very popular
content production workflows

00:19:45.766 --> 00:19:46.226 A:middle
out there.

00:19:46.226 --> 00:19:47.576 A:middle
They come under different names.

00:19:47.576 --> 00:19:48.526 A:middle
I'm going to talk specifically

00:19:48.526 --> 00:19:50.606 A:middle
about the Adobe Photoshop
Workflow.

00:19:50.716 --> 00:19:53.966 A:middle
They come under the names of
Save for Web and Export Assets.

00:19:54.246 --> 00:19:56.586 A:middle
Many of these workflows
have not made the transition

00:19:56.586 --> 00:19:59.826 A:middle
to wide color yet, and
they are not compatible

00:19:59.826 --> 00:20:01.946 A:middle
with exporting 16-bit
P3 content.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.826 --> 00:20:01.946 A:middle
with exporting 16-bit
P3 content.

00:20:02.246 --> 00:20:04.276 A:middle
So, stay away from them for now.

00:20:04.746 --> 00:20:08.726 A:middle
And instead use the workaround
of using save as PNG format

00:20:09.086 --> 00:20:14.916 A:middle
with 16-bit and embedded
display profile as a workaround.

00:20:14.916 --> 00:20:16.406 A:middle
Okay, so that's the
design process

00:20:16.406 --> 00:20:17.866 A:middle
and how wide color impacts that.

00:20:18.776 --> 00:20:22.036 A:middle
Now, let's talk about tools
and how they can be used

00:20:22.176 --> 00:20:24.716 A:middle
up to incorporate the
content you've produced

00:20:24.716 --> 00:20:25.886 A:middle
out of the design process.

00:20:26.256 --> 00:20:27.776 A:middle
Well the first thing
I'm going to talk about

00:20:27.776 --> 00:20:28.816 A:middle
and really the epicenter

00:20:28.816 --> 00:20:32.096 A:middle
of the content tool story
is Xcode asset catalogs.

00:20:32.556 --> 00:20:34.056 A:middle
Now you may be familiar
with this.

00:20:34.356 --> 00:20:37.596 A:middle
This is the general tool in
Xcode to allow you to organize

00:20:37.596 --> 00:20:40.136 A:middle
and catalog your image
resources, mark it up

00:20:40.136 --> 00:20:41.006 A:middle
and provide metadata,

00:20:41.006 --> 00:20:43.686 A:middle
and deliver it inside
your applications.

00:20:44.216 --> 00:20:47.576 A:middle
What do asset catalogs
do for you?

00:20:47.576 --> 00:20:49.496 A:middle
Well, they're the best
deployment vehicle

00:20:49.496 --> 00:20:50.506 A:middle
for static assets.

00:20:51.856 --> 00:20:56.286 A:middle
We automatically color
correct your source content

00:20:56.286 --> 00:20:58.536 A:middle
and optimize it for the target
that you're building for.

00:20:58.776 --> 00:21:01.676 A:middle
So even if, maybe your
designers are prefect


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.776 --> 00:21:01.676 A:middle
So even if, maybe your
designers are prefect

00:21:01.676 --> 00:21:03.866 A:middle
and always can deliver their
content with the right profile

00:21:03.866 --> 00:21:07.006 A:middle
and all the right information
in their deliverables,

00:21:07.006 --> 00:21:08.756 A:middle
but that may not
always be the case.

00:21:09.066 --> 00:21:11.326 A:middle
That's where this automatic
color correction comes in handy

00:21:11.326 --> 00:21:13.216 A:middle
to make sure that we
match and normalize it all

00:21:13.216 --> 00:21:17.896 A:middle
into the appropriate working
space for the target device.

00:21:18.046 --> 00:21:20.456 A:middle
Also, we do automatic
pixel format optimization,

00:21:20.456 --> 00:21:22.046 A:middle
making sure that the
right bit depth ends

00:21:22.046 --> 00:21:23.016 A:middle
up in the right device.

00:21:23.556 --> 00:21:27.776 A:middle
And, last, but definitely
not least,

00:21:27.776 --> 00:21:29.976 A:middle
asset catalogs are the
gateway to app slicing

00:21:30.436 --> 00:21:32.386 A:middle
which is an important component
of the thinning feature

00:21:32.386 --> 00:21:35.256 A:middle
that assures that only the
content that's relevant gets

00:21:35.256 --> 00:21:37.506 A:middle
delivered to your customers on
a particular device and none

00:21:37.506 --> 00:21:40.276 A:middle
of the content that doesn't.

00:21:40.376 --> 00:21:43.686 A:middle
So, what have we done in asset
catalogs to make it easier

00:21:43.686 --> 00:21:45.066 A:middle
to work with wide color content?

00:21:46.486 --> 00:21:49.776 A:middle
Well the first important
enhancement is we now support 16

00:21:49.776 --> 00:21:53.156 A:middle
bit source content and
provide a clean end-to-end path

00:21:53.536 --> 00:21:56.506 A:middle
for 16 bit image resources.

00:21:56.506 --> 00:21:58.566 A:middle
This, we store it
in 16 bit half load,

00:21:58.926 --> 00:22:02.266 A:middle
but it is available
for you in Xcode 8.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.926 --> 00:22:02.266 A:middle
but it is available
for you in Xcode 8.

00:22:03.196 --> 00:22:05.786 A:middle
The next important thing
we've added is the ability

00:22:05.786 --> 00:22:08.256 A:middle
to catalog a display gamut.

00:22:09.456 --> 00:22:10.116 A:middle
What does this mean?

00:22:10.116 --> 00:22:14.046 A:middle
This means that you really
introduced a new option

00:22:14.046 --> 00:22:18.946 A:middle
in the inspector to provide
and tailor optimized assets

00:22:18.946 --> 00:22:22.196 A:middle
for either the sRGB
or Display P3,

00:22:22.196 --> 00:22:25.206 A:middle
display gamuts matching devices
with those characteristics.

00:22:25.776 --> 00:22:29.036 A:middle
Okay so that's the feature.

00:22:29.036 --> 00:22:31.586 A:middle
That's what Xcode has to
offer for organizing assets.

00:22:31.586 --> 00:22:32.346 A:middle
But how do you use it?

00:22:32.346 --> 00:22:33.456 A:middle
How do you think about using it?

00:22:33.556 --> 00:22:36.986 A:middle
Well, there's really
three easy choices here.

00:22:37.176 --> 00:22:40.996 A:middle
Choice number one, do nothing.

00:22:42.386 --> 00:22:44.686 A:middle
This may seem radical, but it is

00:22:44.686 --> 00:22:47.916 A:middle
in fact a perfectly
valid thing to do.

00:22:48.146 --> 00:22:50.466 A:middle
Because if you make no
changes to your asset catalog,

00:22:50.466 --> 00:22:52.326 A:middle
you may not need any of
these new vivid colors,

00:22:52.326 --> 00:22:56.046 A:middle
we will continue to render your
8 bit sRGB content faithfully

00:22:56.396 --> 00:22:57.306 A:middle
on all devices.

00:22:57.736 --> 00:22:58.676 A:middle
So nothing will change.

00:22:58.676 --> 00:23:00.516 A:middle
You don't need to go
update everything just


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.676 --> 00:23:00.516 A:middle
You don't need to go
update everything just

00:23:00.516 --> 00:23:02.256 A:middle
to make sure it works
on this new hardware.

00:23:02.346 --> 00:23:04.476 A:middle
So this is a perfectly
valid option.

00:23:04.476 --> 00:23:08.376 A:middle
Of course, this does mean
your app will not contain any

00:23:08.376 --> 00:23:09.096 A:middle
wide colors.

00:23:09.946 --> 00:23:11.906 A:middle
That's a perfectly
fine design choice.

00:23:12.326 --> 00:23:14.656 A:middle
That's the outcome of
this deployment choice.

00:23:15.316 --> 00:23:17.186 A:middle
So let's say you do want

00:23:17.186 --> 00:23:19.676 A:middle
to use some wide color
in your application.

00:23:19.896 --> 00:23:21.056 A:middle
Brings us to choice number two.

00:23:21.136 --> 00:23:23.236 A:middle
Upgrade to P3.

00:23:24.536 --> 00:23:27.436 A:middle
So, the way this
works is something we

00:23:27.436 --> 00:23:29.006 A:middle
like to call Universal P3 Asset.

00:23:29.506 --> 00:23:33.986 A:middle
So, all it involves is taking
a 16 bit Display P3 file

00:23:33.986 --> 00:23:35.016 A:middle
that you may have gotten
from your designer,

00:23:35.016 --> 00:23:37.486 A:middle
and just replace your existing
asset in the asset catalog

00:23:37.746 --> 00:23:39.256 A:middle
with this upgraded asset.

00:23:40.846 --> 00:23:42.626 A:middle
What happens at build
time is we're going

00:23:42.626 --> 00:23:45.336 A:middle
to automatically generate
an sRGB derivative

00:23:45.876 --> 00:23:48.656 A:middle
from that 16 bit
Universal Display P3 master.

00:23:48.916 --> 00:23:51.296 A:middle
We're going to do a
high-quality color match,

00:23:51.426 --> 00:23:53.606 A:middle
and a high quality
dither down to that 8 bit.

00:23:54.116 --> 00:23:56.946 A:middle
And then of course at
thinning and content selection,

00:23:56.946 --> 00:23:59.616 A:middle
we're make sure the right
content variant gets selected

00:23:59.616 --> 00:24:01.286 A:middle
on the appropriate device.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.616 --> 00:24:01.286 A:middle
on the appropriate device.

00:24:03.176 --> 00:24:04.906 A:middle
But let's say you're
not really happy

00:24:04.906 --> 00:24:07.636 A:middle
with this automatic conversion
and you want full control.

00:24:08.346 --> 00:24:10.546 A:middle
Well the good news is we
have that for you as well.

00:24:10.546 --> 00:24:13.186 A:middle
And that's choice number
three, optimize assets.

00:24:13.736 --> 00:24:15.456 A:middle
It's a very simple option.

00:24:15.456 --> 00:24:20.876 A:middle
It's basically, you provide
a 16 bit Display P3 content

00:24:20.876 --> 00:24:23.046 A:middle
and your original
8 bit sRGB content.

00:24:23.306 --> 00:24:25.946 A:middle
We provide places for
you to organize both

00:24:25.946 --> 00:24:26.896 A:middle
of those in the asset catalog.

00:24:27.216 --> 00:24:29.416 A:middle
And they'll get built
into your app and selected

00:24:29.416 --> 00:24:30.276 A:middle
and thinned appropriately.

00:24:31.426 --> 00:24:36.946 A:middle
Okay, that's wide color
assets and asset catalogs.

00:24:38.266 --> 00:24:40.366 A:middle
I'd like to now give
a demonstration

00:24:40.366 --> 00:24:45.456 A:middle
of creating content.

00:24:45.456 --> 00:24:49.966 A:middle
Okay, so let's say I've got
this beautiful hue wheel here.

00:24:56.336 --> 00:24:58.656 A:middle
Let's say I have this
beautiful hue wheel here.

00:24:58.776 --> 00:24:59.306 A:middle
There we go.

00:24:59.306 --> 00:25:00.116 A:middle
That's much better.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.306 --> 00:25:00.116 A:middle
That's much better.

00:25:00.816 --> 00:25:04.346 A:middle
And I really decided this
really could in fact benefit

00:25:04.346 --> 00:25:06.096 A:middle
from some more vivid
saturated colors.

00:25:06.596 --> 00:25:07.416 A:middle
How is this done?

00:25:07.726 --> 00:25:08.736 A:middle
Let's take a look at this here.

00:25:08.736 --> 00:25:10.836 A:middle
This is just a simple gradient
here, a radial gradient.

00:25:10.836 --> 00:25:13.306 A:middle
And I just want to call
out here this point

00:25:13.306 --> 00:25:16.286 A:middle
in the gradient is a
pure saturated green.

00:25:17.496 --> 00:25:18.786 A:middle
Okay, that's what
I'm starting with.

00:25:20.376 --> 00:25:22.266 A:middle
So what do I do to upgrade it?

00:25:22.266 --> 00:25:24.336 A:middle
Well the first thing
I'm going to do

00:25:24.756 --> 00:25:28.096 A:middle
because I'm an organized type,
is I'm going to create a copy

00:25:28.096 --> 00:25:30.276 A:middle
of this and not just
destroy the existing asset,

00:25:30.276 --> 00:25:34.646 A:middle
I'm going to name it
something new here.

00:25:34.646 --> 00:25:36.776 A:middle
And, okay now I'm ready to work.

00:25:37.396 --> 00:25:39.806 A:middle
So the first thing I'm going to
do is I'm going to update this

00:25:39.806 --> 00:25:41.716 A:middle
to 16 bits per channel.

00:25:42.806 --> 00:25:44.146 A:middle
Now, we're ready
to work in 16 bit.

00:25:44.396 --> 00:25:47.846 A:middle
And now the all-important
convert to profile.

00:25:49.186 --> 00:25:51.876 A:middle
And what I'm going to do
is I'm going to change this

00:25:51.876 --> 00:25:54.486 A:middle
to the Display P3 color profile.

00:25:56.416 --> 00:25:58.286 A:middle
Okay, now we're ready to go.

00:25:58.666 --> 00:26:01.136 A:middle
In fact, I can confirm with
document profile down here,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.666 --> 00:26:01.136 A:middle
In fact, I can confirm with
document profile down here,

00:26:01.506 --> 00:26:03.606 A:middle
Display P3, 16 bits
per component.

00:26:03.606 --> 00:26:04.186 A:middle
I'm good to go.

00:26:04.666 --> 00:26:05.596 A:middle
Okay, so now let's take a look

00:26:05.596 --> 00:26:06.696 A:middle
at what happened
to that gradient.

00:26:06.786 --> 00:26:09.636 A:middle
And look at our favorite
green here.

00:26:10.956 --> 00:26:12.146 A:middle
Okay, so that's interesting
right?

00:26:12.606 --> 00:26:13.926 A:middle
That green it didn't change.

00:26:13.926 --> 00:26:16.616 A:middle
Notice that the hue wheel didn't
change its appearance at all.

00:26:16.706 --> 00:26:18.436 A:middle
That was actually the
intended goal of converting,

00:26:18.536 --> 00:26:19.246 A:middle
as opposed to assigning.

00:26:20.126 --> 00:26:21.916 A:middle
But I'm left with
the same green now,

00:26:21.916 --> 00:26:23.466 A:middle
being only 70 percent saturated.

00:26:23.466 --> 00:26:26.096 A:middle
Well this really indicates just
how much head room there really

00:26:26.096 --> 00:26:29.286 A:middle
is to punch out into
that wider gamut

00:26:29.286 --> 00:26:31.226 A:middle
and deploy a more purer green.

00:26:31.806 --> 00:26:34.496 A:middle
So, well let's say I want to
do that, but I don't want to be

00:26:34.496 --> 00:26:37.386 A:middle
on stage all day, I'm just going
to reapply the gradient preset.

00:26:37.676 --> 00:26:41.246 A:middle
Now everything should be
back to what it was before,

00:26:41.246 --> 00:26:43.396 A:middle
100 percent saturated, but now

00:26:43.826 --> 00:26:47.326 A:middle
in that pure P3 wide
color space.

00:26:47.986 --> 00:26:48.566 A:middle
So there we are.

00:26:48.566 --> 00:26:52.796 A:middle
Now I have my beautiful asset,
I'm going to go ahead and save.

00:26:52.996 --> 00:26:56.436 A:middle
And of course this is just a
design file, I can't use it

00:26:56.436 --> 00:26:58.826 A:middle
in my app until I save it.

00:26:58.826 --> 00:26:59.906 A:middle
So I'm going to do that.

00:26:59.906 --> 00:27:01.936 A:middle
I'm going to save it as, whoops
not as a [inaudible] but as PNG.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.906 --> 00:27:01.936 A:middle
I'm going to save it as, whoops
not as a [inaudible] but as PNG.

00:27:01.936 --> 00:27:05.676 A:middle
I'm going to make sure to
embed the color profile.

00:27:06.846 --> 00:27:07.886 A:middle
And save it.

00:27:08.956 --> 00:27:10.126 A:middle
And viola I'm done.

00:27:10.346 --> 00:27:11.766 A:middle
Well, actually I'm not done,

00:27:11.766 --> 00:27:13.006 A:middle
I've just finished
the design process.

00:27:13.006 --> 00:27:14.466 A:middle
I haven't incorporated
it into my app.

00:27:15.256 --> 00:27:17.196 A:middle
So, let's go do that.

00:27:20.496 --> 00:27:21.176 A:middle
Where's my app?

00:27:21.236 --> 00:27:21.666 A:middle
There's my app.

00:27:22.196 --> 00:27:24.336 A:middle
So here's my app, unmodified.

00:27:24.636 --> 00:27:27.416 A:middle
Here's my existing
sRGB P3 hue wheel.

00:27:28.776 --> 00:27:30.836 A:middle
Well, what I want to do here
is I want to go over here

00:27:30.836 --> 00:27:35.256 A:middle
to the pop-up here to expose
the sRGB and Display P3 gamut.

00:27:35.606 --> 00:27:37.586 A:middle
This will immediately
reveal a couple

00:27:37.586 --> 00:27:38.956 A:middle
of additional cataloging
options.

00:27:39.516 --> 00:27:42.056 A:middle
And I take my P3 hue wheel

00:27:42.056 --> 00:27:44.006 A:middle
and just drop it
right into that slot.

00:27:44.626 --> 00:27:45.356 A:middle
And I'm ready to go.

00:27:45.356 --> 00:27:48.856 A:middle
Now if I build in run, it
will compile both of these

00:27:48.856 --> 00:27:50.006 A:middle
into my asset catalog.

00:27:50.206 --> 00:27:52.716 A:middle
And if I was running on
an iPad Pro 9.7 inch,

00:27:53.026 --> 00:27:56.046 A:middle
I would be getting the
16-bit Display P3 asset,

00:27:56.366 --> 00:27:59.076 A:middle
whereas on an sRGB
device like an iPhone 6,

00:27:59.346 --> 00:28:01.876 A:middle
I would be getting this asset.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.346 --> 00:28:01.876 A:middle
I would be getting this asset.

00:28:02.076 --> 00:28:07.536 A:middle
Okay. That's incorporating
content into your application.

00:28:11.316 --> 00:28:13.346 A:middle
Okay so we talked about tools

00:28:14.336 --> 00:28:15.686 A:middle
and how they work
with live content.

00:28:15.926 --> 00:28:18.166 A:middle
Now it's time to talk about some
of the deployment considerations

00:28:18.166 --> 00:28:19.696 A:middle
and what happens after
you've used that tool

00:28:19.696 --> 00:28:22.036 A:middle
and how it might impact the
running of your application.

00:28:23.286 --> 00:28:27.786 A:middle
So, with asset catalog
deployment, app slicing is going

00:28:27.786 --> 00:28:30.356 A:middle
to ensure that the
appropriate variant is delivered

00:28:30.356 --> 00:28:31.446 A:middle
to a given device.

00:28:31.826 --> 00:28:32.796 A:middle
And this is really important

00:28:32.796 --> 00:28:35.026 A:middle
because this is potentially a
lot more content now that's part

00:28:35.026 --> 00:28:35.766 A:middle
of your application.

00:28:36.526 --> 00:28:38.416 A:middle
And, with that slicing,

00:28:38.696 --> 00:28:40.666 A:middle
we ensure that there's
no payload cost

00:28:40.836 --> 00:28:42.586 A:middle
for your actual end-user
customers

00:28:42.586 --> 00:28:45.736 A:middle
for adding this wide gamut
content into your application,

00:28:45.736 --> 00:28:47.456 A:middle
because we make sure
that with app slicing,

00:28:47.776 --> 00:28:50.136 A:middle
wide gamut content only
goes to wide gamut devices,

00:28:50.496 --> 00:28:52.416 A:middle
sRGB content goes
to all the rest.

00:28:52.876 --> 00:28:55.006 A:middle
And it doesn't waste
space on the devices

00:28:55.006 --> 00:28:56.066 A:middle
that it's not relevant for.

00:28:56.596 --> 00:29:01.996 A:middle
On the Mac, there's
actually nothing new here,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:56.596 --> 00:29:01.996 A:middle
On the Mac, there's
actually nothing new here,

00:29:01.996 --> 00:29:04.546 A:middle
NSImage has always been able to
select the best representation

00:29:04.546 --> 00:29:07.736 A:middle
from available representations
in the asset catalog.

00:29:07.736 --> 00:29:11.156 A:middle
It's going to continue to do
so based on the characteristics

00:29:11.156 --> 00:29:12.036 A:middle
of your target display.

00:29:12.296 --> 00:29:14.976 A:middle
So if you are on a wide
gamut iMac for example

00:29:14.976 --> 00:29:18.646 A:middle
and you have P3 content
available in your asset catalog,

00:29:18.646 --> 00:29:20.536 A:middle
it's going to go
ahead and select

00:29:20.536 --> 00:29:22.456 A:middle
that when rendering its content.

00:29:22.976 --> 00:29:27.116 A:middle
Also, just like the behavior
with 1X and 2X assets

00:29:27.116 --> 00:29:29.366 A:middle
on the Mac, NSImage
and NSImage View

00:29:29.366 --> 00:29:31.226 A:middle
and all the related app
kit classes make sure

00:29:31.226 --> 00:29:33.136 A:middle
to refresh the content
automatically

00:29:33.136 --> 00:29:35.066 A:middle
when the display
characteristics change.

00:29:35.316 --> 00:29:37.336 A:middle
Such as when your window
goes before the internal

00:29:37.336 --> 00:29:40.906 A:middle
and the external display, or
the color characteristics,

00:29:40.906 --> 00:29:42.616 A:middle
or back end scale
factor changes.

00:29:43.806 --> 00:29:44.386 A:middle
So that's great.

00:29:45.046 --> 00:29:47.746 A:middle
Okay, but how is this
data actually stored

00:29:47.746 --> 00:29:51.056 A:middle
and what impact can that
have on your application?

00:29:51.826 --> 00:29:55.646 A:middle
Well the good news is that at
build time we tried really hard

00:29:55.646 --> 00:29:59.136 A:middle
to optimize the pixel formats
and storage characteristics

00:29:59.176 --> 00:30:01.676 A:middle
of all your image content
in the asset catalog.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.176 --> 00:30:01.676 A:middle
of all your image content
in the asset catalog.

00:30:02.556 --> 00:30:04.736 A:middle
And do so in as efficient
a way as possible,

00:30:04.736 --> 00:30:06.806 A:middle
to the best of our
ability anyways.

00:30:07.156 --> 00:30:10.236 A:middle
We do now use 16 bit
per component storage

00:30:10.596 --> 00:30:12.496 A:middle
for wide color content.

00:30:12.856 --> 00:30:13.776 A:middle
I mentioned this before.

00:30:13.776 --> 00:30:17.356 A:middle
This really allows you to
have end-to-end 16 bit color

00:30:17.356 --> 00:30:20.256 A:middle
precision in your
application resources.

00:30:21.466 --> 00:30:24.186 A:middle
And, we also have compression.

00:30:25.356 --> 00:30:29.416 A:middle
Now this is quite handy because
more data, 16 bit versus 8 bit.

00:30:29.816 --> 00:30:32.666 A:middle
More information is
inevitably going to lead

00:30:32.786 --> 00:30:35.296 A:middle
to large footprint unless
you apply compression.

00:30:35.296 --> 00:30:36.496 A:middle
Now, we've always
had compression,

00:30:36.496 --> 00:30:37.866 A:middle
we've always had
lossless compression.

00:30:38.496 --> 00:30:40.716 A:middle
Akin to what happens
with say PNG files.

00:30:41.646 --> 00:30:45.566 A:middle
But what's new this year is
some lossy compression options

00:30:45.566 --> 00:30:50.016 A:middle
to help counteract, you
know app footprint size.

00:30:50.016 --> 00:30:53.696 A:middle
The first one of these is what
we call basic compression.

00:30:54.106 --> 00:30:57.436 A:middle
Now this is a compression system
that's almost exactly like JPEG,

00:30:57.436 --> 00:30:59.836 A:middle
except the added bonus that it
actually handles transparency

00:30:59.836 --> 00:31:00.566 A:middle
and alpha as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.836 --> 00:31:00.566 A:middle
and alpha as well.

00:31:01.156 --> 00:31:04.416 A:middle
It has a similar
visual characteristics

00:31:04.416 --> 00:31:05.966 A:middle
and performance characteristics.

00:31:06.436 --> 00:31:10.676 A:middle
And the great news is it
really performs really well,

00:31:10.906 --> 00:31:13.246 A:middle
on almost all, on
all devices really.

00:31:13.246 --> 00:31:14.156 A:middle
Just like JPEG does.

00:31:14.156 --> 00:31:16.066 A:middle
So it's something you can count

00:31:16.066 --> 00:31:19.736 A:middle
on to give a very slight
reduction in visual quality

00:31:19.736 --> 00:31:21.616 A:middle
to get a really excellent
storage characteristics.

00:31:23.056 --> 00:31:25.146 A:middle
Now, new this year as well,

00:31:25.146 --> 00:31:27.476 A:middle
we have this exciting option
called GPU compression

00:31:27.476 --> 00:31:28.706 A:middle
using ASTC.

00:31:29.966 --> 00:31:32.776 A:middle
So this stands for Advanced
Scalable Texture Compression,

00:31:32.776 --> 00:31:36.626 A:middle
which is a GPU compressed
textured pixel format,

00:31:36.956 --> 00:31:41.376 A:middle
which many modern GPUs
on Apple devices as well

00:31:41.376 --> 00:31:42.626 A:middle
as other systems support.

00:31:44.336 --> 00:31:48.176 A:middle
And we have brought this
option to you in asset catalogs

00:31:48.176 --> 00:31:49.786 A:middle
in two different forms.

00:31:50.016 --> 00:31:54.296 A:middle
One is GPU best quality,
which is a constant bit rate,

00:31:54.296 --> 00:31:56.856 A:middle
4 bits per pixel,
ASTC compression mode.

00:31:57.126 --> 00:31:59.296 A:middle
Which is a great choice,
roughly analogous in terms

00:31:59.296 --> 00:32:02.946 A:middle
of visual performance and visual
fidelity to high quality JPEG.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.296 --> 00:32:02.946 A:middle
of visual performance and visual
fidelity to high quality JPEG.

00:32:03.436 --> 00:32:07.786 A:middle
And then we also have
GPU smallest size

00:32:07.786 --> 00:32:10.226 A:middle
where if you're really wanting
to optimize your footprint

00:32:10.456 --> 00:32:11.496 A:middle
and your memory footprint,

00:32:11.856 --> 00:32:14.576 A:middle
greatly then you
choose this size

00:32:14.576 --> 00:32:16.696 A:middle
and that's a 1 bit per pixel
constant bit rate codec

00:32:16.696 --> 00:32:18.356 A:middle
which has excellent
storage characteristics.

00:32:19.646 --> 00:32:23.306 A:middle
Of course, since not
every GPU on every device

00:32:23.306 --> 00:32:27.236 A:middle
that is supported today
can use the ASTC format,

00:32:28.476 --> 00:32:29.706 A:middle
we take an extra step for you

00:32:29.706 --> 00:32:33.786 A:middle
and automatically generate a
software fallback for devices

00:32:33.786 --> 00:32:34.986 A:middle
that lack that capability.

00:32:35.336 --> 00:32:37.386 A:middle
What's great about this is it
means you don't have to worry

00:32:37.856 --> 00:32:40.426 A:middle
about having incompatibilities
of your content

00:32:40.736 --> 00:32:41.986 A:middle
for all the supported devices,

00:32:41.986 --> 00:32:43.546 A:middle
we're going to automatically
generate that fallback,

00:32:43.546 --> 00:32:45.516 A:middle
and use it and thin it,
and route it appropriately

00:32:45.516 --> 00:32:47.646 A:middle
to those devices that
cannot support ASTC.

00:32:48.816 --> 00:32:53.476 A:middle
So you can use GPU compression
without any real risk

00:32:53.476 --> 00:32:54.606 A:middle
of compatibility breakage.

00:32:55.586 --> 00:32:58.466 A:middle
A brief note about how
GPU compression interacts

00:32:58.466 --> 00:33:00.176 A:middle
with wide color assets
specifically.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.466 --> 00:33:00.176 A:middle
with wide color assets
specifically.

00:33:01.166 --> 00:33:07.126 A:middle
So, we use the ASTC Low Dynamic
Range, or LDR compression mode,

00:33:07.476 --> 00:33:09.796 A:middle
which really means that
wide content actually needs

00:33:09.796 --> 00:33:12.186 A:middle
to be reduced to 8 bits
before compression,

00:33:12.186 --> 00:33:15.536 A:middle
because LDR is an 8 bits per
sample compression format.

00:33:16.486 --> 00:33:18.976 A:middle
The good news is we
perform this work for you.

00:33:18.976 --> 00:33:21.356 A:middle
We automatically do perform
a high quality dither

00:33:21.746 --> 00:33:24.876 A:middle
down to 8 bit at build time when
we're processing your images.

00:33:26.186 --> 00:33:29.016 A:middle
But we preserve the wide gamut
colors that may be contained

00:33:29.016 --> 00:33:32.086 A:middle
within your original 16 bit
source content by encoding

00:33:32.466 --> 00:33:35.436 A:middle
and compressing in the
Display P3 color space,

00:33:35.586 --> 00:33:38.676 A:middle
thus preserving the ability
to represent all of the colors

00:33:38.676 --> 00:33:40.326 A:middle
within the Display P3 gamut.

00:33:42.596 --> 00:33:44.346 A:middle
Okay, so that's the deployment.

00:33:44.346 --> 00:33:46.046 A:middle
A little talk about
deployment characteristic,

00:33:46.596 --> 00:33:49.236 A:middle
but this talk was
supposedly about colors.

00:33:49.356 --> 00:33:50.416 A:middle
Well what about colors?

00:33:51.476 --> 00:33:53.076 A:middle
Specifically colors in UI.

00:33:55.296 --> 00:33:58.246 A:middle
An important observation is
that most of the pixels you see

00:33:58.246 --> 00:34:00.656 A:middle
on screen drawn by
most applications,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.246 --> 00:34:00.656 A:middle
on screen drawn by
most applications,

00:34:00.656 --> 00:34:02.336 A:middle
don't come from images,
even though they tend

00:34:02.336 --> 00:34:04.806 A:middle
to get top billing
in this kind of talk.

00:34:05.076 --> 00:34:07.506 A:middle
Most pixels on screen are
actually solid colors drawn

00:34:07.506 --> 00:34:09.156 A:middle
by your code in your
application.

00:34:10.416 --> 00:34:13.585 A:middle
And wide gamut colors it turns
out, can present new challenges

00:34:13.585 --> 00:34:16.326 A:middle
in just working at
that simple level.

00:34:16.456 --> 00:34:17.746 A:middle
So let's talk about that.

00:34:18.835 --> 00:34:21.116 A:middle
In particular, the first
challenge I'd like to talk

00:34:21.116 --> 00:34:22.866 A:middle
about is actually
talking about colors,

00:34:22.866 --> 00:34:24.516 A:middle
because this is an
under-appreciated problem,

00:34:25.065 --> 00:34:26.315 A:middle
under-appreciate problem.

00:34:27.226 --> 00:34:30.315 A:middle
Usually when designers
and engineers communicate

00:34:30.315 --> 00:34:32.516 A:middle
in written form, or
perhaps even verbal form,

00:34:32.815 --> 00:34:35.755 A:middle
or visual form code is
usually communicated

00:34:35.755 --> 00:34:38.136 A:middle
with an assumed sRGB
color space.

00:34:38.596 --> 00:34:41.206 A:middle
That means you're probably
used to seeing colors written

00:34:41.206 --> 00:34:44.896 A:middle
down as something like
this, RGB 128, 45, 56.

00:34:45.755 --> 00:34:46.456 A:middle
You know very simple.

00:34:46.456 --> 00:34:47.775 A:middle
They don't tell you what
color space they're in.

00:34:48.096 --> 00:34:50.266 A:middle
And it's just assumed everybody
knows what color that is,

00:34:50.295 --> 00:34:52.416 A:middle
because everybody's
using sRGB, aren't they?

00:34:53.156 --> 00:34:54.426 A:middle
Well, not anymore.

00:34:55.545 --> 00:34:58.896 A:middle
This is no longer sufficient for
working with wide gamut colors?

00:34:59.586 --> 00:35:00.336 A:middle
So what do you do?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.586 --> 00:35:00.336 A:middle
So what do you do?

00:35:00.476 --> 00:35:02.996 A:middle
Well the most important step
you can take is be specific

00:35:02.996 --> 00:35:05.416 A:middle
about what color space you're
working in when you communicate,

00:35:05.416 --> 00:35:09.056 A:middle
or write down, or, you
know, transmit that color.

00:35:09.236 --> 00:35:13.016 A:middle
Use Display P3, instead of
sRGB when you're working

00:35:13.016 --> 00:35:14.106 A:middle
on wide gamut designs.

00:35:14.646 --> 00:35:15.746 A:middle
And indicate that as such.

00:35:16.306 --> 00:35:18.226 A:middle
And if you need more
precision than 0

00:35:18.226 --> 00:35:21.826 A:middle
to 255 8-bit representation
can give you then go ahead

00:35:21.826 --> 00:35:22.596 A:middle
and use floating point.

00:35:23.086 --> 00:35:26.126 A:middle
So as an example, next time
you're sending colors in email,

00:35:26.736 --> 00:35:28.616 A:middle
maybe you'll refer to them
as something like this,

00:35:28.726 --> 00:35:35.456 A:middle
with an annotation, P3
255, 128, 191, etcetera.

00:35:35.556 --> 00:35:37.506 A:middle
Okay that's how you communicate
a color, but where did

00:35:37.506 --> 00:35:39.466 A:middle
that color come from
in the first place.

00:35:39.466 --> 00:35:40.256 A:middle
You probably picked it,

00:35:40.256 --> 00:35:41.596 A:middle
the designer probably
picked it somewhere.

00:35:41.866 --> 00:35:42.516 A:middle
How do they pick it?

00:35:42.846 --> 00:35:45.056 A:middle
Using a color panel.

00:35:45.056 --> 00:35:47.716 A:middle
This is the standard color panel
that gets shipped with the Mac,

00:35:47.716 --> 00:35:49.896 A:middle
it's part of AppKits,
known as NSColorPanel.

00:35:50.136 --> 00:35:56.396 A:middle
This of course is a very
familiar UI, but it also suffers

00:35:56.396 --> 00:35:57.956 A:middle
from some of the
limitations we just talked

00:35:57.956 --> 00:35:58.986 A:middle
about in calling colors.

00:35:58.986 --> 00:36:00.156 A:middle
Typically, you pick red,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.986 --> 00:36:00.156 A:middle
Typically, you pick red,

00:36:00.156 --> 00:36:02.256 A:middle
green and blue values,
0 to 55 numbers.

00:36:02.606 --> 00:36:05.506 A:middle
The color panel is
always supported selecting

00:36:05.506 --> 00:36:06.306 A:middle
in different color spaces,

00:36:06.306 --> 00:36:08.376 A:middle
but that hasn't always
been a very obvious

00:36:08.376 --> 00:36:09.756 A:middle
or easy user experience.

00:36:10.436 --> 00:36:12.856 A:middle
So I'm excited to say that we've
actually made some enhancements

00:36:12.896 --> 00:36:15.636 A:middle
in the color panel, in
macOS Sierra to make working

00:36:15.636 --> 00:36:16.866 A:middle
with wide color a little easier.

00:36:17.666 --> 00:36:21.716 A:middle
The first thing we've done
is we've put the most common

00:36:21.716 --> 00:36:24.756 A:middle
and important working spaces,
mainly Display P3 and sRGB,

00:36:25.046 --> 00:36:28.256 A:middle
right up there in a
context in the action menu

00:36:28.256 --> 00:36:32.696 A:middle
for the number picker, sRGB,
and of course Display P3.

00:36:33.056 --> 00:36:35.666 A:middle
The next thing we've done is
we've actually allowed an option

00:36:35.666 --> 00:36:38.776 A:middle
to change the numerical
representation of the colors

00:36:38.776 --> 00:36:39.966 A:middle
from integer to floating point.

00:36:40.456 --> 00:36:43.886 A:middle
So that you can standardize
on floating point colors

00:36:43.886 --> 00:36:45.246 A:middle
if that works for your workflow.

00:36:46.616 --> 00:36:50.516 A:middle
Another exciting thing we've
done is in the hue wheel,

00:36:50.656 --> 00:36:54.856 A:middle
or wheel picker, we've actually
changed its implementation

00:36:54.856 --> 00:36:58.496 A:middle
so that it can actually render
the full gamut of P3 colors

00:36:58.966 --> 00:37:00.866 A:middle
when placed on an
appropriate display.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.966 --> 00:37:00.866 A:middle
when placed on an
appropriate display.

00:37:02.276 --> 00:37:05.516 A:middle
And we've added a new
context menu that allows you

00:37:05.516 --> 00:37:07.696 A:middle
to either use this
automatic behavior,

00:37:07.696 --> 00:37:11.346 A:middle
where it just basically switches
its capability between P3

00:37:11.346 --> 00:37:13.286 A:middle
and sRGB as you cross displays,

00:37:13.286 --> 00:37:15.266 A:middle
or pin it to a specific
color space,

00:37:15.966 --> 00:37:19.436 A:middle
if that's more what
you'd like to see.

00:37:19.656 --> 00:37:22.786 A:middle
Okay, now we've picked
our colors,

00:37:22.786 --> 00:37:23.856 A:middle
we know how to communicate them.

00:37:23.856 --> 00:37:25.136 A:middle
Well, to actually make
anything happen we have

00:37:25.136 --> 00:37:25.896 A:middle
to code them don't we?

00:37:26.426 --> 00:37:28.686 A:middle
How do we construct wide
gamut colors in code?

00:37:30.056 --> 00:37:33.496 A:middle
We've introduced two new
convenience constructors

00:37:33.496 --> 00:37:37.356 A:middle
in AppKit and UIKit to
take Display P3 color

00:37:37.356 --> 00:37:38.086 A:middle
numbers directly.

00:37:39.036 --> 00:37:41.396 A:middle
This is NSColor Display P3
red, green, blue, alpha,

00:37:41.396 --> 00:37:43.656 A:middle
and UIColor Display P3
red, green, blue, alpha.

00:37:43.936 --> 00:37:45.986 A:middle
Great way to work with P3
colors from your designer.

00:37:46.266 --> 00:37:49.126 A:middle
But of course your code
may actually be working

00:37:49.126 --> 00:37:52.456 A:middle
with extended range sRGB
colors that maybe didn't come

00:37:52.456 --> 00:37:54.746 A:middle
from a designer, but maybe came
from a different subsystem,

00:37:55.086 --> 00:37:56.886 A:middle
or an API that might
have vended,

00:37:56.886 --> 00:37:58.836 A:middle
you know extended
range sRGB to colors.

00:37:59.266 --> 00:38:00.326 A:middle
How do you work with those?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.266 --> 00:38:00.326 A:middle
How do you work with those?

00:38:00.806 --> 00:38:05.186 A:middle
Well the good news is we've
extended the existing standard

00:38:05.186 --> 00:38:07.766 A:middle
red, green, blue alpha
constructors for NSColor

00:38:07.766 --> 00:38:11.206 A:middle
and UIColor color to not
clamp their input components

00:38:11.206 --> 00:38:13.366 A:middle
and allow values to
be expressed greater

00:38:13.366 --> 00:38:14.666 A:middle
than one and less than zero.

00:38:15.026 --> 00:38:17.846 A:middle
So now you can construct
extended range sRGB colors

00:38:17.846 --> 00:38:20.406 A:middle
very easily.

00:38:20.596 --> 00:38:23.126 A:middle
Okay, now storing colors.

00:38:24.456 --> 00:38:28.116 A:middle
What if you actually
have to like put colors

00:38:28.116 --> 00:38:30.746 A:middle
into your document data, or
archive them in some form?

00:38:31.186 --> 00:38:34.056 A:middle
Well special care really needs
to be taken when doing that,

00:38:34.376 --> 00:38:37.896 A:middle
because like many other
parts of the ecosystem,

00:38:38.276 --> 00:38:40.236 A:middle
there has traditionally
been a lot of assumptions

00:38:40.236 --> 00:38:42.896 A:middle
of assumed color spaces and
assuming everybody's talking

00:38:42.896 --> 00:38:44.306 A:middle
about the same thing
when you pass a red,

00:38:44.306 --> 00:38:45.146 A:middle
green and blue number.

00:38:45.146 --> 00:38:47.426 A:middle
All you should ever need
is three numbers, right?

00:38:47.426 --> 00:38:48.616 A:middle
That's all you need
to represent a color.

00:38:48.616 --> 00:38:49.606 A:middle
What could be wrong with that?

00:38:50.136 --> 00:38:51.046 A:middle
Well it turns out there is.

00:38:51.546 --> 00:38:54.786 A:middle
Because you may not be able to
disambiguate between an sRGB

00:38:54.786 --> 00:38:56.826 A:middle
and a P3 color, and you may
make the wrong choice and end

00:38:56.826 --> 00:38:59.206 A:middle
up with the wrong
color in your document.

00:38:59.426 --> 00:39:02.206 A:middle
So I'd like you to
consider, perhaps,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.426 --> 00:39:02.206 A:middle
So I'd like you to
consider, perhaps,

00:39:02.206 --> 00:39:07.236 A:middle
encoding a compatible sRGB color
alongside the new wide gamut

00:39:07.236 --> 00:39:10.046 A:middle
color, which allows
your application,

00:39:10.046 --> 00:39:12.316 A:middle
especially older versions
of your application,

00:39:12.316 --> 00:39:13.986 A:middle
because since this is
document data, you have forward

00:39:13.986 --> 00:39:15.946 A:middle
and backward compatibility
to consider.

00:39:16.556 --> 00:39:19.946 A:middle
Allows the older applications to
continue pulling that sRGB data

00:39:19.946 --> 00:39:21.446 A:middle
and treat it as if it was sRGB,

00:39:21.446 --> 00:39:22.806 A:middle
which is the assumption
it's making.

00:39:23.406 --> 00:39:25.196 A:middle
Whereas the newer
software can know

00:39:25.196 --> 00:39:28.486 A:middle
about this new wide gamut code
that you've stored alongside it.

00:39:28.806 --> 00:39:31.406 A:middle
How do you create that
compatible sRGB color?

00:39:31.406 --> 00:39:34.046 A:middle
On iOS you can use the
CGColor.convert API.

00:39:34.966 --> 00:39:36.796 A:middle
And on the macOS you
can use the venerable

00:39:36.896 --> 00:39:39.826 A:middle
NSColor.usingColorSpace
API to convert those colors

00:39:39.826 --> 00:39:41.076 A:middle
to the sRGB color space.

00:39:42.176 --> 00:39:45.686 A:middle
We actually ran into this in
the system itself in macOS.

00:39:46.246 --> 00:39:49.246 A:middle
You may be familiar
with TextEdit.

00:39:49.246 --> 00:39:51.256 A:middle
And the text editor
app on the Mac.

00:39:51.666 --> 00:39:54.626 A:middle
And its document format is
RTF, or rich text format,

00:39:54.626 --> 00:39:56.956 A:middle
which has been around
and is supported

00:39:56.956 --> 00:39:59.586 A:middle
by the Cocoa Text System as its
needed document storage format.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.046 --> 00:40:03.556 A:middle
And it turns out that when you
actually applied a color to say,

00:40:03.556 --> 00:40:05.886 A:middle
a range of text, the way
it would actually store

00:40:05.886 --> 00:40:10.316 A:middle
that in the RTF document was
in fact as just simple red,

00:40:10.316 --> 00:40:12.856 A:middle
green, blue, 0 to 55 values.

00:40:13.396 --> 00:40:15.776 A:middle
Which is kind of a problem, I
think you'll understand now,

00:40:15.776 --> 00:40:18.106 A:middle
because we have no idea which
color space those red, green,

00:40:18.106 --> 00:40:19.816 A:middle
blue values are in, and
it doesn't allow you

00:40:19.816 --> 00:40:20.876 A:middle
to express the full range.

00:40:21.686 --> 00:40:23.306 A:middle
So, we had to take action.

00:40:23.566 --> 00:40:27.016 A:middle
What we ended up doing
is revving the RTF spec

00:40:27.016 --> 00:40:30.616 A:middle
and how we write and read
RTF on our platform at least.

00:40:31.216 --> 00:40:34.636 A:middle
By including an expanded
color table

00:40:35.366 --> 00:40:38.066 A:middle
which actually annotates
each of the color tuples,

00:40:38.066 --> 00:40:40.456 A:middle
which have now been
turned into 16 bit integers

00:40:40.956 --> 00:40:43.616 A:middle
with individual color space
information, allowing you

00:40:43.616 --> 00:40:45.726 A:middle
to specify colors in
multiple color spaces.

00:40:46.256 --> 00:40:48.226 A:middle
Okay. That's great.

00:40:48.296 --> 00:40:50.496 A:middle
But this is California,
we're supposed

00:40:50.496 --> 00:40:51.336 A:middle
to be surfing aren't we?

00:40:51.906 --> 00:40:53.876 A:middle
Well, what does that
have to do with colors?

00:40:53.876 --> 00:40:57.826 A:middle
Well, there's colors on the web.

00:40:58.176 --> 00:41:00.856 A:middle
The good news with wide
gamut colors and the web is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.176 --> 00:41:00.856 A:middle
The good news with wide
gamut colors and the web is

00:41:00.856 --> 00:41:04.176 A:middle
that as long as your image
content is tagged appropriately

00:41:04.176 --> 00:41:05.816 A:middle
and has appropriate color
profile information,

00:41:06.496 --> 00:41:08.726 A:middle
all of the content
is color matched

00:41:08.726 --> 00:41:10.066 A:middle
when it's rendered on webpages.

00:41:10.486 --> 00:41:12.596 A:middle
So as long as you do
that you're good to go.

00:41:14.096 --> 00:41:16.326 A:middle
Also, there are now
medial queries available

00:41:16.326 --> 00:41:19.596 A:middle
to resolve assets between
P3 and sRGB capable devices,

00:41:19.596 --> 00:41:22.136 A:middle
which is really handy.

00:41:22.136 --> 00:41:24.456 A:middle
And lastly, there's a WebKit
proposal out right now

00:41:24.756 --> 00:41:28.306 A:middle
for specifying CSS colors
in color spaces other

00:41:28.306 --> 00:41:31.016 A:middle
than the assumed sRGB,
which has been the case

00:41:31.016 --> 00:41:32.076 A:middle
since CSS's inception.

00:41:32.776 --> 00:41:35.706 A:middle
And with that I would like to
hand it over to Steve Holt,

00:41:35.706 --> 00:41:38.376 A:middle
who will tell you a little
bit more about rending

00:41:38.606 --> 00:41:40.236 A:middle
with wide color in your apps.

00:41:40.406 --> 00:41:40.966 A:middle
Thank you.

00:41:41.516 --> 00:41:43.776 A:middle
[ Applause ]

00:41:44.276 --> 00:41:46.446 A:middle
&gt;&gt; Thank you Patrick.

00:41:47.156 --> 00:41:52.356 A:middle
So, in your applications
you often have your assets

00:41:52.356 --> 00:41:53.706 A:middle
that you get from
the asset catalog,

00:41:53.736 --> 00:41:57.346 A:middle
but also you might get some
content generated by your users

00:41:57.346 --> 00:42:00.056 A:middle
or pulled down from the internet
from sources you don't control.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.346 --> 00:42:00.056 A:middle
or pulled down from the internet
from sources you don't control.

00:42:00.526 --> 00:42:03.456 A:middle
And maybe you want to
generate some additional assets

00:42:03.706 --> 00:42:05.326 A:middle
as part of that.

00:42:05.456 --> 00:42:07.226 A:middle
How do you deal with
this with wide color?

00:42:07.766 --> 00:42:10.806 A:middle
Well, when you're
drawing with wide color,

00:42:10.806 --> 00:42:14.396 A:middle
I'm going to take a
simplified example here.

00:42:14.636 --> 00:42:19.936 A:middle
Now, this is a box where
one-half of the box is rendered

00:42:19.936 --> 00:42:23.696 A:middle
with the most saturated
Display P3 red we can have.

00:42:23.696 --> 00:42:25.336 A:middle
And the other half of
the box is rendered

00:42:25.336 --> 00:42:30.486 A:middle
with the most saturated
sRGB color that we can have.

00:42:30.576 --> 00:42:34.336 A:middle
Unfortunately, because
these videos are recorded,

00:42:34.536 --> 00:42:36.546 A:middle
and you're watching it
live on a projector system

00:42:36.546 --> 00:42:38.916 A:middle
that doesn't have the
same color fidelity

00:42:38.916 --> 00:42:41.016 A:middle
as our new displays
have, we have to cheat.

00:42:42.386 --> 00:42:44.956 A:middle
So, we've actually
de-saturated both colors here.

00:42:44.956 --> 00:42:48.906 A:middle
So what you're seeing isn't
exactly what this code

00:42:49.076 --> 00:42:52.146 A:middle
that I'm going to show you
will output, but render it

00:42:52.146 --> 00:42:53.396 A:middle
on a device and it
will be there.

00:42:54.556 --> 00:42:58.846 A:middle
So, I'm a Frameworks Engineer on
the Cocoa, or on the UIKit Team,

00:42:59.026 --> 00:43:05.176 A:middle
so of course I'm going to start
with Cocoa on the desktop.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.026 --> 00:43:05.176 A:middle
so of course I'm going to start
with Cocoa on the desktop.

00:43:05.676 --> 00:43:07.276 A:middle
When you're on the desktop,

00:43:07.336 --> 00:43:10.426 A:middle
it already has some great
color management support

00:43:10.426 --> 00:43:13.196 A:middle
for color profiles in your
images and in your drawing.

00:43:13.936 --> 00:43:17.316 A:middle
If you have to do manual drawing
in your code, and it needs

00:43:17.316 --> 00:43:19.956 A:middle
to be done off screen,
the recommended way

00:43:19.956 --> 00:43:24.046 A:middle
to do this is using the
NSImage with drawinghandler API.

00:43:25.036 --> 00:43:27.246 A:middle
It's called with
the current context.

00:43:28.026 --> 00:43:31.596 A:middle
And you can use this anywhere
you use any other NSImage,

00:43:32.026 --> 00:43:32.776 A:middle
it will just work there.

00:43:33.816 --> 00:43:37.426 A:middle
So, let's look at some code.

00:43:37.606 --> 00:43:40.656 A:middle
So, pretty simple,
just set up a size

00:43:41.536 --> 00:43:46.286 A:middle
and we initialize our
NSImage with the size we want.

00:43:46.286 --> 00:43:47.466 A:middle
We don't want this
to be flipped.

00:43:48.326 --> 00:43:51.276 A:middle
And we configure
our drawing handler.

00:43:53.596 --> 00:43:55.946 A:middle
We get the Rect from the
drawRect that gets passed in.

00:43:56.456 --> 00:43:57.916 A:middle
We divide it up in halves,

00:43:58.606 --> 00:44:01.426 A:middle
allocated displayP3Red
and draw it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.606 --> 00:44:01.426 A:middle
allocated displayP3Red
and draw it.

00:44:02.606 --> 00:44:05.616 A:middle
Then allocate our sRGB
red and then draw that.

00:44:06.526 --> 00:44:09.096 A:middle
And then return true,
because we true successfully.

00:44:09.096 --> 00:44:09.926 A:middle
And we're done.

00:44:10.766 --> 00:44:11.186 A:middle
There you go.

00:44:12.106 --> 00:44:12.936 A:middle
It all just works.

00:44:13.486 --> 00:44:15.166 A:middle
If you're using this in
your application today,

00:44:15.656 --> 00:44:18.546 A:middle
you're already doing
the right thing.

00:44:18.736 --> 00:44:21.306 A:middle
So, that's pretty
much the desktop.

00:44:21.906 --> 00:44:22.876 A:middle
What about iOS?

00:44:23.396 --> 00:44:24.496 A:middle
Should be just as simple right?

00:44:26.036 --> 00:44:31.026 A:middle
So you must all be familiar with
UIGraphicsBeginImageContext.

00:44:31.836 --> 00:44:34.726 A:middle
It's a nice little API.

00:44:34.956 --> 00:44:36.586 A:middle
And, let's see the code again.

00:44:37.176 --> 00:44:39.876 A:middle
We get the size, we made
the context with the size.

00:44:41.066 --> 00:44:46.716 A:middle
We divide our Rects, draw our
P3 color, draw our sRGB color.

00:44:47.666 --> 00:44:51.166 A:middle
We get our image and
then end the context.

00:44:51.166 --> 00:44:53.546 A:middle
And this is what we get out.

00:44:54.436 --> 00:44:58.266 A:middle
That's not correct.

00:44:58.426 --> 00:44:59.686 A:middle
Why didn't this work?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:00.246 --> 00:45:03.266 A:middle
Well, if we look

00:45:03.266 --> 00:45:08.256 A:middle
at the documentation we
have this fun little bit.

00:45:08.256 --> 00:45:11.956 A:middle
We've documented that
BeginImageContext API is

00:45:12.166 --> 00:45:15.456 A:middle
in the UIKit will only
every return you a 32-bit

00:45:15.456 --> 00:45:16.446 A:middle
integer context.

00:45:16.746 --> 00:45:20.526 A:middle
That means you only get 8 bits
per every channel per red,

00:45:20.526 --> 00:45:21.516 A:middle
green, blue, and alpha.

00:45:23.376 --> 00:45:28.086 A:middle
This has a pretty big impact
on what we can draw with this.

00:45:29.466 --> 00:45:31.476 A:middle
Since we can't create
contexts that are larger

00:45:31.476 --> 00:45:37.486 A:middle
than 8 bits per color channel,
it can't represent any colors

00:45:37.486 --> 00:45:41.116 A:middle
in the extended sRGB
color gamut.

00:45:41.116 --> 00:45:44.306 A:middle
And, because of the existing
interface written in C,

00:45:44.636 --> 00:45:48.706 A:middle
well we can't expand
the options.

00:45:48.826 --> 00:45:51.846 A:middle
And we didn't want to make
UIGraphics be an image context

00:45:51.846 --> 00:45:52.826 A:middle
with more options.

00:45:53.956 --> 00:45:57.666 A:middle
So, we have some new
API for you in iOS 10.

00:45:58.486 --> 00:46:00.476 A:middle
It's called
UIGraphicsImageRenderer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:58.486 --> 00:46:00.476 A:middle
It's called
UIGraphicsImageRenderer.

00:46:01.056 --> 00:46:04.136 A:middle
And the way this works is
really straightforward.

00:46:04.136 --> 00:46:07.606 A:middle
So I'm just going to jump
into some code with this.

00:46:07.786 --> 00:46:08.256 A:middle
Here we are.

00:46:08.396 --> 00:46:11.096 A:middle
First we instantiate our
image renderer object.

00:46:11.476 --> 00:46:12.506 A:middle
You can reuse this.

00:46:12.746 --> 00:46:14.506 A:middle
And it retains the
same properties

00:46:14.506 --> 00:46:17.246 A:middle
across every implication
of the image you get

00:46:17.246 --> 00:46:18.276 A:middle
out with the drawing handler.

00:46:18.776 --> 00:46:22.856 A:middle
And you just call
renderer image.

00:46:23.086 --> 00:46:26.356 A:middle
You supply your block,
and you just draw

00:46:27.116 --> 00:46:29.786 A:middle
as you would otherwise.

00:46:30.616 --> 00:46:32.696 A:middle
The bounds you can
get off of the format

00:46:32.696 --> 00:46:35.046 A:middle
which describes the
exact properties

00:46:35.046 --> 00:46:36.996 A:middle
that this particular
renderer has.

00:46:37.756 --> 00:46:39.126 A:middle
And then you just
divide the bounds.

00:46:40.756 --> 00:46:43.576 A:middle
You get and render
the P3 red square.

00:46:44.576 --> 00:46:48.136 A:middle
And then you configure and
render the sRGB red square

00:46:48.786 --> 00:46:50.456 A:middle
and just like we had
before, in AppKit,

00:46:51.166 --> 00:46:55.356 A:middle
we have a correctly rendered
extended range half P3,

00:46:55.616 --> 00:46:57.716 A:middle
half sRGB red square.

00:46:59.396 --> 00:47:01.666 A:middle
So just a few other
notes about this new API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.396 --> 00:47:01.666 A:middle
So just a few other
notes about this new API.

00:47:02.876 --> 00:47:04.966 A:middle
It is fully color
managed by default.

00:47:06.216 --> 00:47:10.216 A:middle
And it also supports the
extended range sRGB color space

00:47:10.216 --> 00:47:10.716 A:middle
by default.

00:47:11.966 --> 00:47:14.146 A:middle
And it's pretty smart
about this.

00:47:14.376 --> 00:47:17.356 A:middle
If you have a device
that has a P3 display,

00:47:18.016 --> 00:47:20.156 A:middle
like the new iPad Pro 9.7 inch,

00:47:20.656 --> 00:47:21.856 A:middle
we'll just turn it
on by default.

00:47:22.216 --> 00:47:23.766 A:middle
You don't need to do
any additional work.

00:47:23.766 --> 00:47:25.436 A:middle
But if you're on a device

00:47:25.436 --> 00:47:27.276 A:middle
that does not have the
extended color display,

00:47:27.276 --> 00:47:31.066 A:middle
like every other iPad and
iPhone, then you're going

00:47:31.066 --> 00:47:33.726 A:middle
to get the more standard
8 bits per channel,

00:47:34.156 --> 00:47:36.936 A:middle
sRGB context to draw into.

00:47:37.776 --> 00:47:39.536 A:middle
So we don't waste
the additional memory

00:47:39.836 --> 00:47:41.746 A:middle
for having the 16
bit float context.

00:47:42.436 --> 00:47:43.696 A:middle
The other thing this does

00:47:43.696 --> 00:47:46.536 A:middle
for you is it manages
the CGContext lifetime.

00:47:47.136 --> 00:47:49.346 A:middle
You don't need to worry
about ending the context

00:47:49.646 --> 00:47:52.726 A:middle
or any other management
yourself.

00:47:53.276 --> 00:47:57.426 A:middle
And for any legacy code that
you have in your application,

00:47:57.976 --> 00:48:00.446 A:middle
it works with
UIGraphicsGetCurrentContext.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.976 --> 00:48:00.446 A:middle
it works with
UIGraphicsGetCurrentContext.

00:48:00.856 --> 00:48:03.046 A:middle
So if you call into some
function like a draw Rect,

00:48:03.716 --> 00:48:06.716 A:middle
you'll do the right thing.

00:48:06.936 --> 00:48:09.546 A:middle
So, that's rendering
off the screen.

00:48:10.106 --> 00:48:11.176 A:middle
What about to the screen?

00:48:12.516 --> 00:48:15.556 A:middle
Okay we'll start
a new iKit again.

00:48:15.556 --> 00:48:18.116 A:middle
On [inaudible] view we
have the new Swift 3, well,

00:48:18.436 --> 00:48:20.516 A:middle
newly named in Swift 3, Draw.

00:48:20.916 --> 00:48:23.246 A:middle
And we do the right
thing for you here.

00:48:24.086 --> 00:48:27.736 A:middle
When you call draw in
your UI view subclasses,

00:48:28.526 --> 00:48:34.346 A:middle
if you are on an iPad 9.7 inch,
we will call your draw method

00:48:34.446 --> 00:48:38.026 A:middle
in the correct, extended
range sRGB color space

00:48:38.026 --> 00:48:40.056 A:middle
with the floating
point pixel format.

00:48:41.236 --> 00:48:44.566 A:middle
And if you're not on one
of the new devices, then,

00:48:45.386 --> 00:48:48.916 A:middle
well you get what you get
now, 8 bits per channel sRGB.

00:48:48.916 --> 00:48:53.986 A:middle
And of course if you have
images, we have UIImageView,

00:48:54.646 --> 00:48:58.366 A:middle
which has been color managed
since iOS 9.3 and continues

00:48:58.366 --> 00:49:02.686 A:middle
to be color managed today.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.366 --> 00:49:02.686 A:middle
to be color managed today.

00:49:02.866 --> 00:49:06.386 A:middle
If you need to know how
you're rendering, you can look

00:49:06.386 --> 00:49:09.126 A:middle
at a new trait on
UITraitCollection in your views

00:49:09.126 --> 00:49:11.446 A:middle
in view controllers
called display gamut.

00:49:12.036 --> 00:49:17.846 A:middle
It takes a UI display gamut
enum and its properties are P3

00:49:17.846 --> 00:49:22.436 A:middle
if you're on a new, P3 class
display or sRGB if you're

00:49:22.436 --> 00:49:23.856 A:middle
on a new sRGB class display.

00:49:23.856 --> 00:49:26.686 A:middle
And this can be very useful
in the case where you need

00:49:26.686 --> 00:49:31.096 A:middle
to match a particular UI
color with an asset pulled

00:49:31.096 --> 00:49:32.186 A:middle
from your asset catalog.

00:49:32.186 --> 00:49:38.146 A:middle
So you can properly match
colors to your assets.

00:49:38.326 --> 00:49:43.296 A:middle
Now, what if you know
that a view is never going

00:49:43.296 --> 00:49:45.436 A:middle
to need the extended
range sRGB context?

00:49:46.786 --> 00:49:49.636 A:middle
Well, there's a new
property on CALayer

00:49:51.136 --> 00:49:52.806 A:middle
and that is contents format.

00:49:53.226 --> 00:49:58.566 A:middle
And this controls exactly how
deep the context that CA creates

00:49:58.566 --> 00:50:01.216 A:middle
for you when it renders
that view will be.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:58.566 --> 00:50:01.216 A:middle
for you when it renders
that view will be.

00:50:02.046 --> 00:50:04.926 A:middle
By default, on the
iPad Pro 9.7 inch,

00:50:06.076 --> 00:50:08.766 A:middle
it is to use the
extended range context.

00:50:08.976 --> 00:50:10.636 A:middle
And on all of the
devices the default is

00:50:10.636 --> 00:50:13.516 A:middle
to use the traditional,
sRGB context.

00:50:14.406 --> 00:50:16.056 A:middle
And you control it with any one

00:50:16.056 --> 00:50:18.076 A:middle
of these various
format literals.

00:50:19.536 --> 00:50:22.686 A:middle
So on Cocoa, back
on the desktop,

00:50:23.696 --> 00:50:26.966 A:middle
NSView, same thing as UIView.

00:50:27.206 --> 00:50:30.586 A:middle
It will draw with the current
context that NSWindow has.

00:50:31.456 --> 00:50:36.216 A:middle
And you can look at any of the
traditional properties there

00:50:36.496 --> 00:50:38.806 A:middle
with the Window Backing Store,

00:50:38.806 --> 00:50:40.606 A:middle
the screen target
profile, etcetera.

00:50:41.836 --> 00:50:43.276 A:middle
If the window changes displays,

00:50:44.136 --> 00:50:45.496 A:middle
then you get the
view did change back

00:50:45.496 --> 00:50:47.106 A:middle
in properties callback
on your view.

00:50:47.696 --> 00:50:50.826 A:middle
And you can also listen
to the NSWindowDidChange

00:50:50.826 --> 00:50:54.086 A:middle
BackingPropertiesNotification,
which is omitted

00:50:54.086 --> 00:50:55.136 A:middle
from your view's window.

00:50:55.816 --> 00:50:57.846 A:middle
These are the same that
you've been working

00:50:57.846 --> 00:51:02.376 A:middle
with since a very long time now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:57.846 --> 00:51:02.376 A:middle
with since a very long time now.

00:51:02.376 --> 00:51:03.646 A:middle
And just as a refresher.

00:51:04.466 --> 00:51:05.416 A:middle
The backing properties

00:51:05.416 --> 00:51:12.286 A:middle
on the NSWindow include the
display scale, color space

00:51:12.626 --> 00:51:14.246 A:middle
and the output display gamut.

00:51:14.856 --> 00:51:19.816 A:middle
And just like in iOS, you
can also control how deep

00:51:19.816 --> 00:51:26.896 A:middle
of a context you get in AppKit,
with the WindowDepth property

00:51:26.896 --> 00:51:29.866 A:middle
on NSWindow, and you
can set it to any one

00:51:29.866 --> 00:51:31.216 A:middle
of these depth properties.

00:51:31.216 --> 00:51:35.736 A:middle
So if you are on a wide
gamut display but don't need

00:51:35.736 --> 00:51:40.366 A:middle
that extra precision you can
set this to be 24 bit RGB,

00:51:40.366 --> 00:51:43.766 A:middle
and it will not create the
extended context for you.

00:51:44.946 --> 00:51:47.096 A:middle
So, what did we learn today?

00:51:48.246 --> 00:51:53.766 A:middle
Well, you've seen our vision
for wide color and how to bring

00:51:53.766 --> 00:51:56.566 A:middle
that to the next generation
of displays and your users.

00:51:58.016 --> 00:51:59.356 A:middle
We've talked a little
about color gamuts

00:51:59.356 --> 00:52:02.546 A:middle
and color management,
and how to work


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:59.356 --> 00:52:02.546 A:middle
and color management,
and how to work

00:52:02.546 --> 00:52:04.506 A:middle
with that wide gamut
content that you want

00:52:04.506 --> 00:52:05.606 A:middle
to bring to your users.

00:52:06.116 --> 00:52:10.386 A:middle
We've reviewed how to use
colors in your application.

00:52:10.926 --> 00:52:15.656 A:middle
And how to take your drawing
code to the next level of color

00:52:17.016 --> 00:52:19.936 A:middle
by making sure that
it draws properly

00:52:19.936 --> 00:52:21.376 A:middle
in these wide gamut scenarios.

00:52:22.676 --> 00:52:26.866 A:middle
Now for more information you can
of course check out the slides

00:52:27.086 --> 00:52:29.166 A:middle
on the session's website.

00:52:30.076 --> 00:52:33.216 A:middle
And there are a large
number of related sessions.

00:52:34.406 --> 00:52:35.316 A:middle
This is page 1.

00:52:35.896 --> 00:52:38.866 A:middle
So please check them out.

00:52:38.866 --> 00:52:40.376 A:middle
If they've already
passed, I'm not going

00:52:40.376 --> 00:52:43.506 A:middle
to enumerate them,
there are a lot.

00:52:43.506 --> 00:52:45.986 A:middle
See the videos through
the WWDC app

00:52:45.986 --> 00:52:47.836 A:middle
or online at the WWDC website.

00:52:48.466 --> 00:52:48.966 A:middle
Thank you.
